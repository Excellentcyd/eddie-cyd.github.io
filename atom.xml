<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-11T12:39:45.254Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1.和小达一起学HTML</title>
    <link href="http://example.com/2022/08/11/1.%E5%92%8C%E5%B0%8F%E8%BE%BE%E4%B8%80%E8%B5%B7%E5%AD%A6HTML/"/>
    <id>http://example.com/2022/08/11/1.%E5%92%8C%E5%B0%8F%E8%BE%BE%E4%B8%80%E8%B5%B7%E5%AD%A6HTML/</id>
    <published>2022-08-11T11:30:31.000Z</published>
    <updated>2022-08-11T12:39:45.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="⭐HTML"><a href="#⭐HTML" class="headerlink" title="⭐HTML"></a>⭐HTML</h1><h2 id="1-基础认知"><a href="#1-基础认知" class="headerlink" title="1.基础认知"></a>1.基础认知</h2><p>HTML(Hyper Text Markup Language):超文本标记语言</p><p>Web标准：在不同的浏览器按照相同的标准显示效果，展示统一。包括以下三部分</p><table><thead><tr><th align="center">构成</th><th align="center">语言</th><th>说明</th></tr></thead><tbody><tr><td align="center">结构</td><td align="center">HTML</td><td>页面元素和内容</td></tr><tr><td align="center">表现</td><td align="center">CSS</td><td>网页元素的外观和位置等页面样式（颜色、大小等）</td></tr><tr><td align="center">行为</td><td align="center">JavaScript</td><td>页面交互效果</td></tr></tbody></table><h2 id="2-常用标签"><a href="#2-常用标签" class="headerlink" title="2.常用标签"></a>2.常用标签</h2><h4 id="2-1基础标签"><a href="#2-1基础标签" class="headerlink" title="2.1基础标签"></a>2.1基础标签</h4><h6 id="1-排版标签"><a href="#1-排版标签" class="headerlink" title="1.排版标签"></a>1.排版标签</h6><table><thead><tr><th align="center">标签</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">h1-h5</td><td align="center">标题</td></tr><tr><td align="center">p</td><td align="center">段落</td></tr><tr><td align="center">br</td><td align="center">换行</td></tr><tr><td align="center">hr</td><td align="center">分割线</td></tr><tr><td align="center">div&#x2F;span</td><td align="center">没有语义</td></tr></tbody></table><h6 id="2-文本格式标签"><a href="#2-文本格式标签" class="headerlink" title="2.文本格式标签"></a>2.文本格式标签</h6><table><thead><tr><th align="center">标签</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">b&#x2F;strong</td><td align="center">加粗</td></tr><tr><td align="center">u&#x2F;ins</td><td align="center">下划线</td></tr><tr><td align="center">i&#x2F;em</td><td align="center">倾斜</td></tr><tr><td align="center">s&#x2F;del</td><td align="center">删除线</td></tr></tbody></table><h6 id="3-图片标签"><a href="#3-图片标签" class="headerlink" title="3.图片标签"></a>3.图片标签</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;路径&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;加载失败的替换文本&quot;</span> <span class="attr">title</span>=<span class="string">&quot;悬停显示文本&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><h6 id="4-音频标签"><a href="#4-音频标签" class="headerlink" title="4.音频标签"></a>4.音频标签</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;路径&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>controls</td><td>控件界面</td></tr><tr><td>&lt;video&gt; 标签内的内容</td><td>后备内容 — 当浏览器不支持 &lt;video&gt; 标签的时候，就会显示这段内容</td></tr><tr><td>autoplay</td><td>音频和视频内容立即播放</td></tr><tr><td>loop</td><td>让音频或者视频文件循环播放</td></tr><tr><td>muted</td><td>媒体播放时，默认关闭声音</td></tr><tr><td>poster</td><td>指向了一个图像的URL，这个图像会在视频播放前显示。通常用于粗略的预览或者广告</td></tr><tr><td>preload</td><td>用来缓冲较大的文件，有3个值可选：”none” ：不缓冲；”auto” ：页面加载后缓存媒体文件；”metadata” ：仅缓冲文件的元数据</td></tr></tbody></table><h6 id="5-视频标签"><a href="#5-视频标签" class="headerlink" title="5.视频标签"></a>5.视频标签</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;路径&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="6-超链接标签"><a href="#6-超链接标签" class="headerlink" title="6.超链接标签"></a>6.超链接标签</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  _blank:新窗口打开   _self:当前窗口打开  --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>绝对超链接：链接到网络上（非本站）的网页链接</li><li>相对超链接：链接到本网站内的一个网页链接</li><li>锚点超链接（书签）：链接到本页面特定位置（文字，段落，标题等）的链接</li></ul><table><thead><tr><th align="center">属性</th><th align="center">作用</th><th align="center">注意</th></tr></thead><tbody><tr><td align="center">href</td><td align="center">超链接的</td><td align="center">#代表本页面</td></tr><tr><td align="center">name</td><td align="center">锚点的名称</td><td align="center">用 #+锚点名称 跳转到锚点</td></tr><tr><td align="center">target</td><td align="center">重定向打开方式</td><td align="center"></td></tr></tbody></table><h4 id="2-2-列表、表格、表单标签"><a href="#2-2-列表、表格、表单标签" class="headerlink" title="2.2.列表、表格、表单标签"></a>2.2.列表、表格、表单标签</h4><h6 id="1-列表标签"><a href="#1-列表标签" class="headerlink" title="1.列表标签"></a>1.列表标签</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--无序列表--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ul标签：表示无序列表的整体，只允许嵌套li标签；li标签：表示无序列表的每一项，可以嵌套任意内容--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--有序列表--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 列表的每一项前默认显示序号标识--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ol标签：表示无序列表的整体，只允许嵌套li标签；li标签：表示无序列表的每一项，可以嵌套任意内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自定义列表--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--dl标签：自定义列表的整体;dt标签：自定义列表的主题;dd标签：主题的每一项内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="2-表格标签"><a href="#2-表格标签" class="headerlink" title="2.表格标签"></a>2.表格标签</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格大标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头单元格默认加粗居中<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>表格内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>列表属性</strong></p><table><thead><tr><th align="center">属性值</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">1，I，i，A，a (il)</td><td align="center">有序列表样式</td></tr><tr><td align="center">disc</td><td align="center">实心圆点</td></tr><tr><td align="center">circle</td><td align="center">空心圆点</td></tr><tr><td align="center">square</td><td align="center">实心方形</td></tr><tr><td align="center">​合并单元格：给保留的单元格设置跨行合并(rowspan)跨列合并(colspan)</td><td align="center"></td></tr></tbody></table><h6 id="3-表单标签"><a href="#3-表单标签" class="headerlink" title="3.表单标签"></a>3.表单标签</h6><p>​3.1 input系列标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">type属性内容</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">text</td><td align="center">文本框</td></tr><tr><td align="center">password</td><td align="center">密码框</td></tr><tr><td align="center">radio</td><td align="center">单选框</td></tr><tr><td align="center">checkbox</td><td align="center">多选框</td></tr><tr><td align="center">file</td><td align="center">文件选择</td></tr><tr><td align="center">submit</td><td align="center">提交按钮</td></tr><tr><td align="center">reset</td><td align="center">重置按钮</td></tr><tr><td align="center">button</td><td align="center">按钮</td></tr><tr><td align="center">​3.2 select下拉菜单标签</td><td align="center"></td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--selected  默认选择--&gt;</span></span><br></pre></td></tr></table></figure><p>​3.3 textarea文本域标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3语义化标签"><a href="#2-3语义化标签" class="headerlink" title="2.3语义化标签"></a>2.3语义化标签</h4><table><thead><tr><th align="center">标签</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">header</td><td align="center">网页头部</td></tr><tr><td align="center">nav</td><td align="center">网页导航</td></tr><tr><td align="center">footer</td><td align="center">网页尾部</td></tr><tr><td align="center">aside</td><td align="center">网页侧边栏</td></tr><tr><td align="center">section</td><td align="center">网页区块</td></tr><tr><td align="center">article</td><td align="center">网页文章</td></tr></tbody></table><h2 id="3-head标签"><a href="#3-head标签" class="headerlink" title="3.head标签"></a>3.head标签</h2><p>内含标签包括：</p><table><thead><tr><th align="center">标签</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">meta</td><td align="center">网页介绍，关键字，网页编码，作者，自动跳转定义等</td></tr><tr><td align="center">base</td><td align="center">定义html网页默认打开方式</td></tr><tr><td align="center">link</td><td align="center">目标文件链接（css,js,favicon.ico等)</td></tr><tr><td align="center">script</td><td align="center">引入或嵌入js代码</td></tr><tr><td align="center">style</td><td align="center">嵌入网页的css代码</td></tr><tr><td align="center">title</td><td align="center">网页唯一标题</td></tr></tbody></table><p><strong>meta</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//http-equiv:http协议文件头</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> &gt;</span>//字符集</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Language&quot;</span> <span class="attr">content</span>=<span class="string">&quot;en&quot;</span> &gt;</span>//页面语言</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;1;url=http://www.baidu.com&quot;</span> /&gt;</span>//重定向</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;king&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;revised&quot;</span> <span class="attr">content</span>=<span class="string">&quot;king,01/15/2017&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Sublime Text3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML5文档head标签元素使用&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML5, CSS, JavaScript&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">http-equiv属性</th><th align="center">描述</th><th align="center">使用方法</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">Content-Type</td><td align="center">字符集</td><td align="center"><code>&lt;meta http-equiv=&quot;Content-Language&quot; content=&quot;en&quot; &gt;</code></td><td align="center"></td></tr><tr><td align="center">Content-Language</td><td align="center">页面语言</td><td align="center"><code>&lt;meta http-equiv=&quot;Content-Language&quot; content=&quot;en&quot; &gt;</code></td><td align="center"></td></tr><tr><td align="center">refresh</td><td align="center">重定向</td><td align="center"><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;1;url=http://www.baidu.com&quot; /&gt;</code></td><td align="center"></td></tr><tr><td align="center">expires</td><td align="center">期限</td><td align="center"><code>&lt;meta http-equiv=&quot;expires&quot; content=&quot;GMT格式时间&quot; /&gt;</code></td><td align="center">设定网页过期时间</td></tr><tr><td align="center">pragma</td><td align="center">cache模式</td><td align="center"><code>&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cashe&quot; /&gt;</code></td><td align="center">禁止浏览器从本地计算机的缓存中访问网页</td></tr><tr><td align="center">Set-Cookie</td><td align="center">cookie过期设定</td><td align="center"><code>&lt;meta http-equiv=&quot;Set-Cookie&quot; content=&quot;cookie-value=xxx;expires=GMT格式时间；path&quot; /&gt;</code></td><td align="center">如果网页过期，保存在本机的全部cookie自动删除</td></tr><tr><td align="center">Window-target</td><td align="center">显示窗口的设定</td><td align="center"><code>&lt;meta http-equiv=&quot;Window-target&quot; content=&quot;GMT 格式时间&quot; /&gt;</code></td><td align="center">强制在当前窗口以独立页面方式显示（防止外部页面在框架里调用本页面）</td></tr></tbody></table><p><strong>link</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><p><strong>style</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span> &#123;<span class="attribute">font</span>: bold <span class="number">20px</span>/<span class="number">2.0em</span> arial,verdana;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>script</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;h1&gt;HTML5 + CSS + JS --- head标签&lt;/h1&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>title</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML 5 之网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>base</strong></p><p>页面上的所有链接规定的默认地址</p><ul><li>前面的base标签会覆盖后面的标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;./url/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">target属性值</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">_blank</td><td align="center">在新的窗口打开链接</td></tr><tr><td align="center">_self（默认值）</td><td align="center">自身窗口</td></tr><tr><td align="center">_parent</td><td align="center">父窗口或超链接引用框架的框架集中打开</td></tr><tr><td align="center">_top</td><td align="center">清除所有被包含的框架并将文档载入整个浏览器窗口</td></tr></tbody></table><h2 id="块级元素-amp-内联元素-amp-空元素"><a href="#块级元素-amp-内联元素-amp-空元素" class="headerlink" title="块级元素 &amp; 内联元素 &amp; 空元素"></a>块级元素 &amp; 内联元素 &amp; 空元素</h2><ul><li><p>块级元素在页面中以块的形式展现 —— 相对于其前面的内容它会出现在新的一行，其后的内容也会被挤到下一行展现。块级元素通常用于展示页面上结构化的内容，例如段落、列表、导航菜单、页脚等等。一个以block形式展现的块级元素不会被嵌套进内联元素中，但可以嵌套在其它块级元素中。</p></li><li><p>内联元素通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或者一组内容。内联元素不会导致文本换行：它通常出现在一堆文字之间例如超链接元素&lt;a&gt;或者强调元素&lt;em&gt;和&lt;strong&gt;。</p></li><li><p>不是所有元素都拥有开始标签，内容，结束标签。一些元素只有一个标签，通常用来在此元素所在位置插入&#x2F;嵌入一些东西。例如：元素&lt;img&gt;是用来在元素&lt;img&gt;所在位置插入一张指定的图片。</p></li></ul><h2 id="嵌入-iframe"><a href="#嵌入-iframe" class="headerlink" title="嵌入 iframe"></a>嵌入 iframe</h2><p>&lt;iframe&gt;元素旨在允许您将其他Web文档嵌入到当前文档中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://developer.mozilla.org/en-US/docs/Glossary&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowfullscreen</span> <span class="attr">sandbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://developer.mozilla.org/en-US/docs/Glossary&quot;</span>&gt;</span></span><br><span class="line">    Fallback link for browsers that don&#x27;t support iframes</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><p>在网上，你会和两种类型的图片打交道 — 位图和矢量图:</p><ul><li>位图使用像素网格来定义 — 一个位图文件精确得包含了每个像素的位置和它的色彩信息。流行的位图格式包括 Bitmap (<code>.bmp</code>), PNG (<code>.png</code>), JPEG (<code>.jpg</code>), and GIF (<code>.gif</code>.)</li><li>矢量图使用算法来定义 — 一个矢量图文件包含了图形和路径的定义，电脑可以根据这些定义计算出当它们在屏幕上渲染时应该呈现的样子。 <a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Glossary/SVG" >SVG<i class="fas fa-external-link-alt"></i></a> 格式可以让我们创造用于 Web 的精彩的矢量图形。<strong>无论它的尺寸如何，都使用算法来计算出图像的形状，仅仅是根据放大的倍数来调整算法中的值。</strong></li></ul><p>SVG 是用于描述矢量图像的XML语言。 它基本上是像HTML一样的标记，只是你有许多不同的元素来定义要显示在图像中的形状，以及要应用于这些形状的效果。 SVG用于标记图形，而不是内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">baseProfile</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;150&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;100&quot;</span> <span class="attr">r</span>=<span class="string">&quot;90&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;blue&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;⭐HTML&quot;&gt;&lt;a href=&quot;#⭐HTML&quot; class=&quot;headerlink&quot; title=&quot;⭐HTML&quot;&gt;&lt;/a&gt;⭐HTML&lt;/h1&gt;&lt;h2 id=&quot;1-基础认知&quot;&gt;&lt;a href=&quot;#1-基础认知&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>2.和小达一起学CSS</title>
    <link href="http://example.com/2022/08/11/2.%E5%92%8C%E5%B0%8F%E8%BE%BE%E4%B8%80%E8%B5%B7%E5%AD%A6CSS/"/>
    <id>http://example.com/2022/08/11/2.%E5%92%8C%E5%B0%8F%E8%BE%BE%E4%B8%80%E8%B5%B7%E5%AD%A6CSS/</id>
    <published>2022-08-11T11:30:31.000Z</published>
    <updated>2022-08-11T12:37:59.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="⭐CSS-基础"><a href="#⭐CSS-基础" class="headerlink" title="⭐CSS 基础"></a>⭐CSS 基础</h1><p>CSS—<strong>层叠样式表(Cascading Style Sheets)</strong></p><h1 id="1-引用-css"><a href="#1-引用-css" class="headerlink" title="1.引用 css"></a>1.引用 css</h1><p>1.外链式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>2.嵌入式</p><ul><li><p>在 head 中</p></li><li><p>单个页面</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font</span>: bold <span class="number">20px</span>/<span class="number">2em</span> arial, verdana;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.内联式</p><ul><li>单个元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:black; margin:16px&quot;</span>&gt;</span>Something<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2.选择器"></a>2.选择器</h1><h3 id="2-1-基础选择器"><a href="#2-1-基础选择器" class="headerlink" title="2.1 基础选择器"></a>2.1 基础选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 标签选择器 就是 选中改标签名的标签 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 类选择器  选中html中定义了class类的标签 */</span></span><br><span class="line"><span class="selector-class">.classname</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* id选择器  选中html中定义了id的标签 */</span></span><br><span class="line"><span class="selector-id">#idname</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-选择器进阶"><a href="#2-2-选择器进阶" class="headerlink" title="2.2 选择器进阶"></a>2.2 选择器进阶</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 后代选择器*/</span></span><br><span class="line">选择器<span class="number">1</span> 选择器<span class="number">2</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 子代选择器*/</span></span><br><span class="line">选择器<span class="number">1</span> &gt; 选择器<span class="number">2</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 并集选择器*/</span></span><br><span class="line">选择器<span class="number">1</span>,</span><br><span class="line">选择器<span class="number">2</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 交集选择器*/</span></span><br><span class="line">选择器<span class="number">1</span>.选择器<span class="number">2</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* hover伪类选择器*/</span></span><br><span class="line">选择器<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-结构伪类选择器"><a href="#2-3-结构伪类选择器" class="headerlink" title="2.3 结构伪类选择器"></a>2.3 结构伪类选择器</h3><p> 根据元素在 html 中的结构关系查找元素，减少对于 HTML 中类的依赖，有利于保持代码整洁。</p><table><thead><tr><th align="center">选择器</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">E:first-child{}</td><td align="center">匹配父元素中第一个子元素，并且是 E 元素</td></tr><tr><td align="center">E:last-child{}</td><td align="center">匹配父元素中最后一个子元素，并且是 E 元素</td></tr><tr><td align="center">E:nth-child(n){}</td><td align="center">匹配父元素中第 n 个子元素，并且是 E 元素</td></tr><tr><td align="center">E:nth-last-child(n){}</td><td align="center">匹配父元素中倒数第 n 个子元素，并且是 E 元素</td></tr></tbody></table><p>注意：n 为 0 1 2 3 4 5 6 ……</p><p>通过 n 可以组成常见公式，如：</p><table><thead><tr><th align="center">功能</th><th align="center">公式</th></tr></thead><tbody><tr><td align="center">奇数</td><td align="center">2n+1 ; odd</td></tr><tr><td align="center">偶数</td><td align="center">2n ; even</td></tr><tr><td align="center">找到前 5 个</td><td align="center">-n+5</td></tr><tr><td align="center">第五个往后</td><td align="center">n+5</td></tr></tbody></table><h3 id="2-4-链接伪类选择器"><a href="#2-4-链接伪类选择器" class="headerlink" title="2.4 链接伪类选择器"></a>2.4 链接伪类选择器</h3><p> 场景：用于选中超链接的不同状态</p><table><thead><tr><th align="center">选择器语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">a:link{}</td><td align="center">选中链接 a<strong>未访问过</strong>的状态</td></tr><tr><td align="center">a:visited{}</td><td align="center">选中链接 a<strong>访问之后</strong>的状态</td></tr><tr><td align="center"><strong>a:hover{}</strong></td><td align="center">选中链接 a<strong>鼠标悬停</strong>的状态</td></tr><tr><td align="center">a:active{}</td><td align="center">选中链接 a<strong>鼠标按下</strong>的状态</td></tr></tbody></table><p>注意：若需要同时实现以上四种状态效果，需要按表所示的顺序书写</p><h3 id="2-5-焦点伪类选择器"><a href="#2-5-焦点伪类选择器" class="headerlink" title="2.5 焦点伪类选择器"></a>2.5 焦点伪类选择器</h3><p> 场景：用于选中元素获取焦点时状态，常用于表单控件</p><table><thead><tr><th align="center">选择器语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">input:focus{}</td><td align="center">获取焦点时状态</td></tr></tbody></table><p>注意：表单控件获取焦点时默认会显示外部轮廓线</p><h3 id="2-6-属性选择器"><a href="#2-6-属性选择器" class="headerlink" title="2.6 属性选择器"></a>2.6 属性选择器</h3><p> 场景：用于选中元素有该属性的元素</p><table><thead><tr><th align="center">选择器语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">E[attr]</td><td align="center">选择有 attr 属性的元素</td></tr><tr><td align="center">E[attr&#x3D;’val’]</td><td align="center">选择有 attr 属性且值为 val 的元素</td></tr></tbody></table><h1 id="3-字体和文本样式"><a href="#3-字体和文本样式" class="headerlink" title="3.字体和文本样式"></a>3.字体和文本样式</h1><h3 id="3-1-字体样式"><a href="#3-1-字体样式" class="headerlink" title="3.1 字体样式"></a>3.1 字体样式</h3><table><thead><tr><th align="center">字体样式</th><th align="center">属性名</th><th align="center">属性值</th></tr></thead><tbody><tr><td align="center">字体大小</td><td align="center">font-size</td><td align="center">16px(默认)</td></tr><tr><td align="center">字体粗细</td><td align="center">font-weight</td><td align="center">400；normal(400)；blod(700)</td></tr><tr><td align="center">字体样式</td><td align="center">font-style</td><td align="center">normal&#x2F;italic(倾斜)</td></tr><tr><td align="center">字体系列</td><td align="center">font-family</td><td align="center">具体字体 1,具体字体 2,具体字体 3,具体字体 4,…,字体系列</td></tr><tr><td align="center">行高</td><td align="center">line-height</td><td align="center">50px ; 倍数(当前标签 font-seze 的倍数)</td></tr></tbody></table><p><strong>font-family 渲染规则：</strong></p><ol><li>从左往右按照顺序查找，如果电脑中未安装该字体，则显示下一个字体</li><li>如果都不支持，此时会根据操作系统，显示最后字体系列的默认字体</li></ol><p><strong>字体连写：</strong>font : style weight size&#x2F;line-height family;</p><h3 id="3-2-文本样式"><a href="#3-2-文本样式" class="headerlink" title="3.2 文本样式"></a>3.2 文本样式</h3><table><thead><tr><th align="center">文本样式</th><th align="center">属性名</th><th align="center">属性值</th></tr></thead><tbody><tr><td align="center">文本缩进</td><td align="center">text-indent</td><td align="center">100px ; 1em(1em &#x3D; 当前标签的 font-size 大小)</td></tr><tr><td align="center">水平对齐方式</td><td align="center">ext-align</td><td align="center">center；left; right(给文本的父元素设置)</td></tr><tr><td align="center">文本修饰</td><td align="center">text-decoration</td><td align="center">none; underline(下划线)</td></tr></tbody></table><h1 id="4-背景和显示模式"><a href="#4-背景和显示模式" class="headerlink" title="4.背景和显示模式"></a>4.背景和显示模式</h1><h3 id="4-1-背景"><a href="#4-1-背景" class="headerlink" title="4.1 背景"></a>4.1 背景</h3><table><thead><tr><th align="center">背景</th><th align="center">属性名</th><th align="center">属性值</th></tr></thead><tbody><tr><td align="center">背景色</td><td align="center">background-color</td><td align="center">rgba(0, 0, 0, .5) ; rgb(0,0,0) ; #ccc ; pink</td></tr><tr><td align="center">背景图</td><td align="center">background-image</td><td align="center">url(地址);</td></tr><tr><td align="center">背景平铺</td><td align="center">background-repeat</td><td align="center">repeat ; no-repeat ; repeat-x ; repeat-y</td></tr><tr><td align="center">背景位置</td><td align="center">background-position</td><td align="center">水平位置 垂直位置 （方位名词 or 数字+px）</td></tr></tbody></table><p><strong>背景连写：</strong>background: colr image repeat position&#x2F;size</p><h5 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h5><table><thead><tr><th align="center">属性名</th><th align="center">属性值</th><th align="center">场景</th></tr></thead><tbody><tr><td align="center">background-size</td><td align="center">数字+px</td><td align="center">简单常用</td></tr><tr><td align="center">background-size</td><td align="center">百分比</td><td align="center">相对于当前盒子的宽高的百分比</td></tr><tr><td align="center">background-size</td><td align="center">contain</td><td align="center">包含，将背景图按自身大小等比缩放</td></tr><tr><td align="center">background-size</td><td align="center">cover</td><td align="center">覆盖，将背景图等比缩放，刚好填满整个盒子</td></tr></tbody></table><h3 id="4-2-显示模式-块，行内，行内块"><a href="#4-2-显示模式-块，行内，行内块" class="headerlink" title="4.2 显示模式(块，行内，行内块)"></a>4.2 显示模式(块，行内，行内块)</h3><ul><li>块<ul><li>特点<ul><li>独占一行</li><li>设置宽高生效</li><li>宽度默认是父级的 100%</li></ul></li><li>转换写法 : display: block</li></ul></li><li>行内<ul><li>特点<ul><li>一行显示多个</li><li>设置宽高不生效</li><li>尺寸和内容一样大</li></ul></li><li>转换写法 : display: inline;</li></ul></li><li>行内块<ul><li>特点<ul><li>一行显示多个</li><li>设置宽高生效</li></ul></li><li>转换写法: display: inline-block</li></ul></li></ul><h1 id="5-CSS-特性-继承性，层叠性"><a href="#5-CSS-特性-继承性，层叠性" class="headerlink" title="5.CSS 特性(继承性，层叠性)"></a>5.CSS 特性(继承性，层叠性)</h1><h3 id="4-1-继承性"><a href="#4-1-继承性" class="headerlink" title="4.1 继承性"></a>4.1 继承性</h3><p>子元素可以继承父元素的属性：文字控制属性都能继承, 不是控制文字的都不能继承；自己有相关的属性则执行自己的, 不执行继承。</p><p><strong>控制继承</strong></p><p>CSS 为控制继承提供了四个特殊的通用属性值。每个 css 属性都接收这些值。</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/inherit"><code>inherit</code></a></p><p>设置该属性会使子元素属性和父元素相同。实际上，就是 “开启继承”.</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/initial"><code>initial</code></a></p><p>设置属性值和浏览器默认样式相同。如果浏览器默认样式中未设置且该属性是自然继承的，那么会设置为 <code>inherit</code> 。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/unset"><code>unset</code></a></p><p>将属性重置为自然值，也就是如果属性是自然继承那么就是 <code>inherit</code>，否则和 <code>initial</code>一样</p></li></ul><h3 id="4-2-层叠性"><a href="#4-2-层叠性" class="headerlink" title="4.2 层叠性"></a>4.2 层叠性</h3><p><strong>优先级</strong>：继承 &lt; 通配符 &lt; 标签 &lt; 类 &lt; id &lt; 行内样式 &lt; !important</p><p><strong>权重叠加计算</strong>一个选择器的优先级可以说是由四个部分相加 (分量)</p><table><thead><tr><th>千位</th><th>百位</th><th>十位</th><th>个位</th></tr></thead><tbody><tr><td>行内选择器个数</td><td>id 选择器个数</td><td>类选择器个数</td><td>标签选择器个数</td></tr></tbody></table><p><strong>!important</strong>：覆盖所有上面所有优先级计算（<strong>强烈建议除了非常情况不要使用它。</strong> <code>!important</code> 改变了层叠的常规工作方式，它会使调试 CSS 问题非常困难，特别是在大型样式表中）</p><h1 id="6-盒子模型"><a href="#6-盒子模型" class="headerlink" title="6.盒子模型"></a>6.盒子模型</h1><h3 id="6-1-盒子的概念"><a href="#6-1-盒子的概念" class="headerlink" title="6.1 盒子的概念"></a>6.1 盒子的概念</h3><p> 1.页面中的每一个标签，都可看做是一个 “盒子”，通过盒子的视角更方便的进行布局</p><p> 2.浏览器在渲染（显示）网页时，会将网页中的元素看做是一个个的矩形区域，我们也形象的称之为 盒子</p><h3 id="6-2-内容-content"><a href="#6-2-内容-content" class="headerlink" title="6.2 内容(content)"></a>6.2 内容(content)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-内边距-padding"><a href="#6-3-内边距-padding" class="headerlink" title="6.3 内边距(padding)"></a>6.3 内边距(padding)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>; <span class="comment">/*一个值：上下左右*/</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">5px</span>; <span class="comment">/*两个值：上下，左右*/</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span>; <span class="comment">/*三个值：上，左右，下*/</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">10px</span>; <span class="comment">/*四个值：上，右，下，左*/</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-边框-border"><a href="#6-4-边框-border" class="headerlink" title="6.4 边框(border)"></a>6.4 边框(border)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="comment">/* border: 粗细  线条样式   颜色 -- 不分先后顺序 */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>; <span class="comment">/*实线*/</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> dashed <span class="number">#000</span>; <span class="comment">/*虚线*/</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> dotted <span class="number">#000</span>; <span class="comment">/*点线*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-外边距-margin"><a href="#6-5-外边距-margin" class="headerlink" title="6.5 外边距(margin)"></a>6.5 外边距(margin)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>; <span class="comment">/*一个值：上下左右*/</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">5px</span>; <span class="comment">/*两个值：上下，左右*/</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span>; <span class="comment">/*三个值：上，左右，下*/</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">10px</span>; <span class="comment">/*四个值：上，右，下，左*/</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>版心居中： margin: 0 auto</strong>;</p><h1 id="7-伪元素"><a href="#7-伪元素" class="headerlink" title="7.伪元素"></a>7.伪元素</h1><p>伪元素是由 css 模拟出的标签效果，根据元素在 HTML 中的结构关系查找元素，减少对于 HTML 中类的依赖，有利于保持代码整洁。常用于查找某父级选择器中的子元素</p><table><thead><tr><th align="center">伪元素</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">::before</td><td align="center">在父元素内容的最前面添加一个伪元素</td></tr><tr><td align="center">::after</td><td align="center">在父元素内容的最后面添加一个伪元素</td></tr></tbody></table><p>注意：</p><ol><li>必须设置 content 属性才能生效</li><li>伪元素默认是行内元素</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-浮动-float"><a href="#8-浮动-float" class="headerlink" title="8.浮动 float"></a>8.浮动 float</h1><h3 id="8-1-标准流"><a href="#8-1-标准流" class="headerlink" title="8.1 标准流"></a>8.1 标准流</h3><p> 标准流：又称文档流，是浏览器在渲染显示网页内容时默认采用的一套排版规则，规定了应该以何种方式排列元素</p><p>➢ 常见标准流排版规则：</p><ol><li><p>块级元素：从上往下，垂直布局，独占一行</p></li><li><p>行内元素 或 行内块元素：从左往右，水平布局，空间不够自动折行</p></li></ol><h3 id="8-2-浮动"><a href="#8-2-浮动" class="headerlink" title="8.2 浮动"></a>8.2 浮动</h3><p> 让垂直布局的盒子变成水平布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.two</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="comment">/* flr */</span></span><br><span class="line">  <span class="comment">/* float: right; */</span></span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-浮动的特点"><a href="#8-3-浮动的特点" class="headerlink" title="8.3 浮动的特点"></a>8.3 浮动的特点</h3><ol><li><p>浮动元素会脱离标准流（简称：脱标），在标准流中不占位置</p></li><li><p>浮动元素比标准流高半个级别，可以覆盖标准流中的元素</p></li><li><p>浮动找浮动，下一个浮动元素会在上一个浮动元素后面左右浮动</p></li><li><p>浮动元素有特殊的显示效果</p><p>• 一行可以显示多个</p><p>• 可以设置宽高</p></li></ol><p>➢ 注意点： • 浮动的元素不能通过 text-align:center 或者 margin:0 auto</p><h3 id="8-4-清除浮动"><a href="#8-4-清除浮动" class="headerlink" title="8.4 清除浮动"></a>8.4 清除浮动</h3><p> 浮动后脱标，不占位置。若子元素浮动了，此时子元素不能撑开标准流的块级父元素。需要清除浮动。</p><p>方法 1：<strong>直接给父元素设置高度</strong> 优点：简单粗暴 缺点：有些布局中，父元素的高度是不能固定的，不适用。</p><p>方法 2：在父元素内容的最后添加一个块级元素 ，给添加的块级元素设置 <strong>clear:both</strong>。缺点：会在页面中添加额外的标签，让页面 HTML 结构更加复杂。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  <span class="comment">/* 清除左右两侧浮动的影响 */</span></span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法 3：单伪元素清除：用伪元素替代了方法 2 中的额外标签，直接给标签添加类即可清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 为了兼容性 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法 4：双伪元素清除：用伪元素替代了额外标签，直接给标签添加类即可清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 清除浮动 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 真正清除浮动的标签 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="comment">/* content: &#x27;&#x27;;</span></span><br><span class="line"><span class="comment">    display: table; */</span></span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法 5：给父元素设置<strong>overflow : hidden</strong></p><h1 id="9-定位-position"><a href="#9-定位-position" class="headerlink" title="9.定位 position"></a>9.定位 position</h1><h3 id="9-1-标准流、浮动、定位"><a href="#9-1-标准流、浮动、定位" class="headerlink" title="9.1 标准流、浮动、定位"></a>9.1 标准流、浮动、定位</h3><p> 标准流：又称文档流，是浏览器在渲染显示网页内容时默认采用的一套排版规则，规定了应该以何种方式排列元素</p><p> 浮动：可以让原本垂直布局的 块级元素变成水平布局</p><p> 定位：可以让元素自由摆放在网页的任意位置</p><h3 id="9-2-定位的使用"><a href="#9-2-定位的使用" class="headerlink" title="9.2 定位的使用"></a>9.2 定位的使用</h3><p> <strong>1.</strong> <strong>设置定位方式</strong></p><table><thead><tr><th>属性名</th><th>属性值</th><th>定位方式</th></tr></thead><tbody><tr><td>position</td><td>static</td><td>静态定位</td></tr><tr><td>position</td><td>relative</td><td>相对定位</td></tr><tr><td>position</td><td>absolute</td><td>绝对定位</td></tr><tr><td>position</td><td>fixed</td><td>固定定位</td></tr></tbody></table><p> <strong>2.</strong> <strong>设置偏移量</strong></p><table><thead><tr><th align="center">方向</th><th align="center">属性名</th><th align="center">属性值</th></tr></thead><tbody><tr><td align="center">左:水平</td><td align="center">left</td><td align="center">数字 + px</td></tr><tr><td align="center">右:水平</td><td align="center">right</td><td align="center">数字 + px</td></tr><tr><td align="center">上:垂直</td><td align="center">top</td><td align="center">数字 + px</td></tr><tr><td align="center">下:垂直</td><td align="center">bottom</td><td align="center">数字 + px</td></tr></tbody></table><h3 id="9-3-静态定位-static"><a href="#9-3-静态定位-static" class="headerlink" title="9.3 静态定位 static"></a>9.3 静态定位 static</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/* 静态定位, 默认值, 标准流 */</span></span><br><span class="line">  <span class="attribute">position</span>: static;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点： 静态定位就是之前标准流，不能通过方位属性进行移动</p><h3 id="9-4-相对定位-relative"><a href="#9-4-相对定位-relative" class="headerlink" title="9.4 相对定位 relative"></a>9.4 相对定位 relative</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">        1. 占有原来的位置</span></span><br><span class="line"><span class="comment">        2. 仍然具体标签原有的显示模式特点</span></span><br><span class="line"><span class="comment">        3. 改变位置参照自己原来的位置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li><p>需要配合方位属性实现移动</p></li><li><p>相对于自己原来位置进行移动</p></li><li><p>在页面中占位置 → 没有脱标</p></li></ol><h3 id="9-5-绝对定位-absolute"><a href="#9-5-绝对定位-absolute" class="headerlink" title="9.5 绝对定位 absolute"></a>9.5 绝对定位 absolute</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/* 绝对定位: </span></span><br><span class="line"><span class="comment">        先找已经定位的父级, 如果有这样的父级就以这个父级为参照物进行定位;</span></span><br><span class="line"><span class="comment">        有父级, 但父级没有定位, 以浏览器窗口为参照为进行定位</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="comment">/* left: 50px; */</span></span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    1. 脱标, 不占位</span></span><br><span class="line"><span class="comment">    2. 改变标签的显示模式特点: 具体行内块特点(在一行共存, 宽高生效)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li><p>需要配合方位属性实现移动</p></li><li><p>如果祖先元素没有定位，则默认相对于浏览器进行移动</p></li><li><p>如果祖先元素有定位，则相对于<strong>最近的</strong> <strong>有定位</strong> 的祖先元素进行移动</p></li><li><p>脱标，在页面中不占位置</p></li></ol><h3 id="9-6-固定定位-fixed"><a href="#9-6-固定定位-fixed" class="headerlink" title="9.6 固定定位 fixed"></a>9.6 固定定位 fixed</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">        1. 脱标-不占位置</span></span><br><span class="line"><span class="comment">        2. 改变位置参考浏览器窗口</span></span><br><span class="line"><span class="comment">        3. 具备行内块特点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li><p>需要配合方位属性实现移动</p></li><li><p>相对于浏览器可视区域进行移动</p><p>3.脱标，在页面中不占位置</p></li></ol><h3 id="9-7-子绝父相"><a href="#9-7-子绝父相" class="headerlink" title="9.7 子绝父相"></a>9.7 子绝父相</h3><p> • 子元素：绝对定位</p><p> • 父元素：相对定位</p><p> 让子元素相对于父元素进行自由移动，此时父元素是相对定位，对网页的布局影响最小</p><h5 id="子元素相对父元素水平居中"><a href="#子元素相对父元素水平居中" class="headerlink" title="子元素相对父元素水平居中"></a>子元素相对父元素水平居中</h5><p> 子元素绝对定位，父元素相对定位</p><p> 先让子元素往右移动父盒子的一半，left ： 50%</p><p> 再让子元素往左移动自己的一半 transform : translateX(-50%)</p><h3 id="9-8-层级关系"><a href="#9-8-层级关系" class="headerlink" title="9.8 层级关系"></a>9.8 层级关系</h3><p> • 标准流 &lt; 浮动 &lt; 定位</p><p> • 相对、绝对、固定默认层级相同，此时 HTML 中写在下面的元素层级更高，会覆盖上面的元素</p><h5 id="更改定位元素层级"><a href="#更改定位元素层级" class="headerlink" title="更改定位元素层级"></a>更改定位元素层级</h5><p> 属性名：z-index 属性值 数字 数字越大，层级越高</p><h1 id="10-装饰"><a href="#10-装饰" class="headerlink" title="10.装饰"></a>10.装饰</h1><h3 id="10-1-垂直对齐方式-vertical"><a href="#10-1-垂直对齐方式-vertical" class="headerlink" title="10.1 垂直对齐方式 vertical"></a>10.1 垂直对齐方式 vertical</h3><table><thead><tr><th>属性名</th><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>vertical-align</td><td>baseline</td><td>默认，基线对齐</td></tr><tr><td>vertical-align</td><td>top</td><td>顶部对齐</td></tr><tr><td>vertical-align</td><td>middle</td><td>中部对齐</td></tr><tr><td>vertical-align</td><td>bottom</td><td>底部对齐</td></tr></tbody></table><p>➢ 可以解决：</p><ol><li>文本框和表单按钮无法对齐</li><li>input 和 img 无法对齐</li><li>div 中的文本框，文本框无法贴顶</li><li>div 不设高度由 img 标签撑开，此时 img 标签下面会存在额外间隙</li></ol><h3 id="10-2-光标类型-cursor"><a href="#10-2-光标类型-cursor" class="headerlink" title="10.2 光标类型 cursor"></a>10.2 光标类型 cursor</h3><p> 设置鼠标光标在元素上时显示的样式</p><table><thead><tr><th>属性名</th><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>cursor</td><td>defult</td><td>默认，箭头</td></tr><tr><td>cursor</td><td>pointer</td><td>抓手，提示用户点击</td></tr><tr><td>cursor</td><td>text</td><td>工，提示用户选择文字</td></tr><tr><td>cursor</td><td>move</td><td>十字光标，提示用户移动</td></tr></tbody></table><h3 id="10-3-边框圆角-border-radius"><a href="#10-3-边框圆角-border-radius" class="headerlink" title="10.3 边框圆角 border-radius"></a>10.3 边框圆角 border-radius</h3><table><thead><tr><th>属性名</th><th>属性值</th></tr></thead><tbody><tr><td>border-radius</td><td>数字+px ; 百分比</td></tr></tbody></table><p>赋值顺序：左上角开始顺时针，若未赋值，与对角相同</p><h5 id="正圆"><a href="#正圆" class="headerlink" title="正圆"></a>正圆</h5><p> 盒子为正方形，设置边框为盒子宽高的一半 border-radius:50%</p><h5 id="胶囊"><a href="#胶囊" class="headerlink" title="胶囊"></a>胶囊</h5><p> 盒子为长方形，边框为盒子高度的一半 border-radius:盒子高度的一半</p><h5 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h5><p> 设置一个盒子，四周不同颜色的边框，将盒子的宽高设置为 0 仅保留 border，得到四个三角形，将其余边框（三角形）设置为透明。opacity：0；</p><h3 id="10-4-溢出部分显示特效-overflow"><a href="#10-4-溢出部分显示特效-overflow" class="headerlink" title="10.4 溢出部分显示特效 overflow"></a>10.4 溢出部分显示特效 overflow</h3><p>盒子的内容部分超出盒子的区域范围时的显示：</p><table><thead><tr><th>属性名</th><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>overflow</td><td>visible</td><td>默认，溢出可见</td></tr><tr><td>overflow</td><td>hidden</td><td>溢出部分隐藏</td></tr><tr><td>overflow</td><td>scroll</td><td>无论是否溢出都显示滚动条</td></tr><tr><td>overflow</td><td>auto</td><td>溢出显示滚动条</td></tr></tbody></table><h3 id="10-5-元素的显示-x2F-隐藏-visibility-x2F-display"><a href="#10-5-元素的显示-x2F-隐藏-visibility-x2F-display" class="headerlink" title="10.5 元素的显示&#x2F;隐藏 visibility&#x2F;display"></a>10.5 元素的显示&#x2F;隐藏 visibility&#x2F;display</h3><p>元素本身的显示或隐藏，如 hover 后元素隐藏&#x2F;可见</p><table><thead><tr><th>属性名</th><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>visibility</td><td>hidden</td><td>隐藏元素，占位</td></tr><tr><td>display</td><td>none&#x2F;clock</td><td>隐藏元素，不占位</td></tr></tbody></table><h3 id="10-6-透明度-opacity"><a href="#10-6-透明度-opacity" class="headerlink" title="10.6 透明度 opacity"></a>10.6 透明度 opacity</h3><p>让元素整体变透明</p><table><thead><tr><th>属性名</th><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>opacity</td><td>0-1 之间的数字</td><td>0 完全透明，1 不透明</td></tr></tbody></table><h3 id="10-7-精灵图"><a href="#10-7-精灵图" class="headerlink" title="10.7 精灵图"></a>10.7 精灵图</h3><p>场景：项目中将多张小图片，合并成一张大图片，这张大图片称之为精灵图</p><p>减少服务器发送次数，提高页面加载速度</p><h5 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h5><p> 1.创建一个盒子</p><p> 2.量取所需小图的宽高，并且将宽高设为盒子的宽高</p><p> 3.将精灵图设为盒子的背景图片 backgroungimg</p><p> 4.测量小图左上角的坐标，<strong>取负</strong>设置 background-position:x y</p><h3 id="10-8-阴影-shadow"><a href="#10-8-阴影-shadow" class="headerlink" title="10.8 阴影 shadow"></a>10.8 阴影 shadow</h3><h5 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h5><table><thead><tr><th>属性名</th><th>参数</th><th>效果</th></tr></thead><tbody><tr><td>text-shadow</td><td>h-shadow</td><td>水平偏移量</td></tr><tr><td>text-shadow</td><td>v-shadow</td><td>垂直偏移量</td></tr><tr><td>text-shadow</td><td>blur</td><td>模糊度</td></tr><tr><td>text-shadow</td><td>color</td><td>阴影色</td></tr></tbody></table><p>前两个属性必需，阴影可以叠加设置，每组阴影取值之间逗号隔开</p><h5 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h5><table><thead><tr><th>属性名</th><th>参数</th><th>效果</th></tr></thead><tbody><tr><td>box-shadow</td><td>h-shadow</td><td>水平偏移量</td></tr><tr><td>box-shadow</td><td>v-shadow</td><td>垂直偏移量</td></tr><tr><td>box-shadow</td><td>blur</td><td>模糊度</td></tr><tr><td>box-shadow</td><td>spread</td><td>阴影扩大</td></tr><tr><td>box-shadow</td><td>color</td><td>阴影色</td></tr><tr><td>box-shadow</td><td>inset</td><td>改为内部阴影</td></tr></tbody></table><h3 id="10-9-过渡-transition"><a href="#10-9-过渡-transition" class="headerlink" title="10.9 过渡 transition"></a>10.9 过渡 transition</h3><table><thead><tr><th>属性名</th><th>参数</th><th>取值</th></tr></thead><tbody><tr><td>transition</td><td>过渡的属性</td><td>all 或 具体的属性名称，如 width：只有 width 过渡</td></tr><tr><td>transition</td><td>过渡时长</td><td>数字 + s</td></tr></tbody></table><p>注意点：</p><ol><li><p>过渡需要：默认状态 和 hover 状态样式不同，才能有过渡效果</p></li><li><p>transition 属性给需要过渡的元素本身加</p></li><li><p>transition 属性设置在不同状态中，效果不同的</p><p>① 给默认状态设置，鼠标移入移出都有过渡效果</p><p>② 给 hover 状态设置，鼠标移入有过渡效果，移出没有过渡效果</p></li></ol><h3 id="10-10-字体图标-icon"><a href="#10-10-字体图标-icon" class="headerlink" title="10.10 字体图标 icon"></a>10.10 字体图标 icon</h3><h5 id="图标库-www-icon-font-com"><a href="#图标库-www-icon-font-com" class="headerlink" title="图标库 www.icon-font.com"></a>图标库 <a class="link"   href="http://www.icon-font.com/" >www.icon-font.com<i class="fas fa-external-link-alt"></i></a></h5><p> 字体图标的本质也是字体</p><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><p> 1.引样式表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./iconfont/iconfont.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p> 2.使用字体图标对应的类名，必须两个类名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-11-平面转换-transform"><a href="#10-11-平面转换-transform" class="headerlink" title="10.11 平面转换 transform"></a>10.11 平面转换 transform</h3><h5 id="1-位移-translate"><a href="#1-位移-translate" class="headerlink" title="1.位移 translate"></a>1.位移 translate</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* transform: translate(水平移动距离, 垂直移动距离); */</span></span><br><span class="line">  <span class="comment">/* transform: translate(100px, 50px); */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 百分比: 盒子自身尺寸的百分比 */</span></span><br><span class="line">  <span class="comment">/* transform: translate(100%, 50%); */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* transform: translate(-100%, 50%); */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 只给出一个值表示x轴移动距离 */</span></span><br><span class="line">  <span class="comment">/* transform: translate(100px); */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transform:translate(水平移动距离, 垂直移动距离);</p><p>X 轴向右为正，Y 轴向下为正</p><p>取值：像素单位数值 百分比（参照物为盒子自身的尺寸）</p><p>单独设置单个方向的距离：transform: translateX（） transform: translateY（）</p><h5 id="2-旋转-rotate"><a href="#2-旋转-rotate" class="headerlink" title="2.旋转 rotate"></a>2.旋转 rotate</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transform: rotate(角度); 角度单位为 deg</p><p>取值为正，顺时针</p><p><strong>修改转换原点</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: right bottom;</span><br><span class="line">  <span class="comment">/*transform-origin: 水平位置 垂直位置;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认圆点是盒子中心点</p><p>取值可以为 数字+px 方位名词 百分比（参照物为盒子自身尺寸）</p><h5 id="3-缩放-scale"><a href="#3-缩放-scale" class="headerlink" title="3.缩放 scale"></a>3.缩放 scale</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>);</span><br><span class="line">  <span class="comment">/*transform: scale(缩放倍数);*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>scale 大于 1 表示放大，小于 1 表示缩小</p><h5 id="4-渐变-background-img"><a href="#4-渐变-background-img" class="headerlink" title="4.渐变 background-img"></a>4.渐变 background-img</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">box &#123;</span><br><span class="line">  <span class="comment">/*background-img:linear-gradient(颜色1，颜色2);*/</span></span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(transparent, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transparent 透明</p><h3 id="10-11-空间转换-transform"><a href="#10-11-空间转换-transform" class="headerlink" title="10.11 空间转换 transform"></a>10.11 空间转换 transform</h3><h5 id="1-位移-translate-1"><a href="#1-位移-translate-1" class="headerlink" title="1.位移 translate"></a>1.位移 translate</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* transform: translate3d(水平移动距离, 垂直移动距离,Z轴移动距离); */</span></span><br><span class="line">  <span class="comment">/* 百分比: 盒子自身尺寸的百分比 */</span></span><br><span class="line">  <span class="comment">/* transform: translate(100%, 50%,50%)*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transform:translate(水平移动距离, 垂直移动距离，Z 轴移动距离);</p><p>X 轴向右为正，Y 轴向下为正，Z 轴从 screen 指向自己为正</p><p>取值：像素单位数值 百分比（参照物为盒子自身的尺寸）</p><p>单独设置单个方向的距离：transform: translateX（） transform: translateY（）transform: translateZ（）</p><h5 id="2-旋转-rotate-1"><a href="#2-旋转-rotate-1" class="headerlink" title="2.旋转 rotate"></a>2.旋转 rotate</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transform: rotateX&#x2F;Y&#x2F;Z(角度); 角度单位为 deg<br>判断旋转方向：左手法则，左手握住旋转轴，大拇指指向正值方向，手指方向为旋转正值的方向</p><h5 id="3-透视-perspective"><a href="#3-透视-perspective" class="headerlink" title="3.透视 perspective"></a>3.透视 perspective</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="comment">/*perspective:值;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>perspective 属性添加给父级，取值为像素单位值，一般取 800-1200</p><p>在空间转换的过程中，为元素添加近大远小，近实远虚的视觉效果</p><h5 id="4-立体呈现"><a href="#4-立体呈现" class="headerlink" title="4.立体呈现"></a>4.立体呈现</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">box &#123;</span><br><span class="line">  <span class="comment">/*background-img:linear-gradient(颜色1，颜色2);*/</span></span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(transparent, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 perspective 透视属性不能呈现立体图形，父元素需要添加 transform-style:preserve-3d;使子元素处于 3d 空间</p><h5 id="5-空间缩放"><a href="#5-空间缩放" class="headerlink" title="5.空间缩放"></a>5.空间缩放</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">1.2</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">1.2</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleZ</span>(<span class="number">1.2</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(x, y, z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-12-动画-animation"><a href="#10-12-动画-animation" class="headerlink" title="10.12 动画 animation"></a>10.12 动画 animation</h3><h5 id="1-使用动画"><a href="#1-使用动画" class="headerlink" title="1.使用动画"></a>1.使用动画</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 使用动画 */</span></span><br><span class="line">  <span class="attribute">animation</span>: change <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义动画*/</span></span><br><span class="line"><span class="comment">/*@keyframes 动画名称&#123;</span></span><br><span class="line"><span class="comment">from&#123;&#125;</span></span><br><span class="line"><span class="comment">to()</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">/*@keyframes 动画名称&#123;</span></span><br><span class="line"><span class="comment">0%&#123;&#125;</span></span><br><span class="line"><span class="comment">20%&#123;&#125;</span></span><br><span class="line"><span class="comment">100%&#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> change &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 百分比指的是动画总时长的占比 */</span></span><br></pre></td></tr></table></figure><p>步骤： 1.定义动画 2.使用动画</p><h5 id="2-动画属性"><a href="#2-动画属性" class="headerlink" title="2.动画属性"></a>2.动画属性</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>: 动画名称 动画时长 速度曲线 延迟事件 重复次数 动画方向</span><br><span class="line">  执行完毕时的状态;</span><br></pre></td></tr></table></figure><p>动画名称和动画时长必须赋值；</p><p>取值不分先后顺序；</p><p>如果有 2 个时间值，第一个时间表示动画时长，第二个时间表示延迟时间</p><h1 id="11-HTML-前置认知"><a href="#11-HTML-前置认知" class="headerlink" title="11.HTML 前置认知"></a>11.HTML 前置认知</h1><h3 id="11-1-网站与网页"><a href="#11-1-网站与网页" class="headerlink" title="11.1 网站与网页"></a>11.1 网站与网页</h3><p> 网页相当于一本书，网页相当于一本书的每一页，网站是多个冲主题的网页的整合。</p><h3 id="11-2-骨架结构标签"><a href="#11-2-骨架结构标签" class="headerlink" title="11.2 骨架结构标签"></a>11.2 骨架结构标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 文档类型声明，告诉浏览器该网页的 html 版本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 认识网页所用的语言，用于<strong>搜索引擎归类</strong>和<strong>浏览器翻译</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p> 认识网页所用的字符编码，保存和打开的字符编码需要统一设置，否则可能会出现乱码</p><p> 常见字符编码：</p><ol><li><p>UTF-8：万国码，国际化的字符编码，收录了全球语言的文字</p></li><li><p>GB2312：6000+ 汉字</p></li><li><p>GBK：20000+ 汉字</p><p>注意点：开发中 统一使用 UTF-8 字符编码 即可</p></li></ol><h3 id="11-3SEO-Search-Engine-Optimization-搜索引擎优化"><a href="#11-3SEO-Search-Engine-Optimization-搜索引擎优化" class="headerlink" title="11.3SEO(Search Engine Optimization)搜索引擎优化"></a>11.3SEO(Search Engine Optimization)搜索引擎优化</h3><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p> 让网站在搜索引擎上的排名更靠前</p><h5 id="提升-SEO"><a href="#提升-SEO" class="headerlink" title="提升 SEO"></a>提升 SEO</h5><ol><li><p>竞价排名</p></li><li><p>将网页制作成 html 后缀</p></li><li><p>标签语义化（在合适的地方使用合适的标签） ……</p></li></ol><h5 id="SEO-三大标签"><a href="#SEO-三大标签" class="headerlink" title="SEO 三大标签"></a>SEO 三大标签</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>京东(JD.COM)-正品低价、品质保障、配送及时、轻松购物！<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><p>网页标题标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;description&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;京东JD.COM-专业的综合网上购物商城，为您提供正品低价的购物选择、优质便捷的服务体验。商品来自全球数十万品牌商家，囊括家电、手机、电脑、服装、居家、母婴、美妆、个护、食品、生鲜等丰富品类，满足各种购物需求。&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>网页描述标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;网上购物,网上商城,家电,手机,电脑,服装,居家,母婴,美妆,个护,食品,生鲜,京东&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>网页关键词标签<br>​</p><h1 id="12-CSS-书写规范"><a href="#12-CSS-书写规范" class="headerlink" title="12.CSS 书写规范"></a>12.CSS 书写规范</h1><table><thead><tr><th>顺序</th><th>类型</th><th>举例</th></tr></thead><tbody><tr><td>1</td><td>布局属性</td><td>display position float clear visibility overflow</td></tr><tr><td>2</td><td>盒子模型</td><td>width height margin padding border background</td></tr><tr><td>3</td><td>文本内容</td><td>color font text-decoration text-align line-height</td></tr><tr><td>4</td><td>装饰</td><td>cursor border-radius text-shadow</td></tr></tbody></table><h1 id="13-CSS-加载过程"><a href="#13-CSS-加载过程" class="headerlink" title="13.CSS 加载过程"></a>13.CSS 加载过程</h1><p>当浏览器展示一个文件的时候，它必须兼顾文件的内容和文件的样式信息，下面我们会了解到它处理文件的标准的流程。需要知道的是，下面的步骤是浏览加载网页的简化版本，而且不同的浏览器在处理文件的时候会有不同的方式，但是下面的步骤基本都会出现。</p><ol><li>浏览器载入 HTML 文件（比如从网络上获取）。</li><li>将 HTML 文件转化成一个 DOM（Document Object Model），DOM 是文件在计算机内存中的表现形式。</li><li>接下来，浏览器会拉取该 HTML 相关的大部分资源，比如嵌入到页面的图片、视频和 CSS 样式。JavaScript 则会稍后进行处理，简单起见，同时此节主讲 CSS，所以这里对如何加载 JavaScript 不会展开叙述。</li><li>浏览器拉取到 CSS 之后会进行解析，根据选择器的不同类型（比如 element、class、id 等等）把他们分到不同的“桶”中。浏览器基于它找到的不同的选择器，将不同的规则（基于选择器的规则，如元素选择器、类选择器、id 选择器等）应用在对应的 DOM 的节点中，并添加节点依赖的样式（这个中间步骤称为渲染树）。</li><li>上述的规则应用于渲染树之后，渲染树会依照应该出现的结构进行布局。</li><li>网页展示在屏幕上（这一步被称为着色）。</li></ol><p><strong>当浏览器遇到无法解析的 CSS 代码时，浏览器什么也不会做，继续解析下一个 CSS 样式。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;⭐CSS-基础&quot;&gt;&lt;a href=&quot;#⭐CSS-基础&quot; class=&quot;headerlink&quot; title=&quot;⭐CSS 基础&quot;&gt;&lt;/a&gt;⭐CSS 基础&lt;/h1&gt;&lt;p&gt;CSS—&lt;strong&gt;层叠样式表(Cascading Style Sheets)&lt;/strong&gt;</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>3.和小达一起学CSS移动端</title>
    <link href="http://example.com/2022/08/11/3.%E5%92%8C%E5%B0%8F%E8%BE%BE%E4%B8%80%E8%B5%B7%E5%AD%A6CSS%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    <id>http://example.com/2022/08/11/3.%E5%92%8C%E5%B0%8F%E8%BE%BE%E4%B8%80%E8%B5%B7%E5%AD%A6CSS%E7%A7%BB%E5%8A%A8%E7%AB%AF/</id>
    <published>2022-08-11T11:30:31.000Z</published>
    <updated>2022-08-11T12:42:34.370Z</updated>
    
    <content type="html"><![CDATA[<h1 id="⭐CSS移动端"><a href="#⭐CSS移动端" class="headerlink" title="⭐CSS移动端"></a>⭐CSS移动端</h1><p>CSS—<strong>层叠样式表(Cascading Style Sheets)</strong></p><h1 id="1-基本知识"><a href="#1-基本知识" class="headerlink" title="1.基本知识"></a>1.基本知识</h1><h3 id="1-1屏幕尺寸"><a href="#1-1屏幕尺寸" class="headerlink" title="1.1屏幕尺寸"></a>1.1屏幕尺寸</h3><p>​屏幕对角线的长度，一般用英寸来度量</p><h3 id="1-2分辨率"><a href="#1-2分辨率" class="headerlink" title="1.2分辨率"></a>1.2分辨率</h3><p>​物理分辨率：生产屏幕时就固定，不可被改变</p><p>​逻辑分辨率：由软件（驱动）决定的，制作网页参考的是逻辑分辨率</p><h3 id="1-3-视口："><a href="#1-3-视口：" class="headerlink" title="1.3.视口："></a>1.3.视口：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​viewport：视口       width&#x3D;device-width：视口宽度 &#x3D; 设备宽度      initial-scale&#x3D;1.0：缩放1倍（不缩放）</p><h1 id="2-Flex布局"><a href="#2-Flex布局" class="headerlink" title="2.Flex布局"></a>2.Flex布局</h1><h3 id="2-1特点"><a href="#2-1特点" class="headerlink" title="2.1特点"></a>2.1特点</h3><p>​Flex布局又称为弹性布局： </p><p>​1.是一种浏览器提倡的布局模型 </p><p>​2.布局网页更简单、灵活 </p><p>​3.避免浮动脱标的问题</p><h3 id="2-2添加方式"><a href="#2-2添加方式" class="headerlink" title="2.2添加方式"></a>2.2添加方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给父级元素添加 **disply:flex’**子元素可以自动拉伸和压缩。</p><p>组成部分包括：弹性容器，弹性盒子，主轴(main axis)，侧轴(cross axis)</p><h3 id="2-3主轴对齐方式justify-content"><a href="#2-3主轴对齐方式justify-content" class="headerlink" title="2.3主轴对齐方式justify-content"></a>2.3主轴对齐方式justify-content</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 居中 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="comment">/* 间距在弹性盒子(子级)之间 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="comment">/* 所有地方的间距都相等 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">    <span class="comment">/* 间距加在子级的两侧 */</span></span><br><span class="line">    <span class="comment">/* 视觉效果: 子级之间的距离是父级两头距离的2倍 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">flex-start</td><td align="center">默认值, 起点开始依次排列</td></tr><tr><td align="center">flex-end</td><td align="center">终点开始依次排列</td></tr><tr><td align="center"><strong>center</strong></td><td align="center">沿主轴居中排列</td></tr><tr><td align="center"><strong>space-around</strong></td><td align="center">弹性盒子沿主轴均匀排列, 空白间距均分在弹性盒子两侧</td></tr><tr><td align="center"><strong>space-between</strong></td><td align="center">弹性盒子沿主轴均匀排列, 空白间距均分在相邻盒子之间</td></tr><tr><td align="center"><strong>space-evenly</strong></td><td align="center">弹性盒子沿主轴均匀排列, 弹性盒子与容器之间间距相等</td></tr></tbody></table><h3 id="2-4侧轴对齐方式align-items-x2F-align-self"><a href="#2-4侧轴对齐方式align-items-x2F-align-self" class="headerlink" title="2.4侧轴对齐方式align-items&#x2F;align-self"></a>2.4侧轴对齐方式align-items&#x2F;align-self</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 居中 */</span></span><br><span class="line">    <span class="comment">/* align-items: center; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 拉伸,默认值(现有状态,测试的时候去掉子级的高度) */</span></span><br><span class="line">    <span class="comment">/* align-items: stretch; */</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 单独设置某个弹性盒子的侧轴对齐方式 */</span></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">/*align-self: center;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">flex-start</td><td align="center">默认值, 起点开始依次排列</td></tr><tr><td align="center">flex-end</td><td align="center">终点开始依次排列</td></tr><tr><td align="center"><strong>center</strong></td><td align="center">沿主轴居中排列</td></tr><tr><td align="center"><strong>stretch</strong></td><td align="center">默认值， 弹性盒子沿着主轴线被拉伸至铺满容器</td></tr></tbody></table><p>align-items（添加到弹性容器）</p><p>align-self： 控制某个弹性盒子在侧轴的对齐方式（添加到弹性盒子）</p><h3 id="2-5使用flex属性修改弹性盒子的伸缩比"><a href="#2-5使用flex属性修改弹性盒子的伸缩比" class="headerlink" title="2.5使用flex属性修改弹性盒子的伸缩比"></a>2.5使用flex属性修改弹性盒子的伸缩比</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">/* 占用父级剩余尺寸的份数 */</span></span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：添加到子盒子上，只占用父盒子的剩余尺寸，把父盒子的剩余尺寸分成n份，我占m份</p><h3 id="2-5修改元素排列方向flex-direction"><a href="#2-5修改元素排列方向flex-direction" class="headerlink" title="2.5修改元素排列方向flex-direction"></a>2.5修改元素排列方向flex-direction</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="comment">/* 1. 先确定主轴方向; 2. 再选择对应的属性实现主轴或侧轴的对齐方式 */</span></span><br><span class="line">    <span class="comment">/* 修改主轴方向: 列 */</span></span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 视觉效果: 实现盒子水平居中 */</span></span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 视觉效果: 垂直居中 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">row</td><td align="center">行, 水平(默认值)</td></tr><tr><td align="center"><strong>column</strong></td><td align="center">列, 垂直</td></tr><tr><td align="center">row-reverse</td><td align="center">行, 从右向左</td></tr><tr><td align="center">column-reverse</td><td align="center">列, 从下向上</td></tr></tbody></table><h3 id="2-6弹性盒子换行"><a href="#2-6弹性盒子换行" class="headerlink" title="2.6弹性盒子换行"></a>2.6弹性盒子换行</h3><p>​场景：只要父元素添加了flex，子元素会自动缩放(宽度不够，会挤压改变子元素尺寸)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.<span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 默认值, 不换行 */</span></span><br><span class="line">    <span class="comment">/* flex-wrap: nowrap; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 弹性盒子换行 */</span></span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 调节行对齐方式 */</span></span><br><span class="line">    <span class="comment">/* align-content: center; */</span></span><br><span class="line">    <span class="comment">/* align-content: space-around; */</span></span><br><span class="line">    <span class="attribute">align-content</span>: space-between;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性名</th><th align="center">属性值</th></tr></thead><tbody><tr><td align="center">flex-wrap</td><td align="center">wrap&#x2F;nowrap</td></tr></tbody></table><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="3-移动适配-rem"><a href="#3-移动适配-rem" class="headerlink" title="3.移动适配-rem"></a>3.移动适配-rem</h1><h3 id="3-1长度单位rem"><a href="#3-1长度单位rem" class="headerlink" title="3.1长度单位rem"></a>3.1长度单位rem</h3><ol><li>rem是<strong>相对</strong>单位</li><li>相对于HTML标签的字号，<strong>1rem &#x3D; 1HTML字号大小</strong></li><li>可以使用<strong>flexible.js</strong>，根据不同的视口宽度给网页的html根节点设置不同的font-size</li></ol><h3 id="3-2媒体查询"><a href="#3-2媒体查询" class="headerlink" title="3.2媒体查询"></a>3.2媒体查询</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用媒体查询, 根据不同的视口宽度, 设置不同的根字号 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*视口宽度为320px,根字号为32px（1/10视口宽度）*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">width</span>:<span class="number">375px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">width</span>:<span class="number">400px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2. 书写盒子尺寸, 单位rem */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3rem</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3Less"><a href="#3-3Less" class="headerlink" title="3.3Less"></a>3.3Less</h3><h5 id="3-3-1说明"><a href="#3-3-1说明" class="headerlink" title="3.3.1说明"></a>3.3.1说明</h5><p>​Less是一个CSS预处理器, Less文件后缀是**.less**</p><p>​扩充了 CSS 语言, 使 CSS 具备一定的逻辑性、计算能力</p><p>​<strong>注意：</strong>浏览器不识别Less代码，目前阶段，网页要引入对应的CSS文件</p><p>​可以在vscode中使用Less插件<strong>Easy Less</strong>，less文件自动保存生成css文件</p><h5 id="3-3-2语法"><a href="#3-3-2语法" class="headerlink" title="3.3.2语法"></a>3.3.2语法</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.注释</span></span><br><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">/*块注释*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.计算</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="comment">//加、减、乘</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100</span> + <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100</span> - <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100</span> * <span class="number">2px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 除法：需要加小括号或者./</span></span><br><span class="line">    <span class="attribute">width</span>: (<span class="number">68</span> / <span class="number">37.5rem</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">29</span> ./ <span class="number">37.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.快速生成后代选择器</span></span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="selector-class">.son</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: pink;</span><br><span class="line">        <span class="comment">// &amp; 表示当前选择器，不生成后代选择器，通常配合伪类使用</span></span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: green;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.导入其他Less文件</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;base.less&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//5.导出css文件</span></span><br><span class="line"><span class="comment">// out： ./css/happy.css</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.禁止导出</span></span><br><span class="line"><span class="comment">// out:false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-移动适配-vw-x2F-vh"><a href="#4-移动适配-vw-x2F-vh" class="headerlink" title="4.移动适配-vw&#x2F;vh"></a>4.移动适配-vw&#x2F;vh</h1><h3 id="4-1长度单位vw-x2F-vh"><a href="#4-1长度单位vw-x2F-vh" class="headerlink" title="4.1长度单位vw&#x2F;vh"></a>4.1长度单位vw&#x2F;vh</h3><ol><li>vw&#x2F;vh是<strong>相对</strong>单位,相对视口的尺寸计算结果</li><li>vw(viewport width)：<strong>1vw &#x3D; 1&#x2F;100视口宽度</strong></li><li>vh(viewport height)：<strong>1vw &#x3D; 1&#x2F;100视口高度</strong></li><li>开发中，vw和vh<strong>不会混用</strong>，混用会导致盒子变形</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1. vw = 1/100视口宽度 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30vw</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2rem和vw-x2F-vh比较"><a href="#4-2rem和vw-x2F-vh比较" class="headerlink" title="4.2rem和vw&#x2F;vh比较"></a>4.2rem和vw&#x2F;vh比较</h3><h5 id="rem："><a href="#rem：" class="headerlink" title="rem："></a>rem：</h5><ol><li>需要不断修改html文字大小</li><li>需要使用媒体查询@media</li><li>需要使用flexible.js</li></ol><p></p><h5 id="vw-x2F-vw："><a href="#vw-x2F-vw：" class="headerlink" title="vw&#x2F;vw："></a>vw&#x2F;vw：</h5><ol><li><p>以上都不需要</p></li><li><p>省去各种判断以及修改</p></li></ol><h1 id="5-响应式布局"><a href="#5-响应式布局" class="headerlink" title="5.响应式布局"></a>5.响应式布局</h1><h3 id="5-1bootstrap"><a href="#5-1bootstrap" class="headerlink" title="5.1bootstrap"></a>5.1bootstrap</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;⭐CSS移动端&quot;&gt;&lt;a href=&quot;#⭐CSS移动端&quot; class=&quot;headerlink&quot; title=&quot;⭐CSS移动端&quot;&gt;&lt;/a&gt;⭐CSS移动端&lt;/h1&gt;&lt;p&gt;CSS—&lt;strong&gt;层叠样式表(Cascading Style Sheets)&lt;/strong&gt;</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS移动端" scheme="http://example.com/tags/CSS%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>4.和小达一起学JavaScript</title>
    <link href="http://example.com/2022/08/11/4.%E5%92%8C%E5%B0%8F%E8%BE%BE%E4%B8%80%E8%B5%B7%E5%AD%A6JavaScript/"/>
    <id>http://example.com/2022/08/11/4.%E5%92%8C%E5%B0%8F%E8%BE%BE%E4%B8%80%E8%B5%B7%E5%AD%A6JavaScript/</id>
    <published>2022-08-11T11:30:31.000Z</published>
    <updated>2022-08-11T12:47:20.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="⭐JavaScript-基础"><a href="#⭐JavaScript-基础" class="headerlink" title="⭐JavaScript 基础"></a>⭐JavaScript 基础</h1><h1 id="1-引用js脚本"><a href="#1-引用js脚本" class="headerlink" title="1.引用js脚本"></a>1.引用js脚本</h1><pre><code>JavaScript 程序不能独立运行，它需要被嵌入 HTML 中，然后浏览器才能执行 JavaScript 代码。通过 `script` 标签将 JavaScript 代码引入到 HTML 中，有两种方式：</code></pre><h3 id="1-1内部"><a href="#1-1内部" class="headerlink" title="1.1内部"></a>1.1内部</h3><pre><code>直接写在html文件里，用&lt;script&gt;标签包裹</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="title function_">alert</span>(<span class="string">&#x27;你好， js&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2外部"><a href="#2-2外部" class="headerlink" title="2.2外部"></a>2.2外部</h3><pre><code>写在.js文件里，然后引入</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./my.js&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-注释"><a href="#2-注释" class="headerlink" title="2.注释"></a>2.注释</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">/*块注释*/</span></span><br></pre></td></tr></table></figure><h1 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h1><h3 id="3-1声明和赋值"><a href="#3-1声明和赋值" class="headerlink" title="3.1声明和赋值"></a>3.1声明和赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hero = <span class="string">&#x27;aoteman&#x27;</span></span><br><span class="line"><span class="keyword">var</span> hero = <span class="string">&#x27;ironman&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-2var和let的区别"><a href="#3-2var和let的区别" class="headerlink" title="3.2var和let的区别"></a>3.2var和let的区别</h3><p>由于<strong>变量提升</strong>（自动将声明放在使用前），var可以在初始化后声明，但这种设计令人困惑。</p><p>let不会变量提升，必须先声明再使用。</p><h3 id="3-3变量的命名规则"><a href="#3-3变量的命名规则" class="headerlink" title="3.3变量的命名规则"></a>3.3变量的命名规则</h3><ol><li>只能是字母、数字、下划线、$，且不能数字开头</li><li>字母区分大小写</li><li>JavaScript 内部已占用于单词（关键字或保留字）不允许使用</li><li>尽量保证变量具有一定的语义，见字知义</li></ol><h1 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4. 数据类型"></a>4. 数据类型</h1><h3 id="4-1基本数据类型"><a href="#4-1基本数据类型" class="headerlink" title="4.1基本数据类型"></a><strong>4.1基本数据类型</strong></h3><p>基本数据类型是指存放在栈中的简单数据段，数据大小确定，内存空间大小可以分配，它们是直接按值存放的，所以可以直接按值访问</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Number</td><td>数字</td></tr><tr><td>String</td><td>字符串，可以拼接，单双引号可以互相嵌套</td></tr><tr><td>Boolean</td><td>布尔（False True）</td></tr><tr><td>null</td><td>赋值了但是内容为空</td></tr><tr><td>undefined</td><td>未赋值</td></tr><tr><td>Symbol</td><td></td></tr></tbody></table><h5 id="4-1-1检测数据类型-typeof"><a href="#4-1-1检测数据类型-typeof" class="headerlink" title="4.1.1检测数据类型   typeof"></a>4.1.1检测数据类型   typeof</h5><ul><li>typeof：返回一个<strong>小写字母</strong>的类型<strong>字符串</strong></li><li>instanceof：判断类型。左边必须是引用类型，右边必须是函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h5 id="4-1-2Number"><a href="#4-1-2Number" class="headerlink" title="4.1.2Number"></a>4.1.2Number</h5><p><code>Number</code>类型包含整数和浮点数（浮点数数值必须包含一个小数点，且小数点后面至少有一个数字）两种值</p><p>IEEE745标准规定使用64位双精度</p><p>计算小数加和结果：<code>parseFloat( (0.1+0.2).toFixed(5) )</code></p><p><strong>数值类型的转换</strong>：<br><code>Number()</code>：可以用于任何的数据类型<br><code>parseInt(string, number)</code>：提取整数数值，第二个参数为进制<br><code>paseFloat(string)</code>：提取浮点数值</p><p><strong><code>NaN</code>：</strong>非数字类型，属于Number类型。非法运算符返回NaN，NaN不等于自身。isNaN判断是否为数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ab&#x27;</span>/<span class="number">10</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>);<span class="comment">// false;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="literal">false</span>);<span class="comment">// false;</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="title class_">Nan</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>**<code>Infinity</code>**：无穷大，属于Number类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Infinity</span> + -<span class="title class_">Infinity</span> = <span class="title class_">NaN</span></span><br><span class="line"><span class="title class_">Infinity</span> + <span class="title class_">Infinity</span> = <span class="title class_">Infinity</span></span><br><span class="line">-<span class="title class_">Infinity</span> + -<span class="title class_">Infinity</span> = -<span class="title class_">Infinity</span></span><br></pre></td></tr></table></figure><p><strong>数字的属性</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE"><code>Number.MAX_VALUE</code></a></td><td>可表示的最大值</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE"><code>Number.MIN_VALUE</code></a></td><td>可表示的最小值</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN"><code>Number.NaN</code></a></td><td>特指”非数字“</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY"><code>Number.NEGATIVE_INFINITY</code></a></td><td>特指“负无穷”;在溢出时返回</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY"><code>Number.POSITIVE_INFINITY</code></a></td><td>特指“正无穷”;在溢出时返回</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON"><code>Number.EPSILON</code></a></td><td>表示1和比最接近1且大于1的最小<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number"><code>Number</code></a>之间的差别</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER"><code>Number.MIN_SAFE_INTEGER</code></a></td><td>JavaScript最小安全整数.</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER"><code>Number.MAX_SAFE_INTEGER</code></a></td><td>JavaScript最大安全整数.</td></tr></tbody></table><p><strong>数字的方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat"><code>Number.parseFloat()</code></a></td><td>把字符串参数解析成浮点数，     和全局方法 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat"><code>parseFloat()</code></a> 作用一致.</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt"><code>Number.parseInt()</code></a></td><td>把字符串解析成特定基数对应的整型数字，和全局方法 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt"><code>parseInt()</code></a> 作用一致.</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite"><code>Number.isFinite()</code></a></td><td>判断传递的值是否为有限数字。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger"><code>Number.isInteger()</code></a></td><td>判断传递的值是否为整数。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN"><code>Number.isNaN()</code></a></td><td>判断传递的值是否为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN"><code>NaN</code></a>. More robust version of the original global <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN"><code>isNaN()</code></a>.</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger"><code>Number.isSafeInteger()</code></a></td><td>判断传递的值是否为安全整数。</td></tr></tbody></table><h5 id="4-1-3String"><a href="#4-1-3String" class="headerlink" title="4.1.3String"></a>4.1.3String</h5><p>字符串的值是不可变的，所以很多的字符串的<code>api</code>不会改变原字符串值<br>其他转字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> my = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// let my = [&#x27;Chris&#x27;, &#x27;Bob&#x27;, &#x27;Jim&#x27;];</span></span><br><span class="line"><span class="keyword">let</span> myString = my.<span class="title function_">toString</span>();</span><br></pre></td></tr></table></figure><p>字符串转其他：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> my = <span class="string">&quot;true&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(my));</span><br><span class="line"><span class="keyword">let</span> my = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(my));</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>长度</td></tr><tr><td>indexOf(‘zilla’)</td><td>子串起始位置</td></tr><tr><td>slice(0,3)</td><td>提取子串</td></tr><tr><td>toLowerCase &#x2F; toUpperCase()</td><td>转换大小写</td></tr><tr><td>replace(‘moz’,’van’)</td><td>替换</td></tr></tbody></table><p><strong>数字前添0：</strong>需要添n个0，在前面添n-1个，再截取后n个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&#x27;0000&#x27;</span>+num).<span class="title function_">slice</span>(-<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>字符串与数字相加：</strong>从左到右；加号左右如果有字符串，结果为字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;10&#x27;</span> + <span class="number">10.10</span> = <span class="string">&#x27;1010.1&#x27;</span></span><br><span class="line"><span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="string">&#x27;4&#x27;</span> = <span class="string">&#x27;64&#x27;</span></span><br><span class="line"><span class="string">&#x27;1&#x27;</span> + &#123;<span class="attr">a</span>:<span class="number">1</span>&#125; = <span class="string">&#x27;1[object Object]&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>模板字符串：</strong>可以使用语法糖让功能的实现代码更具可读性:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> five = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ten = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Fifteen is <span class="subst">$&#123;five + ten&#125;</span> and not <span class="subst">$&#123;<span class="number">2</span> * five + ten&#125;</span>.`</span>);</span><br><span class="line"><span class="comment">// &quot;Fifteen is 15 and not 20.&quot;</span></span><br></pre></td></tr></table></figure><h5 id="4-1-4Boolean"><a href="#4-1-4Boolean" class="headerlink" title="4.1.4Boolean"></a>4.1.4Boolean</h5><p>其他转boolean：</p><p>【null，undefined，NaN，0，空字符串，只包含空格的字符串】转换为<strong>false</strong></p><p>【非空对象，非0，非空字符串】转换为<strong>true</strong></p><p>boolean转其他：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Number(true): 1 　　　　|| 　　Number(false) : 0</span><br><span class="line">String(true):&#x27;true&#x27; 　 || 　　String(false):&#x27;false&#x27;</span><br></pre></td></tr></table></figure><h5 id="4-1-5Null"><a href="#4-1-5Null" class="headerlink" title="4.1.5Null"></a>4.1.5Null</h5><p>空对象指针类型</p><p>Null转其他：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Booleam</span>(<span class="literal">null</span>)  <span class="literal">false</span></span><br><span class="line"><span class="title class_">Number</span>(num)    <span class="number">0</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">null</span>)  <span class="string">&#x27;null&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="4-1-6Undefined"><a href="#4-1-6Undefined" class="headerlink" title="4.1.6Undefined"></a>4.1.6Undefined</h5><p>申明了变量但是没有初始化，默认为<code>undefined</code></p><p>Undefined转其他：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Boolean(undefined):　 false</span><br><span class="line">Number(undefined):　  NaN</span><br><span class="line">String(undefined):　　&#x27;undefined&#x27;</span><br></pre></td></tr></table></figure><h5 id="4-1-7Symbol"><a href="#4-1-7Symbol" class="headerlink" title="4.1.7Symbol"></a>4.1.7Symbol</h5><p><code>ES6</code>新增的一个基本数据类型，代表独一无二的值，最大的用法是用来定义对象的唯一属性名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> id2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id1 == id2);  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>Symbol属性类型不支持 for…in 和 Object.keys()</p><p>但是也能有方法去访问：Object.getOwnPropertySymbols，方法会返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj)) <span class="comment">// [ Symbol(c) ]</span></span><br></pre></td></tr></table></figure><h3 id="4-2引用数据类型"><a href="#4-2引用数据类型" class="headerlink" title="4.2引用数据类型"></a>4.2引用数据类型</h3><p>引用数据类型也叫对象数据类型，包括<code>function</code>,<code>object</code>,<code>array</code>,<code>date</code>,<code>RegExp</code>等可以可以使用new创建的数据，又叫对象类型，他们是存放在<strong>堆内存</strong>中的数据</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Array</td><td>[‘Chris’, ‘Bob’, ‘Jim’]</td></tr><tr><td>Object</td><td>{ name : ‘Spot’, breed : ‘Dalmatian’ }</td></tr><tr><td>Function</td><td>函数</td></tr></tbody></table><h1 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5.运算符"></a>5.运算符</h1><h3 id="5-1算数运算符"><a href="#5-1算数运算符" class="headerlink" title="5.1算数运算符"></a>5.1算数运算符</h3><p>加+     减-   乘*    除&#x2F;   取余%</p><h3 id="5-2赋值运算符"><a href="#5-2赋值运算符" class="headerlink" title="5.2赋值运算符"></a>5.2赋值运算符</h3><p>&#x3D;</p><p>+&#x3D;  </p><p>-&#x3D;  </p><p>*&#x3D;  </p><p>&#x2F;&#x3D;  </p><p>%&#x3D;</p><h3 id="5-3一元运算符"><a href="#5-3一元运算符" class="headerlink" title="5.3一元运算符"></a>5.3一元运算符</h3><p>自增：++</p><p>自减： –</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后置自增：先使用再自增</span></span><br><span class="line">num++</span><br><span class="line">num--</span><br><span class="line"><span class="comment">//前置自增：先自增再使用</span></span><br><span class="line">++num</span><br><span class="line">--num</span><br></pre></td></tr></table></figure><h3 id="5-4比较运算符"><a href="#5-4比较运算符" class="headerlink" title="5.4比较运算符"></a>5.4比较运算符</h3><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>&gt;</td><td>左边是否大于右边</td></tr><tr><td>&lt;</td><td>左边是否小于右边</td></tr><tr><td>&gt;&#x3D;</td><td>左边是否大于或等于右边</td></tr><tr><td>&lt;&#x3D;</td><td>左边是否小于或等于右边</td></tr><tr><td>&#x3D;&#x3D;</td><td>左右两边是否相等</td></tr><tr><td>&#x3D;&#x3D;&#x3D;</td><td>左右两边是否类型和值都相等</td></tr><tr><td>!&#x3D;&#x3D;</td><td>左右两边是否不全等</td></tr></tbody></table><p>比较结果为boolean类型，即只会得到true或false</p><h3 id="5-5逻辑运算符"><a href="#5-5逻辑运算符" class="headerlink" title="5.5逻辑运算符"></a>5.5逻辑运算符</h3><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>与</td></tr><tr><td>||</td><td>或</td></tr><tr><td>!</td><td>非（取反）</td></tr></tbody></table><h1 id="6-语句"><a href="#6-语句" class="headerlink" title="6.语句"></a>6.语句</h1><h3 id="6-1分支语句"><a href="#6-1分支语句" class="headerlink" title="6.1分支语句"></a>6.1分支语句</h3><h5 id="6-1-1if语句"><a href="#6-1-1if语句" class="headerlink" title="6.1.1if语句"></a>6.1.1if语句</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    内容</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    内容</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-1-2三元表达式"><a href="#6-1-2三元表达式" class="headerlink" title="6.1.2三元表达式"></a>6.1.2三元表达式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件 ? 满足条件执行的代码 ： 不满足执行的代码</span><br></pre></td></tr></table></figure><h5 id="6-1-3switch语句"><a href="#6-1-3switch语句" class="headerlink" title="6.1.3switch语句"></a>6.1.3switch语句</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;没有数据&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到跟小括号里数据<strong>全等</strong>的case值，并执行里面对应的代码,若没有全等 &#x3D;&#x3D;&#x3D; 的则执行default里的代码</p><p>般需要配合<strong>break</strong>关键字使用 没有break会造成case<strong>穿透</strong></p><h3 id="6-2循环语句"><a href="#6-2循环语句" class="headerlink" title="6.2循环语句"></a>6.2循环语句</h3><h5 id="6-2-1while语句"><a href="#6-2-1while语句" class="headerlink" title="6.2.1while语句"></a>6.2.1while语句</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;</span><br><span class="line">    重复执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>continue：结束本次循环，继续下次循环 </p><p>break：跳出所在的循环</p><h5 id="6-2-2for循环"><a href="#6-2-2for循环" class="headerlink" title="6.2.2for循环"></a>6.2.2for循环</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明记录循环次数的变量; 循环条件; 变化值)&#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-数组Array"><a href="#7-数组Array" class="headerlink" title="7.数组Array"></a>7.数组Array</h1><p><strong>声明</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;data1&#x27;</span>,<span class="string">&#x27;data2&#x27;</span>,<span class="string">&#x27;data3&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>取值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><strong>长度</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="property">length</span></span><br></pre></td></tr></table></figure><p><strong>增删改查</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增</span></span><br><span class="line">arr.<span class="title function_">push</span>(元素<span class="number">1</span>,元素<span class="number">2</span>)<span class="comment">//将一个或多个元素添加到数组的*末尾*，*并返回该数组的新长度*</span></span><br><span class="line">arr.<span class="title function_">unshift</span>(元素<span class="number">1</span>,元素<span class="number">2</span>)<span class="comment">//将一个或多个元素添加到数组的*开头*，*并返回该数组的新长度*</span></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">arr.<span class="title function_">shift</span>()<span class="comment">//从数组中删除*第一个*元素，并*返回该元素的值*</span></span><br><span class="line">arr.<span class="title function_">pop</span>()<span class="comment">//从数组中删除*最后一个*元素，并*返回该元素的值*</span></span><br><span class="line">arr.<span class="title function_">splice</span>(起始位置,删除个数)<span class="comment">//从数组中删除*指定*元素</span></span><br><span class="line"><span class="comment">//改</span></span><br><span class="line">arr[i] = 新值</span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">arr[i]</span><br></pre></td></tr></table></figure><h1 id="8-对象Object"><a href="#8-对象Object" class="headerlink" title="8.对象Object"></a>8.对象Object</h1><p>可以理解为是无序的数据的集合</p><p><strong>声明</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 对象名 = &#123;</span><br><span class="line">    属性名:属性值;</span><br><span class="line">    方法名:函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>访问属性   调用方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明人对象</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;奥特曼&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18000</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">jiguang</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;biubiubiu&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 访问属性    对象.属性名 or  对象[&#x27;属性名&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">uname</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="string">&#x27;gender&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 调用方法    对象.方法名()</span></span><br><span class="line">person.<span class="title function_">jiguang</span>()</span><br></pre></td></tr></table></figure><p><strong>增删改查</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增</span></span><br><span class="line">对象.新属性名 = 新值</span><br><span class="line">对象.新方法名 = 新函数</span><br><span class="line"><span class="comment">//删</span></span><br><span class="line"><span class="keyword">delete</span> 对象名.属性名</span><br><span class="line"><span class="comment">//改  重新赋值即可</span></span><br><span class="line">对象名.属性名 = 新值</span><br><span class="line">对象名.方法名 = 新函数</span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">对象名.属性名    对象名[<span class="string">&#x27;属性名&#x27;</span>]    对象名.方法名()</span><br></pre></td></tr></table></figure><p><strong>遍历对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k)  <span class="comment">// 打印属性名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k])  <span class="comment">// 打印属性值 </span></span><br></pre></td></tr></table></figure><p><strong>Math</strong></p><table><thead><tr><th>code</th><th>描述</th></tr></thead><tbody><tr><td>Math.random()</td><td>生成0-1之间的随机数</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.max()</td><td>取最大值</td></tr><tr><td>Math.min()</td><td>取最小值</td></tr><tr><td>Math.pow()</td><td>幂运算</td></tr><tr><td>Math.abs()</td><td>绝对值</td></tr><tr><td>Math.round</td><td>就近取整</td></tr></tbody></table><p><strong>生成n-m的随机数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min</span><br></pre></td></tr></table></figure><h1 id="9-函数function"><a href="#9-函数function" class="headerlink" title="9.函数function"></a>9.函数function</h1><p>可以理解为是无序的数据的集合</p><h3 id="9-1基本使用"><a href="#9-1基本使用" class="headerlink" title="9.1基本使用"></a>9.1基本使用</h3><p><strong>语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="keyword">function</span> 函数名(形参<span class="number">1</span>,形参<span class="number">2</span>)&#123;</span><br><span class="line">  函数体</span><br><span class="line">  <span class="keyword">return</span>  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">函数名(实参<span class="number">1</span>,实参<span class="number">2</span>)</span><br><span class="line"><span class="comment">//关于return</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.使用return关键字能将内部的执行结果交给函数外部使用</span></span><br><span class="line"><span class="comment">2.函数内部只能出现 1 次 return，并且 return 后面代码不会再被执行,return会立即结束当前函数</span></span><br><span class="line"><span class="comment">3.函数可以没有 return，这种情况函数默认返回值为 undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>匿名函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以将匿名函数赋值给一个变量，然后通过变量名调用</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="title function_">functin</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p><strong>立即执行函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)&#125;)()</span><br></pre></td></tr></table></figure><h3 id="9-2参数"><a href="#9-2参数" class="headerlink" title="9.2参数"></a>9.2参数</h3><h5 id="9-2-1参数默认值"><a href="#9-2-1参数默认值" class="headerlink" title="9.2.1参数默认值"></a>9.2.1参数默认值</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置参数默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name=<span class="string">&quot;aoteman&quot;</span>, age=<span class="number">20000</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;p&gt;大家好，我叫<span class="subst">$&#123;name&#125;</span>，我今年<span class="subst">$&#123;age&#125;</span>岁了。&lt;/p&gt;`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">sayHi</span>();</span><br><span class="line"><span class="title function_">sayHi</span>(<span class="string">&#x27;杰克&#x27;</span>);</span><br><span class="line"><span class="title function_">sayHi</span>(<span class="string">&#x27;赛文&#x27;</span>, <span class="number">30000</span>);</span><br></pre></td></tr></table></figure><p>参数的默认值就是在声明参数时为形参赋值</p><p>当没有实参传入时，参数的默认值被当作实参传入</p><p>当有实参传入时，覆盖默认值</p><h5 id="9-2-2arguments"><a href="#9-2-2arguments" class="headerlink" title="9.2.2arguments"></a>9.2.2arguments</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求和函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      s += <span class="variable language_">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用求和函数</span></span><br><span class="line">  <span class="title function_">sum</span>(<span class="number">5</span>, <span class="number">10</span>); <span class="comment">// 两个参数</span></span><br><span class="line">  <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>); <span class="comment">// 三个参数</span></span><br></pre></td></tr></table></figure><p>当不确定有多少参数传入时，使用<code>arguments</code> </p><p><code>arguments</code> 是一个伪数组(可以遍历，但是不能使用数组的方法),动态获取函数的实参</p><h5 id="9-2-3剩余参数"><a href="#9-2-3剩余参数" class="headerlink" title="9.2.3剩余参数"></a>9.2.3剩余参数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">config</span>(<span class="params">a,b,...other</span>) &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"><span class="title function_">config</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"><span class="comment">//此时a = 1   b = 2  other = [3,4,5,6]</span></span><br></pre></td></tr></table></figure><p><code>...</code> 是语法符号，置于最末函数形参之前，用于获取多余的实参</p><h3 id="9-3箭头函数"><a href="#9-3箭头函数" class="headerlink" title="9.3箭头函数"></a>9.3箭头函数</h3><p>箭头函数是一种声明函数的简洁语法，差异性体现在语法格式上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> re = <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re);</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ol><li>箭头函数没有函数提升，属于<strong>表达式函数</strong></li><li>函数体只有一行代码时，可以省略 { }，并自动作为返回值返回</li><li>只有一个参数值，可以省略 ( )</li><li>箭头函数没有arguments，但可以使用<strong>剩余参数</strong></li><li>箭头函数不存在this</li></ol><h1 id="10-作用域"><a href="#10-作用域" class="headerlink" title="10.作用域"></a>10.作用域</h1><p>作用域（scope）规定了变量能够被访问的“范围”，离开了这个“范围”变量便不能被访问，作用域分为全局作用域和局部作用域。</p><h3 id="10-1全局作用域"><a href="#10-1全局作用域" class="headerlink" title="10.1全局作用域"></a>10.1全局作用域</h3><p><code>&lt;script&gt;</code> 标签和 <code>.js</code> 文件的【最外层】就是全局作用域，全局作用域中声明的变量，任何其它作用域都可以被访问。</p><p><strong>注意</strong></p><ol><li>函数中未使用任何关键字声明的变量为全局变量</li><li>尽可能少的声明全局变量，防止全局变量被污染</li></ol><h3 id="10-2函数作用域"><a href="#10-2函数作用域" class="headerlink" title="10.2函数作用域"></a>10.2函数作用域</h3><p>在函数内部声明的变量只能在函数内部被访问，外部无法直接访问。</p><p><strong>注意</strong></p><ol><li>函数内部声明的变量，在函数外部无法被访问</li><li>函数的参数也是函数内部的局部变量</li><li>不同函数内部声明的变量无法互相访问</li><li>函数执行完毕后，函数内部的变量实际被清空了</li></ol><h3 id="10-3块级作用域"><a href="#10-3块级作用域" class="headerlink" title="10.3块级作用域"></a>10.3块级作用域</h3><p>在 JavaScript 中使用 <code>&#123;&#125;</code> 包裹的代码称为代码块，代码块内部声明的变量外部将【有可能】无法被访问。</p><p><strong>注意</strong></p><ol><li><code>let</code> 声明的变量会产生块作用域，<code>var</code> 不会产生块作用域</li><li><code>const</code> 声明的常量也会产生块作用域</li><li>不同代码块之间的变量无法互相访问</li></ol><h3 id="10-4作用域链"><a href="#10-4作用域链" class="headerlink" title="10.4作用域链"></a>10.4作用域链</h3><pre><code>作用域链本质上是底层的变量查找机制，在函数被执行时，会优先查找当前函数作用域中查找变量，如果当前作用域查找不到则会依次逐级查找父级作用域直到全局作用域。</code></pre><h3 id="10-5变量-x2F-函数提升"><a href="#10-5变量-x2F-函数提升" class="headerlink" title="10.5变量&#x2F;函数提升"></a>10.5变量&#x2F;函数提升</h3><p><strong>变量提升</strong></p><pre><code>        允许再声明变量前，即被访问。可以使用let定义变量，避免变量提升        **预解析**   在代码执行前先预解析，把**带有声明**的变量提前解析到**当前作用域**的最前面，**只声明不赋值**</code></pre><p> <strong>函数提升</strong></p><pre><code>        **预解析**   会把**具有名字**的函数提前解析到**当前作用域**的最前面，**只定义不调用**。函数表达式，立即执行函数，匿名函数不预解析</code></pre><h3 id="10-6let-var-const"><a href="#10-6let-var-const" class="headerlink" title="10.6let var const"></a>10.6let var const</h3><p>变量提升指的是在变量声明之前即被访问。使用let可以避免变量提升。</p><table><thead><tr><th>关键字</th><th align="center">块级作用域</th><th align="center">变量提升</th><th align="center">初始值</th><th align="center">更改值</th><th align="center">通过window调用</th></tr></thead><tbody><tr><td>let</td><td align="center">√</td><td align="center">×√</td><td align="center">-</td><td align="center">允许</td><td align="center">不允许</td></tr><tr><td>const</td><td align="center">√</td><td align="center">×√</td><td align="center">Yes</td><td align="center">No</td><td align="center">不允许</td></tr><tr><td>var</td><td align="center">×</td><td align="center">√</td><td align="center">-</td><td align="center">不允许</td><td align="center">允许</td></tr></tbody></table><h1 id="11-闭包"><a href="#11-闭包" class="headerlink" title="11.闭包"></a>11.闭包</h1><p>1.闭包可以创建外部可访问的作用域，可以把一个变量的使用范围延伸，避免全局变量污染</p><p>2.闭包的本质仍是函数，从代码的形式上来看是函数返回一个子函数，子函数访问父函数的局部变量</p><p>3.但是过度使用闭包会造成内存泄漏的现象</p><h1 id="12-解构赋值"><a href="#12-解构赋值" class="headerlink" title="12.解构赋值"></a>12.解构赋值</h1><p><strong>解构赋值</strong>语法是一种 Javascript 表达式。通过<strong>解构赋值,</strong> 可以将属性&#x2F;值从对象&#x2F;数组中取出,赋值给其他变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, rest;</span><br><span class="line">[a, b] = [<span class="number">10</span>, <span class="number">20</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line">[a, b, ...rest] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">// [30, 40, 50]</span></span><br><span class="line"></span><br><span class="line">(&#123; a, b &#125; = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">a1</span>:b, <span class="attr">a2</span>:c &#125; = &#123; <span class="attr">a1</span>:<span class="number">1</span>, <span class="attr">a2</span>:<span class="number">2</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stage 4（已完成）提案中的特性</span></span><br><span class="line">(&#123;a, b, ...rest&#125; = &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span>, <span class="attr">d</span>: <span class="number">40</span>&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">// &#123;c: 30, d: 40&#125;</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>数组</p><ol start="3"><li>变量的数量大于单元值数量时，多余的变量将被赋值为  <code>undefined</code></li><li>变量的数量小于单元值数量时，可以通过 <code>...</code> 获取剩余单元值，但只能置于最末位</li><li>允许初始化变量的默认值，且只有单元值为 <code>undefined</code> 时默认值才会生效</li></ol><p>对象</p><p>   1.对象属性的值将被赋值给与属性名相同的变量</p><p>   2.对象中找不到与变量名一致的属性时变量值为 <code>undefined</code></p><p>   3.允许初始化变量的默认值，属性不存在或单元值为 <code>undefined</code> 时默认值才会生效</p><h1 id="13-面向对象"><a href="#13-面向对象" class="headerlink" title="13.面向对象"></a>13.面向对象</h1><h3 id="13-1构造函数"><a href="#13-1构造函数" class="headerlink" title="13.1构造函数"></a>13.1构造函数</h3><p>构造函数是专门用于创建对象的函数，如果一个函数使用 <code>new</code> 关键字调用，那么这个函数就是构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义构造函数</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">   </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 调用函数</span></span><br><span class="line"> <span class="keyword">new</span> <span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><ol><li>使用 new 关键字调用函数的行为被称为  <strong>实例化</strong></li><li>实例化构造函数时没有参数时可以省略 （）</li><li>构造函数的返回值即为新创建的对象</li><li>构造函数内部的 <code>return</code> 返回的值无效</li><li><strong>建议构造函数名称的首字母大写</strong></li></ol><h3 id="13-2实例成员"><a href="#13-2实例成员" class="headerlink" title="13.2实例成员"></a>13.2实例成员</h3><p><strong>实例成员只能由实例对象访问</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 构造函数内部的 this 就是实例对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例对象中动态添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line">    <span class="comment">// 实例对象动态添加方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实例化，p1是实例对象</span></span><br><span class="line">  <span class="comment">// p1 实际就是 构造函数内部的 this</span></span><br><span class="line">  <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>); <span class="comment">// 访问实例属性</span></span><br><span class="line">  p1.<span class="title function_">sayHi</span>(); <span class="comment">// 调用实例方法</span></span><br><span class="line"></span><br><span class="line">  p1 <span class="keyword">instanceof</span> <span class="title class_">Person</span><span class="comment">//判断对象p1是否是构造函数Person的实例对象</span></span><br><span class="line">  p1.<span class="property">constructor</span> <span class="comment">// 直接返回p1的构造函数</span></span><br></pre></td></tr></table></figure><ol><li>构造函数内部 <code>this</code> 实际上就是实例对象，为其动态添加的属性和方法即为实例成员</li><li>为构造函数传入参数，动态创建结构相同但值不同的对象</li><li>实例对象的 <code>constructor</code>  属性指向了构造函数</li><li><code>instanceof</code> 用于检测实例对象对应的构造函数</li><li>构造函数创建的实例对象彼此独立互不影响。</li></ol><h3 id="13-3静态成员"><a href="#13-3静态成员" class="headerlink" title="13.3静态成员"></a>13.3静态成员</h3><p><strong>静态成员只能由构造函数访问</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 省略实例成员</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 静态属性</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="property">eyes</span> = <span class="number">2</span>;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="property">arms</span> = <span class="number">2</span>;</span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="property">walk</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// this 指向 Person</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">eyes</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li>静态成员指的是添加到构造函数本身的属性和方法</li><li>一般公共特征的属性或方法静态成员设置为静态成员</li><li>静态成员方法中的 <code>this</code> 指向构造函数本身</li></ol><h3 id="13-4引用类型"><a href="#13-4引用类型" class="headerlink" title="13.4引用类型"></a>13.4引用类型</h3><h5 id="13-4-1Object"><a href="#13-4-1Object" class="headerlink" title="13.4.1Object"></a>13.4.1Object</h5><table><thead><tr><th>code</th><th align="center">解释</th></tr></thead><tbody><tr><td>Object.keys(obj)</td><td align="center">获取obj对象的所有键，以数组的形式返回</td></tr><tr><td>Object.values(obj)</td><td align="center">获取obj对象的所有值，以数组的形式返回</td></tr></tbody></table><h5 id="13-4-2Array"><a href="#13-4-2Array" class="headerlink" title="13.4.2Array"></a>13.4.2Array</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有arr都相当于是Array构造的</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="title class_">Array</span></span><br><span class="line"><span class="comment">//1.concat数组拼接  </span></span><br><span class="line"><span class="keyword">let</span> newarr = arr.<span class="title function_">concat</span>(arr1,arr2)</span><br><span class="line"><span class="comment">//2.sort数组排序    从小到大</span></span><br><span class="line"><span class="keyword">let</span> newarr = arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span> a-b&#125;)</span><br><span class="line"><span class="comment">//3.join连接数组的每个元素成为字符串</span></span><br><span class="line"><span class="keyword">let</span> str = arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="comment">//4.reverse翻转数组顺序</span></span><br><span class="line"><span class="keyword">let</span> newarr = arr.<span class="title function_">reverse</span>()</span><br><span class="line"><span class="comment">//5.from伪数组转真数组   伪数组中必须有length属性</span></span><br><span class="line"><span class="keyword">let</span> newarr = <span class="title class_">Array</span>.<span class="title function_">from</span>(伪数组)</span><br><span class="line"><span class="comment">//6.indexOf查找某个元素在数组中首次出现的索引值</span></span><br><span class="line"><span class="keyword">let</span> num = arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">//7.lastIndexOf查找某个元素在数组中最后出现的索引值</span></span><br><span class="line"><span class="keyword">let</span> num = arr.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.forEach遍历数组    第一个元素表示数组中的每一项，第二个表示每一项的下标，第三个表示数组本身</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item,index,o</span>)&#123;&#125;)</span><br><span class="line"><span class="comment">//9.find用于查找首次出现的满足条件的值</span></span><br><span class="line"><span class="keyword">let</span> re = arr.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">item,index,o</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">5</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//10.findIndex用于查找首次出现的满足条件的值，返回找到的下标</span></span><br><span class="line"><span class="keyword">let</span> re = arr.<span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">item,index,o</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">5</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//11.some用于查找，如果有一个满足，返回true</span></span><br><span class="line">arr.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">item,index,o</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">5</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//12.every用于查找，全部满足，返回true</span></span><br><span class="line">arr.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">item,index,o</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">5</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//13.filter筛选数组，把满足条件的元素放入新数组返回</span></span><br><span class="line"><span class="keyword">let</span> newarr = arr.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">item,index,o</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">5</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//14.map遍历数组，让每个元素都执行一遍回调函数，把所有结果放入新数组返回</span></span><br><span class="line"><span class="keyword">let</span> newarr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item,index,o</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item * item</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="13-5包装类型"><a href="#13-5包装类型" class="headerlink" title="13.5包装类型"></a>13.5包装类型</h3><p>在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，之所以具有对象特征的原因是字符串、数值、布尔类型数据是 JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型。</p><h5 id="13-4-1String"><a href="#13-4-1String" class="headerlink" title="13.4.1String"></a>13.4.1String</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. length 获取字符串长度</span></span><br><span class="line">str.<span class="property">length</span></span><br><span class="line"><span class="comment">//2. trim 去除两端空白符</span></span><br><span class="line"><span class="keyword">let</span> newstr = str.<span class="title function_">trim</span>()</span><br><span class="line"><span class="comment">//3.split 分割字符串，成数组</span></span><br><span class="line"><span class="keyword">let</span> newstr = str.<span class="title function_">splic</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="comment">//4. toLowerCase toUpperCase 字母转换大小写</span></span><br><span class="line"><span class="keyword">let</span> newstr = str.<span class="title function_">toLowerCase</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="comment">//5. indexOf lastIndexOf查找某个元素首次出现的索引值</span></span><br><span class="line"><span class="keyword">let</span> num = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="comment">//6. slice 字符串截取  从start索引值截到end索引值 左闭右开</span></span><br><span class="line"><span class="keyword">let</span> newstr = str.<span class="title function_">slice</span>(start,end)</span><br><span class="line"><span class="comment">//7. substring 字符串截取  会自动把小值放前面，大值放后面</span></span><br><span class="line"><span class="keyword">let</span> newstr = str.<span class="title function_">substring</span>(start,end)</span><br><span class="line"><span class="comment">//8. substr 字符串截取 从start索引位置开始截取length个</span></span><br><span class="line"><span class="keyword">let</span> newstr = str.<span class="title function_">substr</span>(start,length)</span><br></pre></td></tr></table></figure><h5 id="13-4-2Number"><a href="#13-4-2Number" class="headerlink" title="13.4.2Number"></a>13.4.2Number</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. toFixed  保留几位有效数字</span></span><br><span class="line">price = prince.<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">parseInt</span>()</span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">parseFloat</span>()</span><br></pre></td></tr></table></figure><h3 id="13-6封装"><a href="#13-6封装" class="headerlink" title="13.6封装"></a>13.6封装</h3><pre><code>封装的本质是将具有关联的代码组合在一起，其优势是能够保证代码复用且易于维护，函数是最典型也是最基础的代码封装形式，面向对象思想中的封装仍以函数为基础，但提供了更高级的封装形式。</code></pre><h5 id="13-6-1构造函数"><a href="#13-6-1构造函数" class="headerlink" title="13.6.1构造函数"></a>13.6.1构造函数</h5><pre><code>构造函数相当于一个&quot;模子&quot;，能够像字面量那样创建出对象来，所不同的是借助构造函数创建出来的实例对象之间是**彼此不影响**的。</code></pre><h5 id="13-6-2原型对象"><a href="#13-6-2原型对象" class="headerlink" title="13.6.2原型对象"></a>13.6.2原型对象</h5><pre><code>实际上每一个构造函数都有一个名为 `prototype` 的属性，译成中文是原型的意思，`prototype` 的是对象类据类型，称为构造函数的原型对象，每个原型对象都具有 `constructor` 属性代表了该原型对象对应的构造函数。每次new会产生一块内存空间保存相同的函数，会造成内存浪费，所以可以把相同的方法保存到原型对象中去。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 每个函数都有 prototype 属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure><p><strong>当访问对象的属性或方法时，先在当前实例对象是查找，然后再去原型对象查找，并且原型对象被所有实例共享。</strong></p><h5 id="13-6-3原型链"><a href="#13-6-3原型链" class="headerlink" title="13.6.3原型链"></a>13.6.3原型链</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/yxdx.png"                      alt="prototype_4"                ></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数   放公共属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原型对象   放公共方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="comment">//实例对象</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;aoteman&#x27;</span>,<span class="number">30000</span>)</span><br><span class="line"><span class="comment">//特殊属性额外加</span></span><br><span class="line">obj.<span class="property">skin</span> = <span class="string">&#x27;yellow&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="13-7继承"><a href="#13-7继承" class="headerlink" title="13.7继承"></a>13.7继承</h3><p>继承是面向对象编程的另一个特征，通过继承进一步提升代码封装的程度，JavaScript 中大多是借助原型对象实现继承的特性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步:创建公共构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二步：创建需要继承的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">money</span> = <span class="string">&#x27;a lot&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第三步：公共构造函数的实例对象赋值给继承函数的原型对象</span></span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">People</span>()</span><br><span class="line"><span class="comment">//第四步：指回构造函数本身</span></span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Star</span></span><br></pre></td></tr></table></figure><h1 id="14-this指向"><a href="#14-this指向" class="headerlink" title="14. this指向"></a>14. this指向</h1><h3 id="14-1this指向"><a href="#14-1this指向" class="headerlink" title="14.1this指向"></a>14.1this指向</h3><table><thead><tr><th></th><th align="center">指向</th></tr></thead><tbody><tr><td>普通函数</td><td align="center">window</td></tr><tr><td>方法</td><td align="center">调用者对象</td></tr><tr><td>定时器</td><td align="center">调用者</td></tr><tr><td>立即执行函数</td><td align="center">window,调用者</td></tr><tr><td>构造函数</td><td align="center">实例化对象</td></tr><tr><td>事件处理函数</td><td align="center">事件源</td></tr><tr><td>箭头函数</td><td align="center">没有this，this指向上级作用域的this</td></tr></tbody></table><p>14.2改变this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.call     会立即执行</span></span><br><span class="line">函数名.<span class="title function_">call</span>(<span class="variable language_">this</span>指向,参数,参数<span class="number">2</span>)</span><br><span class="line"><span class="comment">//2.apply    会立即执行</span></span><br><span class="line">函数名.<span class="title function_">apply</span>(<span class="variable language_">this</span>指向,[参数<span class="number">1</span>,参数<span class="number">2</span>])</span><br><span class="line"><span class="comment">//3.bind     不会立即执行，而是产生新函数</span></span><br><span class="line">函数名.<span class="title function_">bind</span>(<span class="variable language_">this</span>指向,参数<span class="number">1</span>,参数<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>总结：</p><p><strong>call</strong></p><ol><li><code>call</code> 方法能够在调用函数的同时指定 <code>this</code> 的值</li><li>使用 <code>call</code> 方法调用函数时，第1个参数为 <code>this</code> 指定的值</li><li><code>call</code> 方法的其余参数会依次自动传入函数做为函数的参数</li></ol><p><strong>apply</strong></p><ol><li>apply<code>方法能够在调用函数的同时指定</code>this&#96; 的值</li><li>使用 <code>apply</code> 方法调用函数时，第1个参数为 <code>this</code> 指定的值</li><li><code>apply</code> 方法第2个参数为数组，数组的单元值依次自动传入函数做为函数的参数</li></ol><p><strong>bind</strong></p><pre><code>`bind` 方法并**不会调用函数**，而是创建一个指定了 `this` 值的新函数</code></pre><h1 id="15-类Class"><a href="#15-类Class" class="headerlink" title="15.类Class"></a>15.类Class</h1><h3 id="15-1封装"><a href="#15-1封装" class="headerlink" title="15.1封装"></a>15.1封装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br></pre></td></tr></table></figure><h3 id="15-2添加成员"><a href="#15-2添加成员" class="headerlink" title="15.2添加成员"></a>15.2添加成员</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//静态成员</span></span><br><span class="line">    <span class="keyword">static</span> language = <span class="string">&#x27;Chinese&#x27;</span></span><br><span class="line"><span class="keyword">static</span> kungfu = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//访问静态属性和静态方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">language</span>)</span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">kungfu</span>()</span><br></pre></td></tr></table></figure><ul><li><code>static</code> 关键字用于声明静态属性和方法</li><li>静态属性和方法直接通过类名进行访问</li><li>静态成员只能由构造函数访问</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//实例成员</span></span><br><span class="line">    name = <span class="string">&#x27;aoteman&#x27;</span></span><br><span class="line"><span class="title function_">jiguang</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="comment">//访问实例属性和实例方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>)</span><br><span class="line">p.<span class="title function_">jiguang</span>()</span><br></pre></td></tr></table></figure><ul><li>实例成员只能实例调用</li></ul><h3 id="15-3继承"><a href="#15-3继承" class="headerlink" title="15.3继承"></a>15.3继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="comment">//需要用constructor传入参数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    houses = <span class="number">2</span></span><br><span class="line"><span class="title function_">skill</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明子类Son继承父类Father</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span>&#123;</span><br><span class="line">    <span class="comment">//子类的构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age,score</span>)&#123;</span><br><span class="line">        <span class="comment">//如果子类有自己的constructor，必须调用super才能调用父类</span></span><br><span class="line">        <span class="variable language_">super</span>(name,age)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">score</span> = score</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">skill</span>(<span class="params"></span>)&#123;<span class="variable language_">super</span>.<span class="title function_">skill</span>()&#125;<span class="comment">//如果依旧想调用父类的方法，也用super</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;jack&#x27;</span>,<span class="number">20</span>,<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><code>extends</code> 是 ECMAScript 6 中实现继承的简洁语法</p><p>子类构造函数中的 <code>super</code> 函数的作用是可以将子类实例化时获得的参数传入父类的构造函数之中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">first, last, age, gender, interests</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = &#123;</span><br><span class="line">      first,</span><br><span class="line">      last</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interests</span> = interests;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi! I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.name.first&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">farewell</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name.first&#125;</span> has left the building. Bye for now!`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">statciFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是静态方法，this拿不到实例对象&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// get方法</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">subject</span>() &#123;   <span class="comment">// person.subject</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_subject</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// set方法</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">subject</span>(<span class="params">newSubject</span>) &#123; <span class="comment">// person.subject = &quot;math&quot;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_subject</span> = newSubject;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="comment">// Teacher.__proto__ = Person</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">first, last, age, gender, interests, subject, grade</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(first, last, age, gender, interests);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// subject and grade are specific to Teacher</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subject</span> = subject;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">first, last, age, gender, interests</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = &#123;</span><br><span class="line">      first,</span><br><span class="line">      last</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interests</span> = interests;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">greeting</span> = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">farewell</span> = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Teacher</span>(<span class="params">first, last, age, gender, interests, subject, grade</span>) &#123;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, first, last, age, gender, interests); <span class="comment">// 调用父原型构造函数</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subject</span> = subject;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Teacher</span>.<span class="property">__proto__</span> = <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br></pre></td></tr></table></figure><h1 id="16-深浅拷贝"><a href="#16-深浅拷贝" class="headerlink" title="16.深浅拷贝"></a>16.深浅拷贝</h1><h3 id="16-1浅拷贝"><a href="#16-1浅拷贝" class="headerlink" title="16.1浅拷贝"></a>16.1浅拷贝</h3><p>只拷贝最外层的拷贝方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">uname : <span class="string">&#x27;张三丰&#x27;</span>,</span><br><span class="line">age : <span class="number">22</span>,</span><br><span class="line">sex : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">color : [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>],</span><br><span class="line">message : &#123;</span><br><span class="line">index : <span class="number">1</span>,</span><br><span class="line">score : <span class="number">99</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newObj = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(newObj, obj)</span><br></pre></td></tr></table></figure><h3 id="16-2深拷贝"><a href="#16-2深拷贝" class="headerlink" title="16.2深拷贝"></a>16.2深拷贝</h3><p>拷贝所有内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">uname : <span class="string">&#x27;张三丰&#x27;</span>,</span><br><span class="line">age : <span class="number">22</span>,</span><br><span class="line">sex : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">color : [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>],</span><br><span class="line">message : &#123;</span><br><span class="line">score : <span class="number">99</span>,</span><br><span class="line">index : <span class="number">6</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newObj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="comment">// 如果遇到obj[key]是复杂类型，再遍历操作</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">kaobei</span> (newObj, obj) &#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">in</span> obj ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( obj[key] <span class="keyword">instanceof</span> <span class="title class_">Array</span> ) &#123;<span class="comment">// obj[key] 是数组</span></span><br><span class="line"><span class="comment">// 保证newObj[key]是数组</span></span><br><span class="line">newObj[key] = [];</span><br><span class="line"></span><br><span class="line"><span class="title function_">kaobei</span>(newObj[key], obj[key]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( obj[key] <span class="keyword">instanceof</span> <span class="title class_">Object</span> ) &#123;<span class="comment">// obj[key] 是对象</span></span><br><span class="line"><span class="comment">// 保证newObj[key]是对象</span></span><br><span class="line">newObj[key] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">kaobei</span>(newObj[key], obj[key])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">newObj[key] = obj[key];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">kaobei</span>(newObj, obj);</span><br></pre></td></tr></table></figure><h1 id="17-JS执行机制"><a href="#17-JS执行机制" class="headerlink" title="17.JS执行机制"></a>17.JS执行机制</h1><h3 id="17-1-JS介绍"><a href="#17-1-JS介绍" class="headerlink" title="17.1 JS介绍"></a>17.1 JS介绍</h3><pre><code>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</code></pre><h3 id="17-2同步和异步"><a href="#17-2同步和异步" class="headerlink" title="17.2同步和异步"></a>17.2同步和异步</h3><p>同步和异步的本质区别是，各个流程的执行顺序不同</p><h5 id="17-2-1同步"><a href="#17-2-1同步" class="headerlink" title="17.2.1同步"></a>17.2.1同步</h5><pre><code>前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的同步任务都在主线程执行，形成一个**执行栈**</code></pre><h5 id="17-2-2异步"><a href="#17-2-2异步" class="headerlink" title="17.2.2异步"></a>17.2.2异步</h5><pre><code>在做一件事的时候可以去处理其他事情异步任务是通过回调函数实现的，一般包括：1.普通事件（click,resize）2.资源加载事件（load.error）3.定时器（setInterval,setTimeout）异步任务添加到任务队列中</code></pre><h3 id="17-3执行顺序"><a href="#17-3执行顺序" class="headerlink" title="17.3执行顺序"></a>17.3执行顺序</h3><ol><li>先执行<strong>执行栈</strong>中的<strong>同步任务</strong>。</li><li>当有异步任务时，提交给对应的异步进程处理，完毕后推入任务队列</li><li>当主线程执行完毕，查询任务队列，取出一个任务，推入主线程处理。重复该动作。—事件循环</li></ol><h1 id="18-防抖和节流"><a href="#18-防抖和节流" class="headerlink" title="18. 防抖和节流"></a>18. 防抖和节流</h1><h3 id="18-1防抖"><a href="#18-1防抖" class="headerlink" title="18.1防抖"></a>18.1防抖</h3><pre><code>**防抖策略**(debounce)，当事件被触发之后，**延迟n秒**，再**执行回调**，如果在这n秒内事件**又被触发**，则**重新计时**。**应用场景**用户在输入框中连续输入一串字符时，可以通过防抖策略，只有输入完成之后，才执行查询请求，这样可以有效减少请求次数，节约请求资源。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;<span class="comment">//定义防抖动的函数</span></span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;  <span class="comment">//防抖动的timer</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 箭头函数绑定闭包函数的this</span></span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">task</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;run task&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> debounceTask = <span class="title function_">debounce</span>(task, <span class="number">1000</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, debounceTask)</span><br></pre></td></tr></table></figure><h3 id="18-2-节流"><a href="#18-2-节流" class="headerlink" title="18.2 节流"></a>18.2 节流</h3><pre><code>**节流策略**（throttle），可以减少一段时间内事件的触发频率。**触发过一次后要等一定时间才能触发下一次**，关键是检测定时任务是否结束**应用场景**    鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次；    懒加载时要监听计算滚动条的位置，但不必每次滑动都触发，可以降低计算的频率，而不必去浪费 CPU 资源</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时器实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">        func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用时间戳</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> last = <span class="number">0</span> <span class="comment">// 上次触发时间</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="keyword">if</span> (now - last &gt; delay) &#123;</span><br><span class="line">      last = now</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>防抖：</strong>如果事件被频繁触发，防抖能保证只有最有一次触发生效！前面 N 多次的触发都会被忽略！<br><strong>节流：</strong>如果事件被频繁触发，节流能够减少事件触发的频率，因此，节流是有选择性地执行一部分事件！</p><h1 id="脚本阻塞"><a href="#脚本阻塞" class="headerlink" title="脚本阻塞"></a><strong>脚本阻塞</strong></h1><p>HTML 元素是按其在页面中出现的次序调用的，如果用 JavaScript 来管理页面上的元素（更精确的说法是使用 文档对象模型 DOM），若 JavaScript 加载于欲操作的 HTML 元素之前，则代码将出错。</p><ul><li><code>async</code>：不会阻塞页面渲染，而是直接下载然后运行。这样脚本的运行次序就无法控制，只是脚本不会阻止剩余页面的显示。当页面的脚本之间彼此独立，且不依赖于本页面的其它任何脚本时，<code>async</code> 是最理想的选择。</li><li><code>defer</code> ：脚本异步下载，在html解析后再同步加载</li></ul><h2 id="JavaScript，API和其他JavaScript工具之间的关系"><a href="#JavaScript，API和其他JavaScript工具之间的关系" class="headerlink" title="JavaScript，API和其他JavaScript工具之间的关系"></a>JavaScript，API和其他JavaScript工具之间的关系</h2><ul><li><strong>JavaScript</strong>：一种<strong>内置于浏览器</strong>的高级脚本语言，您可以用来实现Web页面&#x2F;应用中的功能。注意JavaScript也可用于其他象<a class="link"   href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction" >Node<i class="fas fa-external-link-alt"></i></a>这样的的编程环境。</li><li><strong>客户端API</strong> ：内置于浏览器的结构程序，位于JavaScript语言顶部，使您可以更容易的实现功能。</li><li><strong>第三方API</strong> ：置于第三方普通的结构程序（例如Twitter，Facebook），使您可以在自己的Web页面中使用那些平台的某些功能（例如在您的Web页面显示最新的Tweets）。通常来说，这首先需要您通过一个 &lt;script&gt; 元素连接到第三方服务器所开放的JavaScript库。</li><li><strong>JavaScript库</strong>：通常是包含具有特定功能的一个或多个JavaScript文件，把这些文件关联到您的Web页以快速或授权编写常见的功能。例如包含jQuery和Mootools</li><li><strong>JavaScript框架</strong>：从库开始的下一步，JavaScript框架视图把HTML、CSS、JavaScript和其他安装的技术打包在一起，然后用来从头编写一个完整的Web应用。</li></ul><h2 id="web浏览器的重要部分"><a href="#web浏览器的重要部分" class="headerlink" title="web浏览器的重要部分"></a>web浏览器的重要部分</h2><ul><li>navigator：表示浏览器存在于web上的状态和标识（即用户代理）。在JavaScript中，用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator"><code>Navigator</code></a>来表示。你可以用这个对象获取一些信息，比如来自用户摄像头的地理信息、用户偏爱的语言、多媒体流等等。</li><li>window：载入浏览器的标签，在JavaScript中用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window"><code>Window</code></a>对象来表示，使用这个对象的可用方法，你可以返回窗口的大小（参见<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/innerWidth"><code>Window.innerWidth</code></a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/innerHeight"><code>Window.innerHeight</code></a>），操作载入窗口的文档，存储客户端上文档的特殊数据（例如使用本地数据库或其他存储设备），为当前窗口绑定<a class="link"   href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#a_series_of_fortunate_events" >event handler<i class="fas fa-external-link-alt"></i></a>，等等。</li><li>document（在浏览器中用DOM表示）：载入窗口的实际页面，在JavaScript中用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document"><code>Document</code></a> 对象表示，你可以用这个对象来返回和操作文档中HTML和CSS上的信息。例如获取DOM中一个元素的引用，修改其文本内容，并应用新的样式，创建新的元素并添加为当前元素的子元素，甚至把他们一起删除。</li></ul><table><thead><tr><th></th><th>类型</th><th>插入位置</th><th>拼接方法</th><th>覆盖问题</th></tr></thead><tbody><tr><td>document.write()</td><td>document对象方法</td><td>脚本元素script的位置</td><td>多次调用</td><td>文档解析完会覆盖；否则不会</td></tr><tr><td>innerHTML</td><td>Element对象属性</td><td>指定元素内</td><td>+&#x3D;</td><td>会覆盖</td></tr></tbody></table><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p><strong>标记-清除算法</strong></p><p>这个算法假定设置一个叫做根（root）的对象（在Javascript里，根是全局对象）。垃圾回收器将定期从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和收集所有不能获得的对象。</p><p>从2012年起，所有现代浏览器都使用了标记-清除垃圾回收算法。所有对JavaScript垃圾回收算法的改进都是基于标记-清除算法的改进。</p><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>严格模式对正常的 JavaScript语义做了一些更改。</p><ol><li>严格模式通过<strong>抛出错误</strong>来消除了一些原有<strong>静默错误</strong>。</li><li>严格模式修复了一些导致 JavaScript引擎难以执行优化的缺陷：有时候，相同的代码，严格模式可以比非严格模式下<strong>运行得更快</strong>。</li><li>严格模式<strong>禁用了</strong>在ECMAScript的未来版本中可能会定义的一些语法。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整个脚本都开启严格模式的语法</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> v = <span class="string">&quot;Hi!  I&#x27;m a strict mode script!&quot;</span>;</span><br></pre></td></tr></table></figure><p>合并均为严格模式的脚本或均为非严格模式的都没问题，只有在合并严格模式与非严格模式有可能有问题。建议按一个个函数去开启严格模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">strict</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 函数级别严格模式语法</span></span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">nested</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;And so am I!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hi!  I&#x27;m a strict mode function!  &quot;</span> + <span class="title function_">nested</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sayings = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">sayings.<span class="title function_">set</span>(<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;woof&#x27;</span>);</span><br><span class="line">sayings.<span class="title function_">set</span>(<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;meow&#x27;</span>);</span><br><span class="line">sayings.<span class="title function_">set</span>(<span class="string">&#x27;elephant&#x27;</span>, <span class="string">&#x27;toot&#x27;</span>);</span><br><span class="line">sayings.<span class="property">size</span>; <span class="comment">// 3</span></span><br><span class="line">sayings.<span class="title function_">get</span>(<span class="string">&#x27;fox&#x27;</span>); <span class="comment">// undefined</span></span><br><span class="line">sayings.<span class="title function_">has</span>(<span class="string">&#x27;bird&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">sayings.<span class="title function_">delete</span>(<span class="string">&#x27;dog&#x27;</span>);</span><br><span class="line">sayings.<span class="title function_">has</span>(<span class="string">&#x27;dog&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> sayings) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; : &#x27;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayings.<span class="title function_">clear</span>();</span><br><span class="line">sayings.<span class="property">size</span>; <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><strong>Object和Map的比较</strong></p><p>一般地，<a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" >objects<i class="fas fa-external-link-alt"></i></a>会被用于将字符串类型映射到数值。<code>Object</code>允许设置键值对、根据键获取值、删除键、检测某个键是否存在。而<code>Map</code>具有更多的优势。</p><ul><li><code>Object</code>的键均为<code>String</code>类型，在<code>Map</code>里键可以是任意类型。</li><li>必须手动计算<code>Object</code>的尺寸，但是可以很容易地获取使用<code>Map</code>的尺寸。</li><li><code>Map</code>的遍历遵循元素的插入顺序。</li><li><code>Object</code>有原型，所以映射中有一些缺省的键。（可以用 <code>map = Object.create(null) 回避</code>）。</li></ul><p>这三条提示可以帮你决定用<code>Map</code>还是<code>Object</code>：</p><ul><li>如果键在运行时才能知道，或者所有的键类型相同，所有的值类型相同，那就使用<code>Map</code>。</li><li>如果需要将原始值存储为键，则使用<code>Map</code>，因为<code>Object</code>将每个键视为字符串，不管它是一个数字值、布尔值还是任何其他原始值。</li><li>如果需要对个别元素进行操作，使用<code>Object</code>。</li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="string">&quot;some text&quot;</span>);</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">mySet.<span class="title function_">has</span>(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">mySet.<span class="title function_">delete</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">mySet.<span class="property">size</span>; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> mySet) <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// &quot;some text&quot;</span></span><br></pre></td></tr></table></figure><p><strong>数组和集合的转换</strong></p><p>可以使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from"><code>Array.from</code></a>或<a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" >展开操作符<i class="fas fa-external-link-alt"></i></a>来完成集合到数组的转换。同样，<code>Set</code>的构造器接受数组作为参数，可以完成从<code>Array</code>到<code>Set</code>的转换。需要重申的是，<code>Set</code>对象中的值不重复，所以数组转换为集合时，所有重复值将会被删除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(mySet);</span><br><span class="line">[...mySet2];</span><br><span class="line"></span><br><span class="line">mySet2 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br></pre></td></tr></table></figure><p><strong>Array和Set的对比</strong></p><p>一般情况下，在JavaScript中使用数组来存储一组元素，而新的集合对象有这些优势：</p><ul><li>数组中用于判断元素是否存在的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf"><code>indexOf</code></a> 函数效率低下。</li><li><code>Set</code>对象允许根据值删除元素，而数组中必须使用基于下标的 splice 方法。</li><li>数组的<code>indexOf</code>方法无法找到<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN"><code>NaN</code></a>值。</li><li><code>Set</code>对象存储不重复的值，所以不需要手动处理包含重复值的情况。</li></ul><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>js的模块文件后缀可以写成：<code>.mjs</code></p><p><strong>module.exports &amp; exports</strong></p><p><strong>exports：</strong>返回的是模块函数<br><strong>module.exports：</strong>返回的是模块对象本身，返回的是一个类</p><ol><li><p><strong><code>export / export default / import</code> :</strong> 只有es6 支持的导出引入</p><p><strong>export 和 export default</strong></p><ul><li>export与export default均可用于导出常量、函数、文件、模块等</li><li>在一个文件或模块中，export、import可以有多个，export default仅有一个</li><li>通过export方式导出，在导入时要加{ }，export default则不需要</li><li>export能直接导出变量表达式，export default不行。</li></ul><p>import引入export导出的内容。</p></li><li><p><strong><code>module.exports / exports </code> :</strong> 只有 node 支持的导出</p><p>Node里面的模块系统遵循的是<strong>CommonJS规范</strong>。</p><blockquote><p>CommonJS定义的模块分为: 模块标识(module)、模块定义(exports) 、模块引用(require)。</p></blockquote><p>在一个node执行一个文件时，会给这个文件内生成一个 exports 和 module 对象，而 module 又有一个 exports 属性。他们都指向一块内存区域：<code>exports = module.exports = &#123;&#125;</code>，也就是两个指针。真正被 require 出去的内容还是 module.exports 指向的内容。所以尽量都用 module.exports 导出，然后用require导入。</p></li><li><p><strong><code>require</code>:</strong> node 和 es6 都支持的引入</p><p>配合 module.exports 使用</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主文件 app.js</span></span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&#x27;./count.j&#x27;</span><span class="comment">//导入模块</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="title function_">add</span>(<span class="number">3</span>,<span class="number">4</span>));<span class="comment">//取出对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">pi</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模块文件 count.js,与主文件在同一目录下</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> <span class="title function_">add</span>=(<span class="params">a,b</span>)=&gt;&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;the sum is &#x27;</span>+(a+b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> pi=<span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认导出</span></span><br><span class="line"><span class="comment">// 很容易地使模块提供默认功能，并且还可以帮助JavaScript模块与现有的CommonJS和AMD模块系统进行互操作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 重命名</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  function1 <span class="keyword">as</span> newFunctionName,</span><br><span class="line">  function2 <span class="keyword">as</span> anotherNewFunctionName</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 导出模块对象</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Module</span> <span class="keyword">from</span> <span class="string">&#x27;/modules/module.mjs&#x27;</span>;</span><br></pre></td></tr></table></figure><p>模块与类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">ctx, listId, length, x, y, color</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Square</span> &#125;;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Square</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./modules/square.mjs&#x27;</span>;</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 或默认导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Square</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>动态加载模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">import</span>(<span class="string">&#x27;/modules/myModule.mjs&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Do something with the module.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><p>JavaScript 传统上是单线程的。即使有多个内核，也只能在单一线程上运行多个任务，此线程称为主线程（<strong>main thread</strong>）。</p><p>通过 <a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API" >Web workers<i class="fas fa-external-link-alt"></i></a> 可以把一些任务交给一个名为worker的单独的线程，这样就可以同时运行多个JavaScript代码块。一般来说，用一个worker来运行一个耗时的任务，主线程就可以处理用户的交互（避免了阻塞）</p><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><p>有两个队列，分别存放<strong>宏任务</strong>和<strong>微任务</strong>，一次事件循环为：一个宏任务 + 清空微任务队列，直到宏任务清空为止</p><p>宏任务：包括整体代码script，setTimeout，setInterval等</p><p>微任务：Promise.then，process.nextTick，MutationObserver等</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.png"                      alt="prototype_4"                ></p><h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h2><p><strong>异步回调</strong></p><p>我们来谈谈订购披萨作为类比。为了使你的订单成功，你必须按顺序执行，不按顺序执行或上一步没完成就执行下一步是不会成功的：</p><ol><li>选择配料。如果你是优柔寡断，这可能需要一段时间，如果你无法下定决心或者决定换咖喱，可能会失败。</li><li>下订单。返回比萨饼可能需要一段时间，如果餐厅没有烹饪所需的配料，可能会失败。</li><li>然后你收集你的披萨吃。如果你忘记了自己的钱包，那么这可能会失败，所以无法支付比萨饼的费用！</li></ol><p>对于旧式<a class="link"   href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing#callbacks" >callbacks<i class="fas fa-external-link-alt"></i></a>，上述功能的伪代码表示可能如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">chooseToppings</span>(<span class="keyword">function</span>(<span class="params">toppings</span>) &#123;</span><br><span class="line">  <span class="title function_">placeOrder</span>(toppings, <span class="keyword">function</span>(<span class="params">order</span>) &#123;</span><br><span class="line">    <span class="title function_">collectOrder</span>(order, <span class="keyword">function</span>(<span class="params">pizza</span>) &#123;</span><br><span class="line">      <span class="title function_">eatPizza</span>(pizza);</span><br><span class="line">    &#125;, failureCallback);</span><br><span class="line">  &#125;, failureCallback);</span><br><span class="line">&#125;, failureCallback);</span><br></pre></td></tr></table></figure><p>异步回调的缺陷：</p><ul><li>嵌套回调可能很麻烦且难以阅读（即“回调地狱”）</li><li>每层嵌套都需要故障回调，而使用promises，您只需使用一个<code>.catch（）</code>代码块来处理整个链的错误。</li><li>异步回调不是很优雅。</li><li>Promise回调总是按照它们放在事件队列中的严格顺序调用;异步回调不是。</li><li>当传入到一个第三方库时，异步回调对函数如何执行失去完全控制。</li></ul><p><strong>Promise</strong> </p><p>Promises是一个对象，代表操作的中间状态。虽然 Promise 并不保证操作在何时完成并返回结果，但是它保证当结果可用时（fullfilled），你的代码能正确处理结果，当结果不可用时，你的代码同样会被执行，来优雅的处理错误。</p><p><code>Promise</code> 对象有以下几种状态：</p><ul><li><em>pending：</em>初始的状态，即正在执行，不处于 fulfilled 或 rejected 状态。</li><li><em>fulfilled：</em>成功的完成了操作。</li><li><em>rejected：</em>失败，没有完成操作。</li><li><em>settled：</em>Promise 处于 fulfilled 或 rejected 二者中的任意一个状态, 不会是 pending。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">myPromise</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">doSomething</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">returnError</span>(e);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">runFinalCode</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promises使得上面的情况更容易编写，解析和运行。如果我们使用异步promises代表上面的伪代码，我们最终会得到这样的结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">chooseToppings</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">toppings</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">placeOrder</span>(toppings);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">order</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">collectOrder</span>(order);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">pizza</span>) &#123;</span><br><span class="line">  <span class="title function_">eatPizza</span>(pizza);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(failureCallback);</span><br></pre></td></tr></table></figure><p>只需要一个<code>.catch()</code>块来处理所有错误，它不会阻塞主线程，并保证每个操作在运行之前等待先前的操作完成。</p><p>使用箭头函数，你可以进一步简化代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">chooseToppings</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">toppings</span> =&gt;</span> <span class="title function_">placeOrder</span>(toppings))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">order</span> =&gt;</span> <span class="title function_">collectOrder</span>(order))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">pizza</span> =&gt;</span> <span class="title function_">eatPizza</span>(pizza))</span><br><span class="line">.<span class="title function_">catch</span>(failureCallback);</span><br></pre></td></tr></table></figure><p>最基本的，promise与事件监听器类似，但有一些差异：</p><ul><li>一个promise只能成功或失败一次。它不能成功或失败两次，并且一旦操作完成，它就无法从成功切换到失败，反之亦然。</li><li>如果promise成功或失败并且你稍后添加成功&#x2F;失败回调，则将调用正确的回调，即使事件发生在较早的时间。</li></ul><p><strong>例：</strong>fetch用来下载一张图片，返回response对象；判断是否成功下载，成功下载返回blob对象；将blob对象解析放入image；catch失败的情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;coffee.jpg&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP error! status: <span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">blob</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">myBlob</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> objectURL = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(myBlob);</span><br><span class="line">  <span class="keyword">let</span> image = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">  image.<span class="property">src</span> = objectURL;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(image);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;There has been a problem with your fetch operation: &#x27;</span> + e.<span class="property">message</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>响应多个Promises</strong></p><p>如果它们都实现，那么数组中的结果将作为参数传递给<code>.then()</code>块中的执行器函数。如果传递给<code>Promise.all()</code>的任何一个 promise 拒绝，整个块将拒绝。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([a, b, c]).<span class="title function_">then</span>(<span class="function"><span class="params">values</span> =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>自定义Promise</strong></p><p>成功resolve，失败reject。reject会被 catch 到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timeoutPromise</span>(<span class="params">message, interval</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (message === <span class="string">&#x27;&#x27;</span> || <span class="keyword">typeof</span> message !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;Message is empty or not a string&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (interval &lt; <span class="number">0</span> || <span class="keyword">typeof</span> interval !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;Interval is negative or not a number&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(message);</span><br><span class="line">            &#125;, interval);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h2><p>ES6里新增的基于promises的语法糖，使异步代码更易于编写和阅读。</p><p><strong>异步函数 async</strong></p><p>将函数变为promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义异步函数的三种方法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span> &#125;; </span><br><span class="line"><span class="keyword">let</span> hello = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">hello</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123; <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hello</span>(); <span class="comment">// 返回promise</span></span><br><span class="line"><span class="title function_">hello</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value)) <span class="comment">// 使用promise</span></span><br></pre></td></tr></table></figure><p><strong>异步promise await</strong></p><p><strong>await 只在异步函数里面才起作用</strong>。它可以放在任何异步的，基于 promise 的函数之前。它会阻塞其后的代码，直到promise完成，然后返回结果值。在暂停的同时，其他正在等待执行的代码就有机会执行了。await 相当于 Promise 的 then。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> greeting = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hello</span>().<span class="title function_">then</span>(alert);</span><br></pre></td></tr></table></figure><p><strong>例：</strong>fetch用来下载一张图片，返回response对象；判断是否成功下载，成功下载返回blob对象；将blob对象解析放入image；catch失败的情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myFetch</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">blob</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">myFetch</span>(<span class="string">&#x27;https://img2.baidu.com/it/u=73016861,4243186123&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=PNG?w=499&amp;h=253&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> objectURL = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">    <span class="keyword">let</span> image = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">    image.<span class="property">src</span> = objectURL;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(image);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;There has been a problem with your fetch operation: &#x27;</span> + e.<span class="property">message</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Promise.all()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([coffee, tea, description]);</span><br></pre></td></tr></table></figure><p><strong>async&#x2F;await的缺陷</strong></p><p><code>await</code> 关键字会阻塞其后的代码，直到promise完成，就像执行同步操作一样。它确实可以允许其他任务在此期间继续运行，但您自己的代码被阻塞。</p><p>这意味着您的代码可能会因为大量<code>await</code>的promises相继发生而变慢。每个<code>await</code>都会等待前一个完成，而你实际想要的是所有的这些promises同时开始处理（就像我们没有使用<code>async/await</code>时那样）。</p><p>有一种模式可以缓解这个问题——通过将 <code>Promise</code> 对象存储在变量中来同时开始它们，然后等待它们全部执行完毕。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改进前</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">timeTest</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">timeoutPromise</span>(<span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">timeoutPromise</span>(<span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">timeoutPromise</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改进后</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">timeTest</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> timeoutPromise1 = <span class="title function_">timeoutPromise</span>(<span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">const</span> timeoutPromise2 = <span class="title function_">timeoutPromise</span>(<span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">const</span> timeoutPromise3 = <span class="title function_">timeoutPromise</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> timeoutPromise1;</span><br><span class="line">  <span class="keyword">await</span> timeoutPromise2;</span><br><span class="line">  <span class="keyword">await</span> timeoutPromise3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Async&#x2F;await 的类方法</strong></p><p>最后值得一提的是，我们可以在类&#x2F;对象方法前面添加<code>async</code>，以使它们返回promises，并<code>await</code>它们内部的promises。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">first, last, age, gender, interests</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = &#123;</span><br><span class="line">      first,</span><br><span class="line">      last</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interests</span> = interests;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">`Hi! I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.name.first&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">farewell</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name.first&#125;</span> has left the building. Bye for now!`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> han = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Han&#x27;</span>, <span class="string">&#x27;Solo&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;male&#x27;</span>, [<span class="string">&#x27;Smuggling&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>第一个实例方法可以使用如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">han.<span class="title function_">greeting</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;⭐JavaScript-基础&quot;&gt;&lt;a href=&quot;#⭐JavaScript-基础&quot; class=&quot;headerlink&quot; title=&quot;⭐JavaScript 基础&quot;&gt;&lt;/a&gt;⭐JavaScript 基础&lt;/h1&gt;&lt;h1 id=&quot;1-引用js脚本&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>5.和小达一起学WebAPI</title>
    <link href="http://example.com/2022/08/11/5.%E5%92%8C%E5%B0%8F%E8%BE%BE%E4%B8%80%E8%B5%B7%E5%AD%A6WebAPI/"/>
    <id>http://example.com/2022/08/11/5.%E5%92%8C%E5%B0%8F%E8%BE%BE%E4%B8%80%E8%B5%B7%E5%AD%A6WebAPI/</id>
    <published>2022-08-11T11:30:31.000Z</published>
    <updated>2022-08-11T12:50:05.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="⭐Web-APIs-DOM、BOM"><a href="#⭐Web-APIs-DOM、BOM" class="headerlink" title="⭐Web APIs     DOM、BOM"></a>⭐Web APIs     DOM、BOM</h1><h1 id="1-基本认识"><a href="#1-基本认识" class="headerlink" title="1.基本认识"></a>1.基本认识</h1><h3 id="1-1作用与分类"><a href="#1-1作用与分类" class="headerlink" title="1.1作用与分类"></a>1.1作用与分类</h3><p><strong>作用</strong>：   简而言之就是使用JavaScript去操作html和浏览器</p><p><strong>分类</strong>：   DOM（文档对象模型）BOM（浏览器对象模型）</p><pre><code>     &lt;img src=&quot;../pictures/WebAPIs分类.png&quot;  /&gt;</code></pre><h3 id="1-2DOM-Document-Object-Model"><a href="#1-2DOM-Document-Object-Model" class="headerlink" title="1.2DOM(Document Object Model)"></a>1.2DOM(Document Object Model)</h3><pre><code>文档对象模型，用于呈现以及HTML和XML文档交互的API**DOM树**  将HTML文档以树状结构表现出来，称之为DOM树，直观的体现了标签和标签的关系</code></pre> <img                       lazyload                     src="/images/loading.svg"                     data-src="../pictures/DOM树.png"                                       ><pre><code>**DOM的核心是把内容当作对象类处理**</code></pre><h1 id="2-DOM的基本操作"><a href="#2-DOM的基本操作" class="headerlink" title="2.DOM的基本操作"></a>2.DOM的基本操作</h1><h3 id="2-1获取DOM元素"><a href="#2-1获取DOM元素" class="headerlink" title="2.1获取DOM元素"></a>2.1获取DOM元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取匹配的第一个元素    </span></span><br><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;css选择器&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>返回值：    CSS选择器匹配的第一个元素,一个 HTMLElement对象，如果没有匹配到，则返回null</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取匹配的所有元素    </span></span><br><span class="line"><span class="keyword">let</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;ul li&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>返回值：    CSS选择器匹配的所有元素,返回的是伪数组(有长度索引号，但是不能使用数组方法)，只能通过遍历的方式获取里面的每一个DOM元素</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据ID获取一个元素  </span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;nav&#x27;</span>)</span><br><span class="line"><span class="comment">//根据标签获取一类元素  获取页面的所有div</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementByTagName</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="comment">//根据类名获取元素    获取页面所有类名为aoteman的</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementByClassName</span>(<span class="string">&#x27;aoteman&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>     小括号里必须加引号’’，然后里面写css选择器</p><h3 id="2-2设置-x2F-修改DOM元素的内容"><a href="#2-2设置-x2F-修改DOM元素的内容" class="headerlink" title="2.2设置&#x2F;修改DOM元素的内容"></a>2.2设置&#x2F;修改DOM元素的内容</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="comment">//对象.属性 = 值</span></span><br><span class="line"><span class="comment">//innerText   添加文本内容</span></span><br><span class="line">box.<span class="property">innerText</span> = <span class="string">&#x27;aotemanlalalalala&#x27;</span></span><br><span class="line"><span class="comment">//innerHTML</span></span><br><span class="line">box.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;strong&gt;aotemanlalalalala&lt;/strong&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>innerText 不会解析标签</p><pre><code>        innerHTML会解析里面的标签</code></pre><h3 id="2-3设置-x2F-修改DOM元素的属性"><a href="#2-3设置-x2F-修改DOM元素的属性" class="headerlink" title="2.3设置&#x2F;修改DOM元素的属性"></a>2.3设置&#x2F;修改DOM元素的属性</h3><h5 id="2-3-1修改常用属性"><a href="#2-3-1修改常用属性" class="headerlink" title="2.3.1修改常用属性"></a>2.3.1修改常用属性</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pic = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line"><span class="comment">//对象.属性 = 值</span></span><br><span class="line">pic.<span class="property">src</span> = <span class="string">&#x27;./images/img1.png&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-2修改元素的样式"><a href="#2-3-2修改元素的样式" class="headerlink" title="2.3.2修改元素的样式"></a>2.3.2修改元素的样式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="comment">//对象.style.样式属性 = 值</span></span><br><span class="line">box.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">box.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;400px&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-3修改元素的类名"><a href="#2-3-3修改元素的类名" class="headerlink" title="2.3.3修改元素的类名"></a>2.3.3修改元素的类名</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="comment">//1. 修改box的类名   这种方式会覆盖原有的类名，想要不覆盖添加两个类名</span></span><br><span class="line">box.<span class="property">className</span> = <span class="string">&#x27;one active&#x27;</span></span><br><span class="line"><span class="comment">//2. 追加类名</span></span><br><span class="line">box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br><span class="line"><span class="comment">//3. 删除类名</span></span><br><span class="line">box.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br><span class="line"><span class="comment">//4. 切换类名</span></span><br><span class="line">box.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="2-3-4修改表单元素属性"><a href="#2-3-4修改表单元素属性" class="headerlink" title="2.3.4修改表单元素属性"></a>2.3.4修改表单元素属性</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> checkbox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.checkbox&#x27;</span>)</span><br><span class="line"><span class="comment">//1.   取值:对象.属性名    赋值：对象.属性名 = &#x27;新值&#x27;</span></span><br><span class="line">input.<span class="property">value</span> = <span class="string">&#x27;aoteman&#x27;</span></span><br><span class="line">input.<span class="property">type</span> = <span class="string">&#x27;password&#x27;</span></span><br><span class="line"><span class="comment">//2.   修改表单元素属性</span></span><br><span class="line">btn.<span class="property">disabled</span> = <span class="literal">false</span><span class="comment">//禁用按钮</span></span><br><span class="line">checkbox.<span class="property">checked</span> = <span class="literal">false</span><span class="comment">//复选框</span></span><br></pre></td></tr></table></figure><h1 id="3-定时器-和-延时器"><a href="#3-定时器-和-延时器" class="headerlink" title="3.定时器 和 延时器"></a>3.定时器 和 延时器</h1><h3 id="3-1定时器"><a href="#3-1定时器" class="headerlink" title="3.1定时器"></a>3.1定时器</h3><p><strong>作用</strong>  每隔一段时间调用一次函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*语法</span></span><br><span class="line"><span class="comment">let 变量名 = setInterval(函数，间隔时间ms)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启定时器    </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">kungfu</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;激光biubiubiu&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(kungfu, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除定时器  clearInterval(变量名)</span></span><br><span class="line"><span class="built_in">clearInterval</span>(timer)</span><br></pre></td></tr></table></figure><p><strong>函数每隔一段时间重复执行</strong></p><h3 id="3-2延时器"><a href="#3-2延时器" class="headerlink" title="3.2延时器"></a>3.2延时器</h3><p><strong>作用</strong>  让代码延迟执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*语法</span></span><br><span class="line"><span class="comment">let 变量名 = setTimeout(函数，间隔时间ms)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//开启定时器 </span></span><br><span class="line"><span class="keyword">let</span> timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(biubiubiu)</span><br><span class="line">        &#125;, <span class="number">3000</span>)</span><br><span class="line"><span class="comment">//清除延时器  clearTimeout(变量名)</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(timer)</span><br></pre></td></tr></table></figure><p><strong>函数只执行一次</strong></p><h1 id="4-事件"><a href="#4-事件" class="headerlink" title="4.事件"></a>4.事件</h1><h3 id="4-1事件监听"><a href="#4-1事件监听" class="headerlink" title="4.1事件监听"></a>4.1事件监听</h3><pre><code>让程序检测是否有事件产生，一旦有事件触发，就立即调用一个函数做出响应，也称为 注册事件</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*语法</span></span><br><span class="line"><span class="comment">元素.addEventListener(&#x27;事件&#x27;，要执行的函数)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;激光biubiubiu&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>事件监听三要素</strong></p><pre><code>1.事件源：哪个元素被触发了2.事件：用什么方式触发，比如说click或者mouseenter mouseleave3.事件调用的函数：事件触发之后要做什么事情</code></pre><h3 id="4-2事件类型"><a href="#4-2事件类型" class="headerlink" title="4.2事件类型"></a>4.2事件类型</h3><pre><code>**鼠标事件：**</code></pre><table><thead><tr><th>时间名</th><th>说明</th></tr></thead><tbody><tr><td>click</td><td>鼠标点击</td></tr><tr><td>mouseenter</td><td>鼠标经过</td></tr><tr><td>mouseleave</td><td>鼠标离开</td></tr></tbody></table><p><strong>焦点事件：</strong></p><table><thead><tr><th align="center">时间名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">focus</td><td align="center">获得焦点</td></tr><tr><td align="center">blur</td><td align="center">失去焦点</td></tr></tbody></table><p><strong>键盘事件：</strong></p><table><thead><tr><th align="center">时间名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">keydown</td><td align="center">键盘按下触发</td></tr><tr><td align="center">keyup</td><td align="center">键盘抬起触发</td></tr></tbody></table><p><strong>文本事件：</strong></p><table><thead><tr><th align="center">时间名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">input</td><td align="center">用户输入触发</td></tr></tbody></table><p><strong>resize</strong> :</p><p>窗口发生变化触发的事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//检测屏幕宽度</span></span><br><span class="line">    <span class="keyword">let</span> w = <span class="variable language_">document</span>.<span class="property">ducumentElement</span>.<span class="property">clientWidth</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(w)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-3事件对象"><a href="#4-3事件对象" class="headerlink" title="4.3事件对象"></a>4.3事件对象</h3><h5 id="4-3-1介绍"><a href="#4-3-1介绍" class="headerlink" title="4.3.1介绍"></a>4.3.1介绍</h5><pre><code>事件对象也是个对象，这个对象里保存了触发事件时的相关信息在事件绑定的回调函数的第一个参数就是事件对象，一般命名为**e**或**event**或**ev**</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>.<span class="keyword">function</span>(<span class="params">e</span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><h5 id="4-3-2常用属性"><a href="#4-3-2常用属性" class="headerlink" title="4.3.2常用属性"></a>4.3.2常用属性</h5><table><thead><tr><th align="center">属性名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">type</td><td align="center">获取当前的事件类型</td></tr><tr><td align="center">clientX&#x2F;clientY</td><td align="center">获取光标相对于浏览器可见窗口左上角的位置</td></tr><tr><td align="center">offsetX&#x2F;offsetY</td><td align="center">获取光标相对于当前DOM元素左上角的位置</td></tr><tr><td align="center">key</td><td align="center">用户按下的键盘键的值</td></tr><tr><td align="center">pageX&#x2F;pageY</td><td align="center">获取光标相对于文档左上角的位置</td></tr></tbody></table><h3 id="4-4事件流"><a href="#4-4事件流" class="headerlink" title="4.4事件流"></a>4.4事件流</h3><h5 id="4-4-1事件流指的是事件完整执行过程中的流动路径，有两个阶段，包括事件捕获和事件冒泡"><a href="#4-4-1事件流指的是事件完整执行过程中的流动路径，有两个阶段，包括事件捕获和事件冒泡" class="headerlink" title="4.4.1事件流指的是事件完整执行过程中的流动路径，有两个阶段，包括事件捕获和事件冒泡"></a>4.4.1事件流指的是事件完整执行过程中的流动路径，有两个阶段，包括<strong>事件捕获</strong>和<strong>事件冒泡</strong></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E4%BA%8B%E4%BB%B6%E6%B5%81.png"                      alt="事件流"                ></p><h5 id="4-4-2事件冒泡"><a href="#4-4-2事件冒泡" class="headerlink" title="4.4.2事件冒泡"></a>4.4.2事件冒泡</h5><pre><code>当一个元素触发事件后，会依次向上调用所有父级元素的同名事件+</code></pre><h5 id="4-4-3事件捕获"><a href="#4-4-3事件捕获" class="headerlink" title="4.4.3事件捕获"></a>4.4.3事件捕获</h5><pre><code>从DOM的根元素开始去执行对应的事件 (从外到里) </code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">DOM</span>.<span class="title function_">addEventListener</span>(事件类型，函数，是否使用捕获机制)</span><br></pre></td></tr></table></figure><p>addEventListener第三个参数传入true代表是捕获阶段触发，若传入false代表冒泡阶段触发，默认就是false</p><h5 id="4-4-4阻止事件流"><a href="#4-4-4阻止事件流" class="headerlink" title="4.4.4阻止事件流"></a>4.4.4阻止事件流</h5><p>因为默认就有冒泡模式的存在，所以容易导致事件影响到父级元素，想把事件就限制在当前元素内，就需要阻止事件流动。在冒泡和捕获阶段都有效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.<span class="title function_">stoppropagation</span>()</span><br></pre></td></tr></table></figure><h5 id="4-4-5阻止默认行为"><a href="#4-4-5阻止默认行为" class="headerlink" title="4.4.5阻止默认行为"></a>4.4.5阻止默认行为</h5><pre><code>阻止默认行为，比如链接点击不跳转</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.<span class="title function_">preventDefult</span>()</span><br></pre></td></tr></table></figure><h3 id="4-5事件委托"><a href="#4-5事件委托" class="headerlink" title="4.5事件委托"></a>4.5事件委托</h3><pre><code>1.事件委托是利用事件冒泡，通过给父元素添加事件，让子元素实现对应的效果，这样就不用给子元素一个一个添加事件。2.利用   e.target获得触发事件的元素</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-6滚动事件scroll"><a href="#4-6滚动事件scroll" class="headerlink" title="4.6滚动事件scroll"></a>4.6滚动事件scroll</h3><h5 id="4-6-1监听页面的滚动"><a href="#4-6-1监听页面的滚动" class="headerlink" title="4.6.1监听页面的滚动"></a>4.6.1监听页面的滚动</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>需要监听某个元素内部的滚动，给元素添加滚动事件即可。</p><h5 id="4-6-2scroll"><a href="#4-6-2scroll" class="headerlink" title="4.6.2scroll"></a>4.6.2scroll</h5><p><strong>获取宽高    scrollWidth  scrollHeight</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">scrollWidth</span>)   <span class="comment">//返回的是不带单位的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">scrollHeight</span>)  </span><br></pre></td></tr></table></figure><pre><code>scroll返回的是**元素内容**的宽高（不含滚动条），返回值不带单位。</code></pre><p><strong>获取位置    scrollLeft  scrollTop</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>)</span><br><span class="line">    <span class="comment">//document.documentElement HTML 文档返回对象为HTML元素</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><pre><code>scroll获取元素内容往左往上滚出去看不到的距离这两个属性是可以修改的</code></pre><h5 id="4-6-3offset"><a href="#4-6-3offset" class="headerlink" title="4.6.3offset"></a>4.6.3offset</h5><p><strong>获取宽高    offsetWidth  offsetHeight</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">offsetWidth</span>)   <span class="comment">//返回的是不带单位的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">offsetHeight</span>)  </span><br></pre></td></tr></table></figure><pre><code>获取**元素自身**的宽高、包含盒子自身的宽高、padding、border</code></pre><p><strong>获取位置    scrollLeft  scrollTop</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sk = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.sk&#x27;</span>)       </span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sk.<span class="property">offsetTop</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><pre><code>offsetLeft offsetTop获取元素**距离自己定位父级元素**的左、上距离只读属性不可被修改</code></pre><h5 id="4-6-3client"><a href="#4-6-3client" class="headerlink" title="4.6.3client"></a>4.6.3client</h5><p><strong>获取宽高    clientWidth  clientHeight</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">clientWidth</span>)   <span class="comment">//返回的是不带单位的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">clientHeight</span>)  </span><br></pre></td></tr></table></figure><pre><code>获取**元素可见部分**的宽高，不包含边框滚动条，包含padding</code></pre><p><strong>获取位置    clientLeft  clientTop</strong></p><pre><code>clientLeft clientTop获取左边框和上边框的宽度只读属性不可被修改</code></pre><h1 id="5-高阶函数"><a href="#5-高阶函数" class="headerlink" title="5.高阶函数"></a>5.高阶函数</h1><p><strong>高阶函数</strong>  javaScript 中函数可以被当成【值】来对待，基于这个特性实现函数的高级应用</p><h3 id="5-1函数表达式"><a href="#5-1函数表达式" class="headerlink" title="5.1函数表达式"></a>5.1函数表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数表达式必须先声明再调用</span></span><br><span class="line"><span class="keyword">let</span> counter = <span class="keyword">function</span>(<span class="params">x,y</span>)&#123;<span class="keyword">return</span> x+y&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">counter</span>(<span class="number">5</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="5-2回调函数"><a href="#5-2回调函数" class="headerlink" title="5.2回调函数"></a>5.2回调函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数表达式必须先声明再调用</span></span><br><span class="line"><span class="keyword">let</span> counter = <span class="keyword">function</span>(<span class="params">x,y</span>)&#123;<span class="keyword">return</span> x+y&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">counter</span>(<span class="number">5</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h1 id="6-节点"><a href="#6-节点" class="headerlink" title="6.节点"></a>6.节点</h1><h3 id="6-1节点说明"><a href="#6-1节点说明" class="headerlink" title="6.1节点说明"></a>6.1节点说明</h3><pre><code>**DOM节点：**DOM树里的每一个内容成为节点**类型**：    1.元素节点：所有的标签      如body   div    2.属性节点    3.文本节点    4.其他</code></pre><h3 id="6-2查找节点"><a href="#6-2查找节点" class="headerlink" title="6.2查找节点"></a>6.2查找节点</h3><h5 id="6-2-1查找父元素节点"><a href="#6-2-1查找父元素节点" class="headerlink" title="6.2.1查找父元素节点"></a>6.2.1查找父元素节点</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法  ：子元素.parentNode</span></span><br><span class="line"><span class="keyword">let</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>)</span><br><span class="line">son.<span class="property">parentNode</span>.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br></pre></td></tr></table></figure><pre><code>返回最近一级的父元素节点，如果找不到返回为null</code></pre><h5 id="6-2-2查找子元素节点"><a href="#6-2-2查找子元素节点" class="headerlink" title="6.2.2查找子元素节点"></a>6.2.2查找子元素节点</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法  ：父元素.children       仅获得元素节点**常用**</span></span><br><span class="line"><span class="comment">//       父元素.childNodes     获得所有子节点、包括文本节点（空格、换行）、注释节点等</span></span><br><span class="line">ul.<span class="property">children</span>[i].<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br></pre></td></tr></table></figure><pre><code>返回的是一个**伪数组**</code></pre><h5 id="6-2-3查找兄弟节点"><a href="#6-2-3查找兄弟节点" class="headerlink" title="6.2.3查找兄弟节点"></a>6.2.3查找兄弟节点</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法  ： 元素.nextElementSibling       下一个兄弟节点</span></span><br><span class="line"><span class="comment">//  元素.previousElementSibling   上一个兄弟节点</span></span><br></pre></td></tr></table></figure><h3 id="6-3增加、删除、克隆节点"><a href="#6-3增加、删除、克隆节点" class="headerlink" title="6.3增加、删除、克隆节点"></a>6.3增加、删除、克隆节点</h3><h5 id="6-3-1创建节点"><a href="#6-3-1创建节点" class="headerlink" title="6.3.1创建节点"></a>6.3.1创建节点</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法   document.creatElement(&#x27;标签名&#x27;)</span></span><br><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">div.<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="6-3-2追加节点"><a href="#6-3-2追加节点" class="headerlink" title="6.3.2追加节点"></a>6.3.2追加节点</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法   父元素.appendChild(要插入的子元素)加到父元素的最后</span></span><br><span class="line"><span class="comment">//父元素.insertBefore(要插入的子元素，在哪个元素前)加到父元素的某个子元素前面</span></span><br><span class="line"><span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ul.<span class="title function_">appendChild</span>(li)</span><br><span class="line">ul.<span class="title function_">insertBefore</span>(li, ul.<span class="property">children</span>[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h5 id="6-3-3克隆节点"><a href="#6-3-3克隆节点" class="headerlink" title="6.3.3克隆节点"></a>6.3.3克隆节点</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法元素.cloneNode(布尔值)</span></span><br><span class="line"><span class="comment">//若布尔值为false(默认值)，不克隆后代节点；true克隆后代节点</span></span><br><span class="line"><span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line"><span class="comment">//一般先克隆节点，然后把复制的节点放到指定元素的内部</span></span><br><span class="line"><span class="keyword">let</span> newUl = ul.<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(newUl)</span><br></pre></td></tr></table></figure><h5 id="6-3-4删除节点"><a href="#6-3-4删除节点" class="headerlink" title="6.3.4删除节点"></a>6.3.4删除节点</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法父元素.removeChild(要删除的元素)</span></span><br><span class="line">ul.<span class="title function_">removeChild</span>(ul.<span class="property">children</span>[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><pre><code>在 JavaScript 原生DOM操作中，要删除元素必须通过父元素删除删除节点和隐藏节点（display:none） 有区别的： 隐藏节点还是存在的，但是删除，则从html中删除节点</code></pre><h1 id="7-时间对象"><a href="#7-时间对象" class="headerlink" title="7.时间对象"></a>7.时间对象</h1><h3 id="1-时间对象方法"><a href="#1-时间对象方法" class="headerlink" title="1.时间对象方法"></a>1.时间对象方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得当前时间</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="comment">//获得指定时间</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;1949-10-01&#x27;</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获得年份</td><td>获取四位年份</td></tr><tr><td>getMonth()</td><td>获得月份</td><td>取值为 0 ~ 11</td></tr><tr><td>getDate()</td><td>获取月份中的每一天</td><td>不同月份取值也不相同</td></tr><tr><td>getDay()</td><td>获取星期</td><td>取值为 0 ~ 6</td></tr><tr><td>getHours()</td><td>获取小时</td><td>取值为 0 ~ 23</td></tr><tr><td>getMinutes()</td><td>获取分钟</td><td>取值为 0 ~ 59</td></tr><tr><td>getSeconds()</td><td>获取秒</td><td>取值为 0 ~ 59</td></tr></tbody></table><h3 id="2-时间戳"><a href="#2-时间戳" class="headerlink" title="2.时间戳"></a>2.时间戳</h3><pre><code>指的是1970年01月01日00时00分00秒起至现在的毫秒数，通常用**两个**时间戳计算**时间差**</code></pre><p>方法1：getTime()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getTime</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.首先实例化</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="comment">//2.获得时间戳</span></span><br><span class="line">date.<span class="title function_">getTime</span>()</span><br></pre></td></tr></table></figure><p>方法2：+new Date</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="keyword">new</span> <span class="title class_">Date</span>())  <span class="comment">//获得当前的时间戳</span></span><br><span class="line">consele.<span class="title function_">log</span>(+<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2022-1-1 12:00:00&#x27;</span>))  <span class="comment">//获得指定时间的时间戳</span></span><br></pre></td></tr></table></figure><p>方法3: Date().now()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>())  <span class="comment">//只能得到当前时间的时间戳</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 方法1和方法2可以返回指定时间的时间戳，方法三只能得到当前时间的时间戳</p><pre><code>        方法1在使用getTime之前需要实例化</code></pre><h1 id="8-BOM的基本操作"><a href="#8-BOM的基本操作" class="headerlink" title="8.BOM的基本操作"></a>8.BOM的基本操作</h1><h3 id="8-1BOM介绍"><a href="#8-1BOM介绍" class="headerlink" title="8.1BOM介绍"></a>8.1BOM介绍</h3><pre><code>BOM(Browser Object Model ) 是浏览器对象模型</code></pre><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/BOM.png"                      alt="BOM"                ></p><ul><li>window 是浏览器内置中的全局对象， Web APIs 的知识内容都是基于 window 对象实现的</li><li>window 对象下包含了 navigator、location、document、history、screen 5个属性，即所谓的 BOM （浏览器对象模型） </li><li>document 是实现 DOM 的基础，它其实是依附于 window 的属性。</li><li><strong>依附于 window 对象的所有属性和方法，使用时可以省略 window</strong></li></ul><h5 id="8-1-1location对象"><a href="#8-1-1location对象" class="headerlink" title="8.1.1location对象"></a>8.1.1location对象</h5><pre><code>location 的数据类型是对象，它拆分并保存了 URL 地址的各个组成部分</code></pre><table><thead><tr><th align="center">属性和方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">href</td><td align="center">获取完整的 URL 地址，对其赋值时用于地址的跳转</td></tr><tr><td align="center">search</td><td align="center">获取地址中携带的参数，符号 ？后面部分</td></tr><tr><td align="center">hash</td><td align="center">获取地址中的哈希值，符号 # 后面部分</td></tr><tr><td align="center">reload()</td><td align="center">法用来刷新当前页面，传入参数 true 时表示强制刷新</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="property">href</span> = <span class="string">&#x27;www.baidu.com&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="8-1-2navigator对象"><a href="#8-1-2navigator对象" class="headerlink" title="8.1.2navigator对象"></a>8.1.2navigator对象</h5><pre><code>navigator的数据类型是对象，该对象下记录了浏览器自身的相关信息</code></pre><p>可以通过userAgent属性来检测浏览器的版本或者平台</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> userAgent = navigator.<span class="property">userAgent</span></span><br><span class="line">    <span class="comment">//验证是否为android或者iphone</span></span><br><span class="line">    <span class="keyword">const</span> android = userAgent.<span class="title function_">match</span>(<span class="regexp">/(Android);?[\s\/]+([\d.]+)?/</span>)</span><br><span class="line"><span class="keyword">const</span> iphone = userAgent.<span class="title function_">match</span>(<span class="regexp">/(iPhone\sOS)\s([\d_]+)/</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h5 id="8-1-3history对象"><a href="#8-1-3history对象" class="headerlink" title="8.1.3history对象"></a>8.1.3history对象</h5><pre><code>history 的数据类型是对象，该对象与浏览器地址栏的操作相对应，如前进、后退、历史记录等</code></pre><table><thead><tr><th align="center">方法或属性</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">back()</td><td align="center">后退一页</td></tr><tr><td align="center">forward()</td><td align="center">前进一页</td></tr><tr><td align="center">go(参数）</td><td align="center">前进或后退，参数为1前进一个页面，-1后退一个页面</td></tr></tbody></table><h3 id="8-2本地存储"><a href="#8-2本地存储" class="headerlink" title="8.2本地存储"></a>8.2本地存储</h3><h5 id="8-2-1介绍"><a href="#8-2-1介绍" class="headerlink" title="8.2.1介绍"></a>8.2.1介绍</h5><pre><code>网页经常需要在本地存储大量的数据，HTML5提出了规范的相关解决方案</code></pre><ul><li>数据存储在用户的浏览器中</li><li>设置和读取方便，刷新页面不丢失数据</li><li>容量大，sessionStorage和localStorage大约5M左右</li></ul><h5 id="8-2-2-localStorage"><a href="#8-2-2-localStorage" class="headerlink" title="8.2.2 localStorage"></a>8.2.2 localStorage</h5><ul><li>生命周期永久生效，除非手动删除，否则关闭页面也会存在</li><li>可以多页面共享（同一浏览器可以共享）</li><li>以键值对的方法存储使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key,value)</span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key)</span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(key)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>   本地存储只能存储字符串，无法存储复杂数据类型，需要将复杂数据类型转换成JSON字符串再存储</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将复杂数据转换成JSON字符串   存储时使用</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(复杂数据类型)</span><br><span class="line"><span class="comment">//将JSON字符串转换成对象      取出时使用</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>字符串)</span><br></pre></td></tr></table></figure><h5 id="8-2-3-sessionStorage"><a href="#8-2-3-sessionStorage" class="headerlink" title="8.2.3 sessionStorage"></a>8.2.3 sessionStorage</h5><ul><li>生命周期生命周期为关闭浏览器窗口</li><li>在同一个窗口(页面)下数据可以共享</li><li>以键值对的方法存储使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用方法同上</span></span><br></pre></td></tr></table></figure><h1 id="9-自定义属性"><a href="#9-自定义属性" class="headerlink" title="9.自定义属性"></a>9.自定义属性</h1><h3 id="9-1介绍"><a href="#9-1介绍" class="headerlink" title="9.1介绍"></a>9.1介绍</h3><pre><code>**固有属性:**  标签天生自带的属性 比如class id title等, 可以直接使用点语法操作**自定义属性:**  由程序员自己添加的属性,在DOM对象中找不到, 无法使用点语法操作,必须使用专门的API 在html5中推出来了专门的data-自定义属性 在 标签上一律以data-开头,在DOM对象上一律以dataset对象方式获取</code></pre><h1 id="10-正则表达式"><a href="#10-正则表达式" class="headerlink" title="10.正则表达式"></a>10.正则表达式</h1><h3 id="10-1介绍"><a href="#10-1介绍" class="headerlink" title="10.1介绍"></a>10.1介绍</h3><pre><code>正则表达式（Regular Expression）是用于匹配字符串中字符组合的模式。正则表达式也是对象作用：表单验证（匹配），过滤敏感词（替换），提取字符串中想要的部分（提取）</code></pre><h3 id="10-2语法"><a href="#10-2语法" class="headerlink" title="10.2语法"></a>10.2语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义正则表达式   let 变量名 = /表达式/</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/huahua/</span></span><br><span class="line"><span class="comment">//2.用test()方法检测正则表达式与指定字符串是否匹配，返回布尔值  </span></span><br><span class="line"><span class="keyword">let</span> str = <span class="regexp">/huahuahahahakahfa/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str))</span><br><span class="line"><span class="comment">//3.用exec()方法再之歌指定字符串中执行一个搜索匹配，返回一个数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(str))</span><br></pre></td></tr></table></figure><h3 id="10-3元字符"><a href="#10-3元字符" class="headerlink" title="10.3元字符"></a>10.3元字符</h3><h5 id="10-3-1边界符"><a href="#10-3-1边界符" class="headerlink" title="10.3.1边界符"></a>10.3.1边界符</h5><pre><code>表示位置，开头和结尾，必须用什么开头，用什么结尾</code></pre><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本</td></tr><tr><td>$</td><td>表示匹配行尾的文本</td></tr><tr><td>^$</td><td>两个一起用表示精准匹配</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^哈/</span>.<span class="title function_">test</span>(<span class="string">&#x27;哈&#x27;</span>))  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^哈/</span>.<span class="title function_">test</span>(<span class="string">&#x27;我哈哈大笑&#x27;</span>))  <span class="comment">// false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^哈$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;哈哈&#x27;</span>))  <span class="comment">// false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^哈$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;哈&#x27;</span>))  <span class="comment">// true </span></span><br></pre></td></tr></table></figure><h5 id="10-3-2量词"><a href="#10-3-2量词" class="headerlink" title="10.3.2量词"></a>10.3.2量词</h5><pre><code>用来设定 **某个模式出现的次数**</code></pre><table><thead><tr><th>量词</th><th align="center">说明</th></tr></thead><tbody><tr><td>*</td><td align="center">0-多</td></tr><tr><td>+</td><td align="center">1-多</td></tr><tr><td>?</td><td align="center">o或1</td></tr><tr><td>{n}</td><td align="center">n</td></tr><tr><td>{n,}</td><td align="center">n-多</td></tr><tr><td>{n,m}</td><td align="center">n-m</td></tr></tbody></table><h5 id="10-3-3字符类"><a href="#10-3-3字符类" class="headerlink" title="10.3.3字符类"></a>10.3.3字符类</h5><table><thead><tr><th align="center">字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">[abcdefg]</td><td align="center">后面的字符串只要包含[]内的任一字符都返回true</td></tr><tr><td align="center">[a-zA-Z0-9]</td><td align="center">表示a到z，A到Z，0到9都可</td></tr><tr><td align="center">[^a-z]</td><td align="center">括号里面加上^表示取反，除了小写字母以外的字符</td></tr><tr><td align="center">\d</td><td align="center">[0-9]</td></tr><tr><td align="center">\D</td><td align="center">[^0-9]</td></tr><tr><td align="center">\w</td><td align="center">[A-Za-z0-9]</td></tr><tr><td align="center">\W</td><td align="center">[^A-Za-z0-9]</td></tr><tr><td align="center">\s</td><td align="center">[\t\r\n\v\f]</td></tr><tr><td align="center">\S</td><td align="center">[^\t\r\n\v\f]</td></tr></tbody></table><h3 id="10-4修饰符"><a href="#10-4修饰符" class="headerlink" title="10.4修饰符"></a>10.4修饰符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*语法</span></span><br><span class="line"><span class="comment">/表达式/修饰符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//i  表示不区分大小写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/a/i</span>.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="comment">//g  表示匹配所有满足正则表达式的结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//replace替换</span></span><br><span class="line"><span class="comment">//  字符串.replace(/正则表达式/，&#x27;替换的文本&#x27;)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;⭐Web-APIs-DOM、BOM&quot;&gt;&lt;a href=&quot;#⭐Web-APIs-DOM、BOM&quot; class=&quot;headerlink&quot; title=&quot;⭐Web APIs     DOM、BOM&quot;&gt;&lt;/a&gt;⭐Web APIs     DOM、BOM&lt;/h1&gt;&lt;h1 i</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="WebAPI" scheme="http://example.com/tags/WebAPI/"/>
    
  </entry>
  
  <entry>
    <title>7.和小达一起学HTTP协议</title>
    <link href="http://example.com/2022/08/11/7.%E2%80%9C%E6%B5%85%E5%85%A5%E6%B7%B1%E5%87%BA%E2%80%9DHTTP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://example.com/2022/08/11/7.%E2%80%9C%E6%B5%85%E5%85%A5%E6%B7%B1%E5%87%BA%E2%80%9DHTTP%E5%8D%8F%E8%AE%AE/</id>
    <published>2022-08-11T11:30:31.000Z</published>
    <updated>2022-08-11T13:13:19.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-About-HTTP协议"><a href="#1-About-HTTP协议" class="headerlink" title="1.About HTTP协议"></a>1.About HTTP协议</h1><h3 id="1-1通信"><a href="#1-1通信" class="headerlink" title="1.1通信"></a>1.1通信</h3><p>​通信就是<strong>信息的传递和交换</strong></p><p>​通信的<strong>三要素</strong>：1.通信的<strong>主体</strong>2.通信的<strong>内容</strong>3.通信的<strong>方式</strong></p><p>​例如：服务器把关于M78星云的相关信息响应给客户端浏览器，<strong>通信的主体</strong>是服务器和客户端浏览器，<strong>通信的内容</strong>是M78星云的相关信息，<strong>通信的方式</strong>是响应。</p><h2 id="1-2通信协议"><a href="#1-2通信协议" class="headerlink" title="1.2通信协议"></a>1.2通信协议</h2><p>​通信协议（Communication Protocol）是指通信的双方完成通信所必须遵守的规则和约定。</p><p>​客户端和服务器之间要实现网页内容的传输，通信双方必须遵守网页内容的传输协议。因为网页的内容叫做<strong>超文本</strong>，因此网页内容的传输协议叫做<strong>超文本传输协议(Hyper Text Transfer Protocol)</strong>,即<strong>HTTP协议</strong>，规定了客户端与服务器之间进行网页内容传输时必须遵守的传输格式。</p><h3 id="1-3交互模型"><a href="#1-3交互模型" class="headerlink" title="1.3交互模型"></a>1.3交互模型</h3><p>​HTTP协议采用了<strong>请求&#x2F;响应</strong>的交互模型。<img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E6%A8%A1%E5%9E%8B.png"                      alt="请求响应模型"                ></p><h1 id="2-HTTP请求消息"><a href="#2-HTTP请求消息" class="headerlink" title="2.HTTP请求消息"></a>2.HTTP请求消息</h1><h3 id="2-1概念"><a href="#2-1概念" class="headerlink" title="2.1概念"></a>2.1概念</h3><p>​HTTP协议是客户端浏览器和服务器之间的通信协议，所以客户端浏览器发起的请求叫<strong>HTTP请求</strong>，客户端发送到服务器的消息叫<strong>HTTP请求消息</strong>，又叫<strong>HTTP请求报文</strong></p><h3 id="2-2HTTP请求消息的组成部分"><a href="#2-2HTTP请求消息的组成部分" class="headerlink" title="2.2HTTP请求消息的组成部分"></a>2.2HTTP请求消息的组成部分</h3><p>​<strong>HTTP请求消息由</strong>请求行(request line)<strong>,<strong>请求头部(header)</strong>,<strong>空行</strong>，</strong>请求体<strong>四部分组成。</strong><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF%E5%85%A8.jpeg"                      alt="请求消息"                ></p><h5 id="2-2-1请求行"><a href="#2-2-1请求行" class="headerlink" title="2.2.1请求行"></a>2.2.1请求行</h5><p>​请求行由<strong>请求方式、URL 和 HTTP 协议版本</strong> 3 个部分组成，他们之间使用空格隔开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /api/post HTTP/1.1</span><br></pre></td></tr></table></figure><h5 id="2-2-2请求头部"><a href="#2-2-2请求头部" class="headerlink" title="2.2.2请求头部"></a>2.2.2请求头部</h5><p>​请求头部用来<strong>描述客户端的基本信息</strong>，从而<strong>把客户端相关的信息告知服务器</strong>。比如：**User-Agent <strong>用来说明当前是什么类型的浏览器；</strong>Content-Type <strong>用来描述发送到服务器的数据格式；</strong>Accept <strong>用来描述客户端能够接收什么类型的返回内容；</strong>Accept-Language <strong>用来描述客户端期望接收哪种人类语言的文本内容。<br>​请求头部由</strong>多行 键&#x2F;值对 **组成，每行的键和值之间用英文的冒号分隔。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E8%AF%B7%E6%B1%82%E5%A4%B4%E9%83%A8.png"                      alt="请求头部"                ></p><table><thead><tr><th align="center">头部字段</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Host</td><td align="center">要请求的服务器域名</td></tr><tr><td align="center">Connection</td><td align="center">客户端与服务器的连接方式(close 或 keepalive)</td></tr><tr><td align="center">Content-Length</td><td align="center">用来描述请求体的大小</td></tr><tr><td align="center">Accept</td><td align="center">客户端可识别的响应内容类型列表</td></tr><tr><td align="center">User-Agent</td><td align="center">产生请求的浏览器类型</td></tr><tr><td align="center">Content-Type</td><td align="center">客户端告诉服务器实际发送的数据类型</td></tr><tr><td align="center">Accept-Encoding</td><td align="center">客户端可接收的内容压缩编码形式</td></tr><tr><td align="center">Accept-Language</td><td align="center">用户期望获得的自然语言的优先顺序</td></tr></tbody></table><p>详细内容可以查看官方文档： <a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers" >https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers<i class="fas fa-external-link-alt"></i></a></p><h5 id="2-2-3空行"><a href="#2-2-3空行" class="headerlink" title="2.2.3空行"></a>2.2.3空行</h5><p>最后一个请求头字段的后面是一个空行，<strong>通知服务器请求头部至此结束</strong>，<strong>用来分隔请求头部与请求体</strong></p><h5 id="2-2-4请求体"><a href="#2-2-4请求体" class="headerlink" title="2.2.4请求体"></a>2.2.4请求体</h5><p>存放要通过<strong>POST方式</strong>提交到服务器的数据，<strong>GET没有请求体</strong></p><h1 id="3-HTTP请求方法"><a href="#3-HTTP请求方法" class="headerlink" title="3.HTTP请求方法"></a>3.HTTP请求方法</h1><h3 id="3-1概念"><a href="#3-1概念" class="headerlink" title="3.1概念"></a>3.1概念</h3><p>HTTP 请求方法，属于 HTTP 协议中的一部分，请求方法的作用是：<strong>用来表明要对服务器上的资源执行的操作。最常用的请求方法是 GET 和 POST</strong>。</p><h3 id="3-2HTTP的请求方法"><a href="#3-2HTTP的请求方法" class="headerlink" title="3.2HTTP的请求方法"></a>3.2HTTP的请求方法</h3><table><thead><tr><th align="center">序号</th><th align="center">方法</th><th align="center"></th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><strong>GET</strong></td><td align="center">发送请求来获得服务器上的资源，请求体中不会包含请求数据，请求数据放在协议头中。</td></tr><tr><td align="center">2</td><td align="center"><strong>POST</strong></td><td align="center">向服务器提交资源（例如提交表单或上传文件）。数据被包含在请求体中提交给服务器。</td></tr><tr><td align="center">3</td><td align="center"><strong>PUT</strong></td><td align="center">向服务器提交资源，并使用提交的新资源，替换掉服务器对应的旧资源。</td></tr><tr><td align="center">4</td><td align="center"><strong>DELETE</strong></td><td align="center">请求服务器删除指定的资源。</td></tr><tr><td align="center">5</td><td align="center">HEAD</td><td align="center"></td></tr><tr><td align="center">6</td><td align="center">OPTIONS</td><td align="center"></td></tr><tr><td align="center">7</td><td align="center">CONNECT</td><td align="center"></td></tr><tr><td align="center">8</td><td align="center">TRACE</td><td align="center"></td></tr><tr><td align="center">9</td><td align="center">PATCH</td><td align="center"></td></tr></tbody></table><h1 id="4-HTTP响应消息"><a href="#4-HTTP响应消息" class="headerlink" title="4.HTTP响应消息"></a>4.HTTP响应消息</h1><h3 id="4-1概念"><a href="#4-1概念" class="headerlink" title="4.1概念"></a>4.1概念</h3><p>响应消息就是<strong>服务器响应给客户端的消息内容</strong>，也叫作<strong>响应报文</strong></p><h3 id="4-2HTTP请求消息的组成部分"><a href="#4-2HTTP请求消息的组成部分" class="headerlink" title="4.2HTTP请求消息的组成部分"></a>4.2HTTP请求消息的组成部分</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF.png"                      alt="响应消息"                ></p><h5 id="4-2-1状态行"><a href="#4-2-1状态行" class="headerlink" title="4.2.1状态行"></a>4.2.1状态行</h5><p>​状态行由 <strong>HTTP 协议版本</strong>、<strong>状态码</strong>和<strong>状态码的描述文本</strong> 3 个部分组成，他们之间使用空格隔开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure><h5 id="4-2-2响应头部"><a href="#4-2-2响应头部" class="headerlink" title="4.2.2响应头部"></a>4.2.2响应头部</h5><p>​响应头部用来<strong>描述服务器的基本信息</strong>。响应头部由多行 键&#x2F;值对 组成，每行的键和值之间用英文的冒号分隔</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E5%93%8D%E5%BA%94%E5%A4%B4%E9%83%A8.png"                      alt="1649493745036"                ></p><h5 id="4-2-3空行"><a href="#4-2-3空行" class="headerlink" title="4.2.3空行"></a>4.2.3空行</h5><p>​在最后一个响应头部字段结束之后，会紧跟一个空行，<strong>用来通知客户端响应头部至此结束，分隔响应头部与响应体</strong>。</p><h5 id="4-2-4响应体"><a href="#4-2-4响应体" class="headerlink" title="4.2.4响应体"></a>4.2.4响应体</h5><p>​响应体中存放的，是服务器响应给客户端的资源内容。</p><h1 id="5-HTTP响应状态码"><a href="#5-HTTP响应状态码" class="headerlink" title="5.HTTP响应状态码"></a>5.HTTP响应状态码</h1><h3 id="5-1概念"><a href="#5-1概念" class="headerlink" title="5.1概念"></a>5.1概念</h3><p>​<strong>HTTP 响应状态码（HTTP Status Code）</strong>，也属于 HTTP 协议的一部分，用来标识响应的状态。<br>​响应状态码会随着响应消息一起被发送至客户端浏览器，浏览器根据服务器返回的响应状态码，就能知道这次 HTTP 请求的结果是成功还是失败了。</p><h3 id="5-2HTTP响应状态码的组成和分类"><a href="#5-2HTTP响应状态码的组成和分类" class="headerlink" title="5.2HTTP响应状态码的组成和分类"></a>5.2HTTP响应状态码的组成和分类</h3><p>​HTTP 状态码由<strong>三位数</strong>组成，<strong>第一个数字定义了状态码的类型</strong>，后两个数字用来对状态码进行细分。</p><table><thead><tr><th align="center">分类</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1**</td><td align="center">信息响应，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td align="center">2**</td><td align="center">成功响应，操作被成功接收并处理</td></tr><tr><td align="center">3**</td><td align="center">重定向消息，需要进一步的操作以完成请求</td></tr><tr><td align="center">4**</td><td align="center">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td align="center">5**</td><td align="center">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><h5 id="5-2-2-2"><a href="#5-2-2-2" class="headerlink" title="5.2.2 2**"></a>5.2.2 2**</h5><p>表示服务器已成功接收到请求并进行处理。</p><table><thead><tr><th>状态码</th><th>英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td><strong>请求成功</strong>，一般用于GET与POST请求</td></tr><tr><td>201</td><td>Created</td><td><strong>已创建</strong>，成功请求并创建了新的资源，通常用于POST&#x2F;PUT请求</td></tr></tbody></table><h5 id="5-2-3-3"><a href="#5-2-3-3" class="headerlink" title="5.2.3 3**"></a>5.2.3 3**</h5><p>表示服务器要求客户端重定向，需要客户端进一步的操作以完成资源的请求。</p><table><thead><tr><th align="center">状态码</th><th align="center">英文名称</th><th align="center">中文描述</th></tr></thead><tbody><tr><td align="center">301</td><td align="center">Moved Permanently</td><td align="center"><strong>永久移动</strong>，请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td align="center">302</td><td align="center">Found</td><td align="center"><strong>临时移动</strong>。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td align="center">304</td><td align="center">Not Modified</td><td align="center"><strong>未修改</strong>。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源（响应消息中不包含响应体）。客户端通常会缓存访问过的资源。</td></tr></tbody></table><h5 id="5-2-4-4"><a href="#5-2-4-4" class="headerlink" title="5.2.4 4**"></a>5.2.4 4**</h5><p>表示客户端的请求有非法内容，从而导致这次请求失败。</p><table><thead><tr><th align="center">状态码</th><th align="center">英文名称</th><th align="left">中文描述</th></tr></thead><tbody><tr><td align="center">400</td><td align="center">Bad Request</td><td align="left">1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。</td></tr><tr><td align="center">2、请求参数有误。</td><td align="center"></td><td align="left"></td></tr><tr><td align="center">401</td><td align="center">Unauthorized</td><td align="left">当前请求需要用户验证</td></tr><tr><td align="center">403</td><td align="center">Forbidden</td><td align="left">服务器已经理解请求，但是拒绝执行它</td></tr><tr><td align="center">404</td><td align="center">Not Found</td><td align="left">服务器无法根据客户端的请求找到资源（网页）</td></tr><tr><td align="center">408</td><td align="center">Request Timeout</td><td align="left">请求超时。服务器等待客户端发送的请求时间过长，超时</td></tr></tbody></table><h5 id="5-2-5-5"><a href="#5-2-5-5" class="headerlink" title="5.2.5 5**"></a>5.2.5 5**</h5><p>表示服务器要求客户端重定向，需要客户端进一步的操作以完成资源的请求。</p><table><thead><tr><th align="center">状态码</th><th align="center">英文名称</th><th align="center">中文描述</th></tr></thead><tbody><tr><td align="center">500</td><td align="center">Internal Server Error</td><td align="center">服务器内部错误，无法完成请求</td></tr><tr><td align="center">501</td><td align="center">Not Implemented</td><td align="center">服务器不支持该请求方法，无法完成请求。只有 GET 和 HEAD 请求方法是要求每个服务器必须支持的，其它请求方法在不支持的服务器上会返回501</td></tr><tr><td align="center">503</td><td align="center">Service Unavailable</td><td align="center">由于超载或系统维护，服务器暂时的无法处理客户端的请求</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-About-HTTP协议&quot;&gt;&lt;a href=&quot;#1-About-HTTP协议&quot; class=&quot;headerlink&quot; title=&quot;1.About HTTP协议&quot;&gt;&lt;/a&gt;1.About HTTP协议&lt;/h1&gt;&lt;h3 id=&quot;1-1通信&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTTP协议" scheme="http://example.com/tags/HTTP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>8.和小达一起学JSON</title>
    <link href="http://example.com/2022/08/11/8.%E2%80%9C%E6%B5%85%E5%85%A5%E6%B7%B1%E5%87%BA%E2%80%9DJSON/"/>
    <id>http://example.com/2022/08/11/8.%E2%80%9C%E6%B5%85%E5%85%A5%E6%B7%B1%E5%87%BA%E2%80%9DJSON/</id>
    <published>2022-08-11T11:30:31.000Z</published>
    <updated>2022-08-11T13:16:13.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="🍭-JSON-详解"><a href="#🍭-JSON-详解" class="headerlink" title="🍭 JSON 详解"></a>🍭 JSON 详解</h1><hr><h2 id="1-什么是-JSON"><a href="#1-什么是-JSON" class="headerlink" title="1. 什么是 JSON"></a>1. 什么是 JSON</h2><ul><li>JSON 指的是 <strong>JavaScript 对象表示法</strong>（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）</li><li>JSON 是<strong>轻量级的文本数据交换格式</strong></li><li>JSON 独立于语言：JSON 使用 Javascript 语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持 JSON</li><li>JSON 具有自我描述性，更易理解</li></ul><h2 id="2-JSON-与-JavaScript"><a href="#2-JSON-与-JavaScript" class="headerlink" title="2. JSON 与 JavaScript"></a>2. JSON 与 JavaScript</h2><p>📜 JSON 文本格式在语法上与创建 JavaScript 对象的代码相同。由于这种相似性，无需解析器，JavaScript 程序能够使用内建的 <code>eval()</code> 函数，用 JSON 数据来生成原生的 JavaScript 对象。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>CS-Wiki<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>JavaScript 创建 JSON 对象<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">网站名称: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;jname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">网站地址: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;jurl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">网站 slogan: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;jslogan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> <span class="title class_">JSON</span><span class="built_in">Object</span>= &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="string">&quot;name&quot;</span>:<span class="string">&quot;CS-Wiki&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="string">&quot;url&quot;</span>:<span class="string">&quot;https://gitee.com/veal98/CS-Wiki&quot;</span>, </span></span><br><span class="line"><span class="language-javascript"><span class="string">&quot;slogan&quot;</span>:<span class="string">&quot;🎉 用清晰的脉络总结 Java 和 AI 相关的知识点，便于构建完善的知识体系&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;jname&quot;</span>).<span class="property">innerHTML</span>=<span class="title class_">JSON</span><span class="built_in">Object</span>.<span class="property">name</span> </span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;jurl&quot;</span>).<span class="property">innerHTML</span>=<span class="title class_">JSON</span><span class="built_in">Object</span>.<span class="property">url</span> </span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;jslogan&quot;</span>).<span class="property">innerHTML</span>=<span class="title class_">JSON</span><span class="built_in">Object</span>.<span class="property">slogan</span> </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/veal98/images/raw/master/img/20200901215515.png"                      style="zoom:50%;"                 ><h2 id="3-JSON-语法规则"><a href="#3-JSON-语法规则" class="headerlink" title="3. JSON 语法规则"></a>3. JSON 语法规则</h2><p><strong>JSON 语法是 JavaScript 对象表示语法的子集</strong>：</p><ul><li>数据在名称&#x2F;值对中</li><li>数据由逗号分隔</li><li>大括号保存对象</li><li>中括号保存数组</li></ul><h3 id="①-JSON-名称-x2F-值对"><a href="#①-JSON-名称-x2F-值对" class="headerlink" title="① JSON 名称&#x2F;值对"></a>① JSON 名称&#x2F;值对</h3><p>JSON 数据的书写格式是：名称&#x2F;值对。</p><p>名称&#x2F;值对包括字段名称（在双引号中），后面写一个冒号，然后是值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;菜鸟教程&quot;</span></span><br></pre></td></tr></table></figure><p>这很容易理解，等价于这条 JavaScript 语句：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;菜鸟教程&quot;</span></span><br></pre></td></tr></table></figure><h3 id="②-JSON-值"><a href="#②-JSON-值" class="headerlink" title="② JSON 值"></a>② JSON 值</h3><p>JSON 值可以是：</p><ul><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>逻辑值（true 或 false）</li><li>数组（在中括号中）</li><li>对象（在大括号中）</li><li>null</li></ul><h3 id="③-JSON-数字"><a href="#③-JSON-数字" class="headerlink" title="③ JSON 数字"></a>③ JSON 数字</h3><p>JSON 数字可以是整型或者浮点型：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">30</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="④-JSON-对象"><a href="#④-JSON-对象" class="headerlink" title="④ JSON 对象"></a>④ JSON 对象</h3><p>JSON 对象在大括号（<code>&#123;&#125;</code>）中书写：</p><p>对象可以包含多个名称&#x2F;值对：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;hello&quot;</span> <span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.baidu.com&quot;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这一点也容易理解，与这条 JavaScript 语句等价：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;hello&quot;</span> <span class="punctuation">,</span> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.baidu.com&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="⑤-JSON-数组"><a href="#⑤-JSON-数组" class="headerlink" title="⑤ JSON 数组"></a>⑤ JSON 数组</h3><p>JSON 数组在中括号中书写：</p><p>数组可包含多个对象：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;sites&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> </span><br><span class="line">        <span class="punctuation">&#123;</span> </span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;hello&quot;</span> <span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.baidu.com&quot;</span> </span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="punctuation">&#123;</span> </span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;google&quot;</span> <span class="punctuation">,</span> </span><br><span class="line">         <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.google.com&quot;</span> </span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="punctuation">&#123;</span> </span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;微博&quot;</span> <span class="punctuation">,</span> </span><br><span class="line">         <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.weibo.com&quot;</span> </span><br><span class="line">        <span class="punctuation">&#125;</span> </span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，对象 “<code>sites</code>“ 是包含三个对象的数组。</p><h3 id="⑥-JSON-布尔值"><a href="#⑥-JSON-布尔值" class="headerlink" title="⑥ JSON 布尔值"></a>⑥ JSON 布尔值</h3><p>JSON 布尔值可以是 true 或者 false：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;flag&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="⑦-JSON-null"><a href="#⑦-JSON-null" class="headerlink" title="⑦ JSON null"></a>⑦ JSON null</h3><p>JSON 可以设置 null 值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;runoob&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="⑧-JSON-使用-JavaScript-语法"><a href="#⑧-JSON-使用-JavaScript-语法" class="headerlink" title="⑧ JSON 使用 JavaScript 语法"></a>⑧ JSON 使用 JavaScript 语法</h3><p>因为 JSON 使用 JavaScript 语法，所以无需额外的软件就能处理 JavaScript 中的 JSON。</p><p>通过 JavaScript，您可以创建一个对象数组，并像这样进行赋值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var sites = <span class="punctuation">[</span>    </span><br><span class="line">    <span class="punctuation">&#123;</span> </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;hello&quot;</span> <span class="punctuation">,</span> </span><br><span class="line">     <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.baidu.com&quot;</span> </span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span>     </span><br><span class="line">    <span class="punctuation">&#123;</span> </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;google&quot;</span> <span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.google.com&quot;</span> </span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span>     </span><br><span class="line">    <span class="punctuation">&#123;</span> </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;微博&quot;</span> <span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.weibo.com&quot;</span> </span><br><span class="line">    <span class="punctuation">&#125;</span> </span><br><span class="line"><span class="punctuation">]</span>;</span><br></pre></td></tr></table></figure><p>可以像这样访问 JavaScript 对象数组中的第一项（索引从 0 开始）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sites<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span>.name;</span><br></pre></td></tr></table></figure><p>返回的内容是：baidu</p><p>可以像这样修改数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sites<span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span>.name=<span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="4-JSON-和-XML"><a href="#4-JSON-和-XML" class="headerlink" title="4. JSON 和 XML"></a>4. JSON 和 XML</h2><p>xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sites</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">site</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="tag">&lt;<span class="name">url</span>&gt;</span>www.runoob.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">site</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>google<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="tag">&lt;<span class="name">url</span>&gt;</span>www.google.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">site</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="tag">&lt;<span class="name">url</span>&gt;</span>www.weibo.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sites</span>&gt;</span></span><br></pre></td></tr></table></figure><p>json:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;sites&quot;</span>: [</span><br><span class="line">        &#123; <span class="string">&quot;name&quot;</span>:<span class="string">&quot;菜鸟教程&quot;</span> , <span class="string">&quot;url&quot;</span>:<span class="string">&quot;www.runoob.com&quot;</span> &#125;, </span><br><span class="line">        &#123; <span class="string">&quot;name&quot;</span>:<span class="string">&quot;google&quot;</span> , <span class="string">&quot;url&quot;</span>:<span class="string">&quot;www.google.com&quot;</span> &#125;, </span><br><span class="line">        &#123; <span class="string">&quot;name&quot;</span>:<span class="string">&quot;微博&quot;</span> , <span class="string">&quot;url&quot;</span>:<span class="string">&quot;www.weibo.com&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>与 XML 相同之处</strong>：</p><ul><li><u>JSON 是纯文本</u></li><li>JSON 具有”自我描述性”（人类可读）</li><li>JSON 具有层级结构（值中存在值）</li><li>JSON 可通过 JavaScript 进行解析</li><li>JSON 数据可使用 AJAX 进行传输</li></ul><p><strong>与 XML 不同之处</strong>：</p><ul><li>没有结束标签</li><li>更短</li><li>读写的速度更快</li><li>能够使用内建的 JavaScript <code>eval()</code> 方法进行解析</li><li>使用数组</li><li>不使用保留字</li></ul><p>⭐ <strong>最大的不同是</strong>：XML 需要使用 XML 解析器来解析，JSON 可以使用标准的 JavaScript 函数来解析。</p><ul><li><code>JSON.parse()</code>: 将一个 JSON 字符串转换为 JavaScript 对象。</li><li><code>JSON.stringify()</code>: 将 JavaScript 值转换为 JSON 字符串。</li></ul><p>❓ <strong>为什么使用 JSON？</strong></p><p>对于 AJAX 应用程序来说，JSON 比 XML 更快更易使用：</p><ul><li><p><u>使用 XML</u>：</p><ul><li>读取 XML 文档</li><li>使用 XML DOM 来循环遍历文档</li><li>读取值并存储在变量中</li></ul></li><li><p><u>使用 JSON</u>：</p><ul><li>读取 JSON 字符串</li><li>用 eval() 处理 JSON 字符串</li></ul></li></ul><h2 id="5-JSON-对象详解"><a href="#5-JSON-对象详解" class="headerlink" title="5. JSON 对象详解"></a>5. JSON 对象详解</h2><h3 id="①-对象语法"><a href="#①-对象语法" class="headerlink" title="① 对象语法"></a>① 对象语法</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;hello&quot;</span> <span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.baidu.com&quot;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>JSON 对象使用在大括号({})中书写。</p><p>对象可以包含多个 <strong>key&#x2F;value（键&#x2F;值）</strong>对。</p><p>key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。</p><ul><li><p><strong>key 和 value 中使用冒号(<code>:</code>)分割。</strong></p></li><li><p><strong>每个 key&#x2F;value 对使用逗号(<code>,</code>)分割。</strong></p></li></ul><h3 id="②-访问对象值"><a href="#②-访问对象值" class="headerlink" title="② 访问对象值"></a>② 访问对象值</h3><p>使用点号（<code>.</code>）来访问对象的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj, x;</span><br><span class="line">myObj = &#123; </span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;hello&quot;</span> , </span><br><span class="line">    <span class="string">&quot;url&quot;</span>:<span class="string">&quot;www.baidu.com&quot;</span> </span><br><span class="line">&#125;;</span><br><span class="line">x = myObj.<span class="property">name</span>;</span><br></pre></td></tr></table></figure><p>也可以使用中括号（<code>[]</code>）来访问对象的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj, x;</span><br><span class="line">myObj = &#123; </span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;hello&quot;</span> , </span><br><span class="line">    <span class="string">&quot;url&quot;</span>:<span class="string">&quot;www.baidu.com&quot;</span> </span><br><span class="line">&#125;;</span><br><span class="line">x = myObj[<span class="string">&quot;name&quot;</span>];</span><br></pre></td></tr></table></figure><h3 id="③-循环对象"><a href="#③-循环对象" class="headerlink" title="③ 循环对象"></a>③ 循环对象</h3><p>使用 <code>for-in</code> 来循环对象的属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;使用 <span class="keyword">for</span>-<span class="keyword">in</span> 来循环对象的属性:&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> myObj = &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;hello&quot;</span> , </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="string">&quot;url&quot;</span>:<span class="string">&quot;www.baidu.com&quot;</span> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">for</span> (x <span class="keyword">in</span> myObj) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> += x + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/veal98/images/raw/master/img/20200901223050.png"                      style="zoom:50%;"                 ><p>在 for-in 循环对象的属性时，使用中括号（<code>[]</code>）来访问属性的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> myObj) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> += myObj[x] + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/veal98/images/raw/master/img/20200901223206.png"                      style="zoom:50%;"                 ><h3 id="④-嵌套-JSON-对象"><a href="#④-嵌套-JSON-对象" class="headerlink" title="④ 嵌套 JSON 对象"></a>④ 嵌套 JSON 对象</h3><p>JSON 对象中可以包含另外一个 JSON 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">myObj = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;baidu&quot;</span>,</span><br><span class="line">    <span class="string">&quot;alexa&quot;</span>:<span class="number">10000</span>,</span><br><span class="line">    <span class="string">&quot;sites&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;site1&quot;</span>:<span class="string">&quot;www.baidu.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;site2&quot;</span>:<span class="string">&quot;m.baidu.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;site3&quot;</span>:<span class="string">&quot;c.baidu.com&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以使用点号(<code>.</code>)或者中括号(<code>[]</code>)来访问嵌套的 JSON 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = myObj.<span class="property">sites</span>.<span class="property">site1</span>;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">x = myObj.<span class="property">sites</span>[<span class="string">&quot;site1&quot;</span>];</span><br></pre></td></tr></table></figure><h3 id="⑤-修改"><a href="#⑤-修改" class="headerlink" title="⑤ 修改"></a>⑤ 修改</h3><p>以下两种写法都是修改属性的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myObj.<span class="property">sites</span>.<span class="property">site1</span> = <span class="string">&quot;www.google.com&quot;</span>; <span class="comment">// 修改属性的值</span></span><br><span class="line"></span><br><span class="line">myObj.<span class="property">sites</span>[<span class="string">&quot;site1&quot;</span>] = <span class="string">&quot;www.google.com&quot;</span>; <span class="comment">// 修改属性的值</span></span><br></pre></td></tr></table></figure><h3 id="⑥-删除"><a href="#⑥-删除" class="headerlink" title="⑥ 删除"></a>⑥ 删除</h3><p>以下两种写法效果相同：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> myObj.<span class="property">sites</span>.<span class="property">site1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> myObj.<span class="property">sites</span>[<span class="string">&quot;site1&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="6-JSON-数组详解"><a href="#6-JSON-数组详解" class="headerlink" title="6. JSON 数组详解"></a>6. JSON 数组详解</h2><h3 id="①-数组语法"><a href="#①-数组语法" class="headerlink" title="① 数组语法"></a>① 数组语法</h3><p>JSON 数组在中括号中书写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Baidu&quot;</span>, <span class="string">&quot;Taobao&quot;</span> ]</span><br></pre></td></tr></table></figure><p>JSON 中数组值必须是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。</p><p>JavaScript 中，数组值可以是以上的 JSON 数据类型，也可以是 JavaScript 的表达式，包括函数，日期，及 <em>undefined</em>。</p><h3 id="②-JSON-对象中的数组"><a href="#②-JSON-对象中的数组" class="headerlink" title="② JSON 对象中的数组"></a>② JSON 对象中的数组</h3><p>对象属性的值可以是一个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">myObj = &#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>:<span class="string">&quot;网站&quot;</span>,</span><br><span class="line"><span class="string">&quot;num&quot;</span>:<span class="number">3</span>,</span><br><span class="line"><span class="string">&quot;sites&quot;</span>:[ <span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>, <span class="string">&quot;Taobao&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用索引值来访问数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = myObj.<span class="property">sites</span>[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><h3 id="③-循环数组"><a href="#③-循环数组" class="headerlink" title="③ 循环数组"></a>③ 循环数组</h3><p>使用 for-in 来访问数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> myObj.<span class="property">sites</span>) &#123;</span><br><span class="line">    x += myObj.<span class="property">sites</span>[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以使用 for 循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; myObj.<span class="property">sites</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    x += myObj.<span class="property">sites</span>[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="④-嵌套-JSON-对象中的数组"><a href="#④-嵌套-JSON-对象中的数组" class="headerlink" title="④ 嵌套 JSON  对象中的数组"></a>④ 嵌套 JSON  对象中的数组</h3><p>JSON 对象中数组可以包含另外一个数组，或者另外一个 JSON 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">myObj = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;网站&quot;</span>,</span><br><span class="line">    <span class="string">&quot;num&quot;</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;sites&quot;</span>: [</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="string">&quot;name&quot;</span>:<span class="string">&quot;Google&quot;</span>, </span><br><span class="line">            <span class="string">&quot;info&quot;</span>: [ </span><br><span class="line">                <span class="string">&quot;Android&quot;</span>, </span><br><span class="line">                <span class="string">&quot;Google 搜索&quot;</span>, </span><br><span class="line">                <span class="string">&quot;Google 翻译&quot;</span> </span><br><span class="line">            ] </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="string">&quot;name&quot;</span>:<span class="string">&quot;num&quot;</span>, </span><br><span class="line">            <span class="string">&quot;info&quot;</span>:[ </span><br><span class="line">                <span class="string">&quot;1&quot;</span>, </span><br><span class="line">                <span class="string">&quot;2&quot;</span>, </span><br><span class="line">                <span class="string">&quot;3&quot;</span> </span><br><span class="line">            ] </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="string">&quot;name&quot;</span>:<span class="string">&quot;Taobao&quot;</span>, </span><br><span class="line">            <span class="string">&quot;info&quot;</span>:[ </span><br><span class="line">                <span class="string">&quot;淘宝&quot;</span>, </span><br><span class="line">                <span class="string">&quot;网购&quot;</span> </span><br><span class="line">            ] </span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 for-in 来循环访问每个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> myObj.<span class="property">sites</span>) &#123;</span><br><span class="line">    x += myObj.<span class="property">sites</span>[i].<span class="property">name</span>;</span><br><span class="line">    <span class="keyword">for</span> (j <span class="keyword">in</span> myObj.<span class="property">sites</span>[i].<span class="property">info</span>) &#123;</span><br><span class="line">        x += myObj.<span class="property">sites</span>[i].<span class="property">info</span>[j] + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⑤-修改-1"><a href="#⑤-修改-1" class="headerlink" title="⑤ 修改"></a>⑤ 修改</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myObj.<span class="property">sites</span>[<span class="number">1</span>] = <span class="string">&quot;Github&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="⑥-删除-1"><a href="#⑥-删除-1" class="headerlink" title="⑥ 删除"></a>⑥ 删除</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> myObj.<span class="property">sites</span>[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><h2 id="7-JSON-parse"><a href="#7-JSON-parse" class="headerlink" title="7. JSON.parse()"></a>7. JSON.parse()</h2><p>JSON 通常用于与服务端交换数据。</p><p>在接收服务器数据时一般是字符串。</p><p>我们可以<strong>使用 <code>JSON.parse()</code> 方法将数据转换为 JavaScript 对象</strong>。</p><h3 id="①-语法"><a href="#①-语法" class="headerlink" title="① 语法"></a>① 语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(text[, reviver])</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>text</code>:<strong>必需</strong>， 一个有效的 JSON 字符串。</li><li><code>reviver</code>: <strong>可选</strong>，一个转换结果的函数， 将为对象的每个成员调用此函数。</li></ul><h3 id="②-示例"><a href="#②-示例" class="headerlink" title="② 示例"></a>② 示例</h3><p>例如我们从服务器接收了以下数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;hello&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;alexa&quot;</span><span class="punctuation">:</span><span class="number">10000</span><span class="punctuation">,</span> <span class="attr">&quot;site&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.hello.com&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>使用 <code>JSON.parse()</code> 方法处理以上数据，将其转换为 JavaScript 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123; &quot;name&quot;:&quot;hello&quot;, &quot;alexa&quot;:10000, &quot;site&quot;:&quot;www.hello.com&quot; &#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>🚨 <strong>注意</strong>：解析前要确保你的数据是标准的 JSON 格式，否则会解析出错。</p><h2 id="8-JSON-stringify"><a href="#8-JSON-stringify" class="headerlink" title="8. JSON.stringify()"></a>8. JSON.stringify()</h2><p>JSON 通常用于与服务端交换数据。</p><p>在向服务器发送数据时一般是字符串。</p><p>我们可以<strong>使用 <code>JSON.stringify()</code> 方法将 JavaScript 对象转换为字符串</strong>。</p><h3 id="①-语法-1"><a href="#①-语法-1" class="headerlink" title="① 语法"></a>① 语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(value[, replacer[, space]])</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><p><code>value</code>:</p><p>必需， 要转换的 JavaScript 值（通常为对象或数组）。</p></li><li><p><code>replacer</code>:</p><p>可选。用于转换结果的函数或数组。</p><p>如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值。使用返回值而不是原始值。如果此函数返回 undefined，则排除成员。根对象的键是一个空字符串：””。</p><p>如果 replacer 是一个数组，则仅转换该数组中具有键值的成员。成员的转换顺序与键在数组中的顺序一样。当 value 参数也为数组时，将忽略 replacer 数组。</p></li><li><p><code>space</code>:</p><p>可选，文本添加缩进、空格和换行符，如果 space 是一个数字，则返回值文本在每个级别缩进指定数目的空格，如果 space 大于 10，则文本缩进 10 个空格。space 也可以使用非数字，如：\t。</p></li></ul><h3 id="②-示例-1"><a href="#②-示例-1" class="headerlink" title="② 示例"></a>② 示例</h3><p>例如我们向服务器发送以下数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">&quot;name&quot;</span>:<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;alexa&quot;</span>:<span class="number">10000</span>, <span class="string">&quot;site&quot;</span>:<span class="string">&quot;www.hello.com&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>我们使用 <code>JSON.stringify()</code> 方法处理以上数据，将其转换为字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myJSON = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br></pre></td></tr></table></figure><h2 id="📚-References"><a href="#📚-References" class="headerlink" title="📚 References"></a>📚 References</h2><ul><li><a class="link"   href="https://www.runoob.com/json/json-syntax.html" >JSON教程 — 菜鸟教程<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;🍭-JSON-详解&quot;&gt;&lt;a href=&quot;#🍭-JSON-详解&quot; class=&quot;headerlink&quot; title=&quot;🍭 JSON 详解&quot;&gt;&lt;/a&gt;🍭 JSON 详解&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-什么是-JSON&quot;&gt;&lt;a href=&quot;#1-什么是-</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JSON" scheme="http://example.com/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>9.和小达一起学Node.js</title>
    <link href="http://example.com/2022/08/11/9.%E2%80%9D%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E2%80%9CNodejs/"/>
    <id>http://example.com/2022/08/11/9.%E2%80%9D%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E2%80%9CNodejs/</id>
    <published>2022-08-11T11:30:31.000Z</published>
    <updated>2022-08-11T13:17:00.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-初识Node-js"><a href="#1-初识Node-js" class="headerlink" title="1.初识Node.js"></a>1.初识Node.js</h1><p><a class="link"   href="https://nodejs.org/zh-cn/" >Node.js官网<i class="fas fa-external-link-alt"></i></a></p><h3 id="1-1什么是Node-js"><a href="#1-1什么是Node-js" class="headerlink" title="1.1什么是Node.js"></a>1.1什么是Node.js</h3><p><strong>Node.js</strong>是基于<strong>Chrome V8 引擎</strong>的<strong>JavaScript运行环境</strong></p><ul><li>浏览器是js的前端运行环境</li><li>Node是js的后端运行环境</li><li>Node.js中无法调用DOM、BOM等浏览器内置的API</li></ul><h3 id="1-2Node-js可以做什么"><a href="#1-2Node-js可以做什么" class="headerlink" title="1.2Node.js可以做什么"></a>1.2Node.js可以做什么</h3><ul><li>基于Express框架——快速构建Web应用</li><li>基于Electron框架—–构建跨平台桌面应用</li><li>基于restify应用——–快速构建API接口项目</li><li>读写和操作数据库、创建使用的命令行辅助前端开发等等</li></ul><h3 id="1-3Node-js学习路径"><a href="#1-3Node-js学习路径" class="headerlink" title="1.3Node.js学习路径"></a>1.3Node.js学习路径</h3><p><strong>浏览器中</strong>的JS学习路径：</p><ul><li>JS基础语法—–浏览器内置的API(DOM、BOM)—–第三方库(jQuery等)</li></ul><p><strong>Node.js</strong>学习路径：</p><ul><li>JS基础语法—–Node.js内置API(fs、path、http等)—–第三方API模块(express、mysql等)</li></ul><h3 id="1-4Node-js环境安装"><a href="#1-4Node-js环境安装" class="headerlink" title="1.4Node.js环境安装"></a>1.4Node.js环境安装</h3><p>安装包直接在官网首页下载，<a class="link"   href="https://nodejs,org/en/%EF%BC%8CLTS(%E9%95%BF%E6%9C%9F%E8%BF%90%E8%A1%8C%E7%89%88%E6%9C%AC)%EF%BC%8CCurrent(%E6%96%B0%E7%89%88%E6%9C%AC)" >https://nodejs,org/en/，LTS(长期运行版本)，Current(新版本)<i class="fas fa-external-link-alt"></i></a></p><h3 id="1-5查看已安装的Node版本号"><a href="#1-5查看已安装的Node版本号" class="headerlink" title="1.5查看已安装的Node版本号"></a>1.5查看已安装的Node版本号</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.打开终端 windows+R，cmd</span><br><span class="line">2.输入命令  node -v</span><br></pre></td></tr></table></figure><h3 id="1-6终端"><a href="#1-6终端" class="headerlink" title="1.6终端"></a>1.6终端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tab快速补全路径</span><br><span class="line">esc 清空当前命令</span><br><span class="line">cls 清空终端</span><br></pre></td></tr></table></figure><h1 id="2-fs文件系统模块"><a href="#2-fs文件系统模块" class="headerlink" title="2.fs文件系统模块"></a>2.fs文件系统模块</h1><h3 id="2-1什么是文件系统模块"><a href="#2-1什么是文件系统模块" class="headerlink" title="2.1什么是文件系统模块"></a>2.1什么是文件系统模块</h3><p>fs模块是nodejs官方提供的，用于操作文件的模块。它提供了一系列的方法和属性，用来满足用户对文件操作的需求。</p><h3 id="2-2导入fs模块"><a href="#2-2导入fs模块" class="headerlink" title="2.2导入fs模块"></a>2.2导入fs模块</h3><p>在使用fs模块操作文件之前，需要使用如下的方式先导入它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-3读取指定文件中的内容fs-readFile"><a href="#2-3读取指定文件中的内容fs-readFile" class="headerlink" title="2.3读取指定文件中的内容fs.readFile()"></a>2.3读取指定文件中的内容fs.readFile()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(path[,options],callback)</span><br></pre></td></tr></table></figure><ul><li>参数1：必选参数，字符串，表示文件的路径</li><li>参数2：可选参数，字符串，以什么编码格式读取文件</li><li>参数3：必选参数，文件读取结束后，通过回调函数拿到读取结果</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./files/1.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,dataStr</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>err：读取失败的结果</li><li>dataStr：读取成功的结果</li><li>如果<strong>读取成功</strong>，则err的值为Null</li><li>如果<strong>读取失败</strong>，则err的值为错误对象，dataStr的值为undefined</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断文件是否读取成功</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./files/1.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,dataStr</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件读取失败&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件读取成功，内容是：&#x27;</span> + dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-4向指定文件写入内容fs-writeFile"><a href="#2-4向指定文件写入内容fs-writeFile" class="headerlink" title="2.4向指定文件写入内容fs.writeFile()"></a>2.4向指定文件写入内容fs.writeFile()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(path,data[,options],callback)</span><br></pre></td></tr></table></figure><ul><li>参数1：必选参数，字符串，文件的存放路径</li><li>参数2：必选参数，写入文件的内容</li><li>参数3：可选参数，以什么格式写入，默认utf8</li><li>参数4：必选参数，文件写入完成后的回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./files/1.txt&#x27;</span>,<span class="string">&#x27;你好，Node&#x27;</span>，<span class="string">&#x27;utf8&#x27;</span>,<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>如果文件写入成功，则err的值为Null</li><li>如果文件写入失败，则err的值为错误对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./files/1.txt&#x27;</span>,<span class="string">&#x27;你好，Node&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件写入失败&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件写入成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注：写入文件会覆盖之前文件的内容</strong></p><h1 id="3-path路径模块"><a href="#3-path路径模块" class="headerlink" title="3.path路径模块"></a>3.path路径模块</h1><h3 id="3-1什么是path路径模块"><a href="#3-1什么是path路径模块" class="headerlink" title="3.1什么是path路径模块"></a>3.1什么是path路径模块</h3><p>​path模块是node官方提供的，用来处理路径的模块，它提供了一系列的方法和属性，用来满足用户对路径的处理需求</p><h3 id="3-2导入path模块"><a href="#3-2导入path模块" class="headerlink" title="3.2导入path模块"></a>3.2导入path模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-3路径拼接path-join"><a href="#3-3路径拼接path-join" class="headerlink" title="3.3路径拼接path.join()"></a>3.3路径拼接path.join()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">join</span>([...paths])</span><br></pre></td></tr></table></figure><ul><li>参数：<string>路径片段序列</li><li>返回值：<string></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> pathStr = path.<span class="title function_">join</span>(<span class="string">&#x27;/a&#x27;</span>,<span class="string">&#x27;/b&#x27;</span>,<span class="string">&#x27;/c&#x27;</span>,<span class="string">&#x27;../&#x27;</span>,<span class="string">&#x27;./d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pathStr)</span><br><span class="line"><span class="comment">//  \a\b\d\e</span></span><br></pre></td></tr></table></figure><ul><li>..&#x2F;会抵消前面的一层路径</li><li>参数可以拼接任意的片段序列</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> pathStr = path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./files/1.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>__dirname表示文件所处的当前目录</li><li>涉及路径拼接的问题都要用join，不要用 “ + ”</li></ul><h3 id="3-4获取路径中的文件名path-basename"><a href="#3-4获取路径中的文件名path-basename" class="headerlink" title="3.4获取路径中的文件名path.basename()"></a>3.4获取路径中的文件名path.basename()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">basename</span>(path[,ext])</span><br></pre></td></tr></table></figure><ul><li>参数1：必选参数，表示一个路径的字符串</li><li>参数2：可选参数，表示文件的扩展名</li><li>返回值：路径的最后一部分</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;a/b/c/index.html&#x27;</span></span><br><span class="line"><span class="keyword">let</span> fullname = path.<span class="title function_">basename</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullname)<span class="comment">//index.html</span></span><br><span class="line"><span class="keyword">let</span> nameWithoutExt = path.<span class="title function_">basename</span>(fpath,<span class="string">&#x27;.html&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameWithoutExt)<span class="comment">//index</span></span><br></pre></td></tr></table></figure><h3 id="3-5获取路径中的文件扩展名path-extname"><a href="#3-5获取路径中的文件扩展名path-extname" class="headerlink" title="3.5获取路径中的文件扩展名path.extname()"></a>3.5获取路径中的文件扩展名path.extname()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">extname</span>(path)</span><br></pre></td></tr></table></figure><ul><li>参数1：路径的字符串</li><li>返回值：扩展名，字符串</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;a/b/c/index.html&#x27;</span></span><br><span class="line"><span class="keyword">let</span> fext = path.<span class="title function_">extname</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fext)<span class="comment">// .html</span></span><br></pre></td></tr></table></figure><h1 id="4-http模块"><a href="#4-http模块" class="headerlink" title="4.http模块"></a>4.http模块</h1><h3 id="4-1什么是http模块"><a href="#4-1什么是http模块" class="headerlink" title="4.1什么是http模块"></a>4.1什么是http模块</h3><p>​在网络节点中，负责对外<strong>提供</strong>网络资源的电脑叫<strong>服务器</strong>；负责<strong>消费</strong>资源的电脑叫<strong>客户端</strong></p><p>​http模块是Node.js提供的，用以创建Web服务器的模块，通过http.createServer()方法就可以把一台普通的电脑变成一台服务器，从而对外提供Web资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​电脑和服务器的区别在于，服务器上安装了Web服务器软件，如IIS,Apache等，通过这些服务器软件，可以把一台普通的电脑变成一台Web服务器。</p><p>​在 Node.js 中，我们不需要使用 IIS、Apache 等这些第三方 web 服务器软件。因为我们可以基于 Node.js 提供的http 模块，<strong>通过几行简单的代码，就能轻松的手写一个服务器软件</strong>，从而对外提供 web 服务。</p><h3 id="4-2服务器的相关概念"><a href="#4-2服务器的相关概念" class="headerlink" title="4.2服务器的相关概念"></a>4.2服务器的相关概念</h3><h5 id="4-2-1-IP地址"><a href="#4-2-1-IP地址" class="headerlink" title="4.2.1 IP地址"></a>4.2.1 IP地址</h5><p>​IP地址就是互联网上每台计算机的<strong>唯一</strong>地址。如果把“个人电脑”比作“一台电话”，那么“IP地址”就相当于“电话号码”，只有在知道对方 IP 地址的前提下，才能与对应的电脑之间进行数据通信。</p><p>​IP 地址的格式：通常用“点分十进制”表示成（a.b.c.d）的形式，其中，a,b,c,d 都是 0~255 之间的十进制整数。例如：（192.168.1.1）</p><ul><li><strong>互联网中每台 Web 服务器，都有自己的 IP 地址</strong>，例如：大家可以在 Windows 的终端中运行 ping <a class="link"   href="http://www.baidu.com/" >www.baidu.com<i class="fas fa-external-link-alt"></i></a> 命令，即可查看到百度服务器的 IP 地址。</li><li>在开发期间，自己的电脑既是一台服务器，也是一个客户端，为了方便测试，可以在自己的浏览器中输入 127.0.0.1 这个IP地址，就能把自己的电脑当做一台服务器进行访问。</li></ul><h5 id="4-2-2域名和域名服务器"><a href="#4-2-2域名和域名服务器" class="headerlink" title="4.2.2域名和域名服务器"></a>4.2.2域名和域名服务器</h5><p>​尽管 IP 地址能够唯一地标记网络上的计算机，但IP地址是一长串数字，不直观，而且不便于记忆，于是人们又发明了另一套<strong>字符型的地址方案</strong>，即所谓的<strong>域名（Domain Name）地址</strong>。 </p><p>​IP地址和域名是一一对应的关系，这份对应关系存放在一种叫做<strong>域名服务器</strong>(DNS，Domain name server)的电脑中。使用者 只需通过好记的域名访问对应的服务器即可，对应的转换工作由域名服务器实现。因此，<strong>域名服务器就是提供 IP 地址和域名之间的转换服务的服务器</strong>。 </p><ul><li>单纯使用 IP 地址，互联网中的电脑也能够正常工作。但是有了域名的加持，能让互联网的世界变得更加方便</li><li>在开发测试期间， 127.0.0.1 对应的域名是 localhost，它们都代表我们自己的这台电脑，在使用效果上没有任何区别</li></ul><h5 id="4-2-3端口号"><a href="#4-2-3端口号" class="headerlink" title="4.2.3端口号"></a>4.2.3端口号</h5><p>​在一台电脑中，可以运行成百上千个 web 服务。每个 web 服务都对应一个唯一的端口号。客户端发送过来的网络请求，通过端口号，可以被准确地交给对应的 web 服务进行处理。</p><ul><li>每个端口号不能同时被多个Web服务占用</li><li>在实际应用中，URL中的80端口可以被省略</li></ul><h3 id="4-3创建最基本的Web服务器"><a href="#4-3创建最基本的Web服务器" class="headerlink" title="4.3创建最基本的Web服务器"></a>4.3创建最基本的Web服务器</h3><h5 id="4-3-1实现步骤"><a href="#4-3-1实现步骤" class="headerlink" title="4.3.1实现步骤"></a>4.3.1实现步骤</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.导入http模块</span><br><span class="line">2.创建Web服务器实例，createServer()</span><br><span class="line">3.为服务器实例绑定request事件，监听客户端请求，server.on()</span><br><span class="line">4.启动服务器,server.listen()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="comment">//2.创建Web服务器实例，createServer()</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"><span class="comment">//3.为服务器实例绑定request事件，监听客户端请求，server.on()</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Someone visit our web server&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//4.启动服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1:80&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="4-3-2req请求对象"><a href="#4-3-2req请求对象" class="headerlink" title="4.3.2req请求对象"></a>4.3.2req请求对象</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="keyword">function</span>(<span class="params">req</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">`Your request url is <span class="subst">$&#123;req.url&#125;</span>, request method is <span class="subst">$&#123;req.method&#125;</span>`</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>req请求对象：只要服务器接收到了客户端的请求，就会调用通过server.on()为服务器绑定的事情处理函数。在事件处理函数中访问<strong>与客户端相关的数据和属性</strong></li><li>req是请求对象，包含了客户端相关的数据和属性，如：、</li><li>req.url:客户端请求的url地址(从端口号后面开始的)</li><li>req.method:客户端的method请求类型</li></ul><h5 id="4-3-3res响应对象"><a href="#4-3-3res响应对象" class="headerlink" title="4.3.3res响应对象"></a>4.3.3res响应对象</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">`Your request url is <span class="subst">$&#123;req.url&#125;</span>, request method is <span class="subst">$&#123;req.method&#125;</span>`</span></span><br><span class="line">    res.<span class="title function_">end</span>(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>str:要发送到客户端的数据</li><li>res.end()：向客户端发送指定内容，并结束这次请求的处理过程</li></ul><h5 id="4-3-4解决中文乱码问题"><a href="#4-3-4解决中文乱码问题" class="headerlink" title="4.3.4解决中文乱码问题"></a>4.3.4解决中文乱码问题</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">`你请求的url地址是<span class="subst">$&#123;req.url&#125;</span>, 请求的method类型为<span class="subst">$&#123;req.method&#125;</span>`</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Context-Type&#x27;</span>,<span class="string">&#x27;txt/html;charset=utf-8&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>为防止显示中文乱码问题，需要设置响应头  Context-Type  的值为   txt&#x2F;html;charset&#x3D;utf-8</li></ul><h3 id="4-4根据不同的url响应不同的html内容"><a href="#4-4根据不同的url响应不同的html内容" class="headerlink" title="4.4根据不同的url响应不同的html内容"></a>4.4根据不同的url响应不同的html内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.获取请求的URL地址</span><br><span class="line">2.设置默认的响应内容为  404 NOT FOUND</span><br><span class="line">3.判断用户请求的是否为 / 或 /index.html 首页</span><br><span class="line">4.判断用户请求的是否为 /about.html 关于页面</span><br><span class="line">5.设置 Content-Type 响应头，防止中文乱码</span><br><span class="line">6.使用 res.end() 把内容响应给客户端</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> url = req.<span class="property">url</span></span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">&#x27;&lt;h1&gt;404 NOT FOUND&lt;/h1&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>(url === <span class="string">&#x27;/&#x27;</span> || url ===<span class="string">&#x27;/index.html&#x27;</span>)&#123;</span><br><span class="line">        content = <span class="string">&#x27;&lt;h1&gt;首页&lt;/h1&gt;&#x27;</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(url === <span class="string">&#x27;/about.html&#x27;</span>)&#123;</span><br><span class="line">        content = <span class="string">&#x27;&lt;h1&gt;关于页面&lt;/h1&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(content)</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="5-模块化的基本概念"><a href="#5-模块化的基本概念" class="headerlink" title="5.模块化的基本概念"></a>5.模块化的基本概念</h1><h3 id="5-1什么是模块化"><a href="#5-1什么是模块化" class="headerlink" title="5.1什么是模块化"></a>5.1什么是模块化</h3><p>​<strong>模块化</strong>是指解决一个复杂问题时，自顶向下逐层把系统划分成若干模块的过程。对于整个系统来说，模块是可组合、分解和更换的单元</p><p>​编程领域中的<strong>模块化</strong>，就是<strong>遵守固定的规则</strong>，把一个大文件拆成独立并互相依赖的多个小模块</p><ul><li>提高了代码的<strong>复用性</strong></li><li>提高了代码的<strong>可维护性</strong></li><li>可以实现<strong>按需加载</strong></li></ul><h3 id="5-2什么是模块化规范"><a href="#5-2什么是模块化规范" class="headerlink" title="5.2什么是模块化规范"></a>5.2什么是模块化规范</h3><p><strong>模块化规范</strong>就是对代码进行模块化的拆分与组合时，需要遵守的那些规则。</p><ul><li>使用什么样的语法格式来引用模块</li><li>在模块中使用什么样的语法格式向外暴露成员</li></ul><p><strong>模块化规范的好处</strong>：大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用， 利人利己</p><h1 id="6-Node-js中的模块化"><a href="#6-Node-js中的模块化" class="headerlink" title="6.Node.js中的模块化"></a>6.Node.js中的模块化</h1><h3 id="6-1Node-js中的模块分类"><a href="#6-1Node-js中的模块分类" class="headerlink" title="6.1Node.js中的模块分类"></a>6.1Node.js中的模块分类</h3><ul><li>内置模块：内置模块是由 Node.js 官方提供的，例如 fs、path、http 等</li><li>自定义模块：用户创建的每个 .js 文件，都是自定义模块</li><li>第三方模块(包)：由第三方开发出来的模块，使用前需要先下载</li></ul><h3 id="6-2加载模块"><a href="#6-2加载模块" class="headerlink" title="6.2加载模块"></a>6.2加载模块</h3><p>使用强大的<strong>require() 方法</strong>，可以加载需要的内置模块、用户自定义模块、第三方模块进行使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内置模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//自定义模块</span></span><br><span class="line"><span class="keyword">const</span> custom = <span class="built_in">require</span>(<span class="string">&#x27;./custom.js&#x27;</span>)<span class="comment">//可以省略.js后缀名</span></span><br><span class="line"><span class="comment">//第三方模块</span></span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>注：使用require()方法加载其他模块时，会执行被加载模块中的代码</strong></p><h3 id="6-3模块作用域"><a href="#6-3模块作用域" class="headerlink" title="6.3模块作用域"></a>6.3模块作用域</h3><p>与函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做<strong>模块作用域</strong></p><ul><li>可以防止全局变量污染的问题</li></ul><h3 id="6-4向外共享模块作用域成员"><a href="#6-4向外共享模块作用域成员" class="headerlink" title="6.4向外共享模块作用域成员"></a>6.4向外共享模块作用域成员</h3><h5 id="6-4-1module对象"><a href="#6-4-1module对象" class="headerlink" title="6.4.1module对象"></a>6.4.1module对象</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>)</span><br></pre></td></tr></table></figure><p>在每个 .js 自定义模块中都有一个 module 对象，它里面存储了<strong>和当前模块有关的信息</strong></p><h5 id="6-4-2module-exports"><a href="#6-4-2module-exports" class="headerlink" title="6.4.2module.exports"></a>6.4.2module.exports</h5><ul><li>在自定义模块中，可以使用 module.exports 对象，将模块内的成员共享出去，供外界使用。</li><li>外界用 require() 方法导入自定义模块时，得到的就是 module.exports 所指向的对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modele.<span class="property">exports</span>.<span class="property">name</span> = <span class="string">&#x27;zhangsan&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="6-4-3exports"><a href="#6-4-3exports" class="headerlink" title="6.4.3exports"></a>6.4.3exports</h5><p>​由于 module.exports 单词写起来比较复杂，为了简化向外共享成员的代码，Node 提供了 exports 对象。默认情况下，<strong>exports 和 module.exports 指向同一个对象</strong></p><p>​<strong>注：require()模块时，得到的永远是module.exports指向的对象</strong>，为了防止混乱，建议不要在同一个模块中同时使用module.exports和exports</p><h3 id="6-5模块化规范"><a href="#6-5模块化规范" class="headerlink" title="6.5模块化规范"></a>6.5模块化规范</h3><p>Node.js 遵循了 CommonJS 模块化规范，CommonJS 规定了<strong>模块的特性和各模块之间如何相互依赖</strong></p><ul><li>每个模块内部，module 变量代表当前模块</li><li>module 变量是一个对象，它的 exports 属性（即 module.exports）是对外的接口</li><li>加载某个模块，其实是加载该模块的 module.exports 属性。require() 方法用于加载模块</li></ul><h1 id="7-npm与包"><a href="#7-npm与包" class="headerlink" title="7.npm与包"></a>7.npm与包</h1><h3 id="7-1包"><a href="#7-1包" class="headerlink" title="7.1包"></a>7.1包</h3><h5 id="7-1-1什么是包？"><a href="#7-1-1什么是包？" class="headerlink" title="7.1.1什么是包？"></a>7.1.1什么是包？</h5><p>​Node.js的第三方模块，也叫<strong>包</strong></p><h5 id="7-1-2为什么需要包？"><a href="#7-1-2为什么需要包？" class="headerlink" title="7.1.2为什么需要包？"></a>7.1.2为什么需要包？</h5><p>​包是基于内置模块封装出来的，提供更加方便、更加高级的API</p><h5 id="7-1-3下载包"><a href="#7-1-3下载包" class="headerlink" title="7.1.3下载包"></a>7.1.3下载包</h5><ul><li>从 <a class="link"   href="https://www.npmjs.com/" >https://www.npmjs.com/<i class="fas fa-external-link-alt"></i></a> 网站上<strong>搜索</strong>自己所需要的包</li><li>从 <a class="link"   href="https://registry.npmjs.org/" >https://registry.npmjs.org/<i class="fas fa-external-link-alt"></i></a> 服务器上<strong>下载</strong>自己需要的包</li></ul><h5 id="7-1-4包的管理工具npm"><a href="#7-1-4包的管理工具npm" class="headerlink" title="7.1.4包的管理工具npm"></a>7.1.4包的管理工具npm</h5><p>​**Node Package Manager(npm)**可以从 <a class="link"   href="https://registry.npmjs.org/%E6%8A%8A%E9%9C%80%E8%A6%81%E7%9A%84%E5%8C%85%E4%B8%8B%E8%BD%BD%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BD%BF%E7%94%A8%EF%BC%8Cnpm%E9%9A%8F%E7%9D%80Node.js%E7%9A%84%E5%AE%89%E8%A3%85%E8%A2%AB%E4%B8%80%E8%B5%B7%E5%AE%89%E8%A3%85%E5%88%B0%E7%94%B5%E8%84%91%E4%B8%8A" >https://registry.npmjs.org/把需要的包下载到本地使用，npm随着Node.js的安装被一起安装到电脑上<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看电脑上安装的npm包管理工具的版本号</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h3 id="7-2安装包"><a href="#7-2安装包" class="headerlink" title="7.2安装包"></a>7.2安装包</h3><h5 id="7-2-1在项目中安装包"><a href="#7-2-1在项目中安装包" class="headerlink" title="7.2.1在项目中安装包"></a>7.2.1在项目中安装包</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install 包的完整名称</span><br><span class="line">npm i 包的完整名称      简写</span><br><span class="line">npm i moment@2.22.2     安装指定版本</span><br></pre></td></tr></table></figure><h5 id="7-2-2初次安装后多的文件"><a href="#7-2-2初次安装后多的文件" class="headerlink" title="7.2.2初次安装后多的文件"></a>7.2.2初次安装后多的文件</h5><ul><li>node_modules文件夹：存放所有已安装到项目中的包，导入包时，就是从这个文件夹中查找并导入</li><li>package_lock.json文件：记录node_modules目录下每个包的下载信息（名字、版本号、下载地址等）</li></ul><p><strong>注：以上文件不要使用，npm会自动维护他们</strong></p><h5 id="7-2-3包的语义化版本规范"><a href="#7-2-3包的语义化版本规范" class="headerlink" title="7.2.3包的语义化版本规范"></a>7.2.3包的语义化版本规范</h5><p>​包的版本号是以“点分十进制”进行定义的，共有3位数，如2.24.0</p><ul><li><p>第一位：大版本号</p></li><li><p>第二位：功能版本</p></li><li><p>第三位：Bug修复版本</p><p><strong>只要前面的版本号增加，后面的版本号归0</strong></p></li></ul><h3 id="7-3包的管理配置文件"><a href="#7-3包的管理配置文件" class="headerlink" title="7.3包的管理配置文件"></a>7.3包的管理配置文件</h3><p>​npm规定，在项目的根目录中，必须提供一个叫package.json的管理配置文件，用以记录与项目有关的一些配置信息，如：</p><ul><li>项目的名称、版本号、描述等</li><li>项目中用到了哪些包</li><li>哪些包只在开发期间会用到（<strong>devDependencies</strong>）</li><li>哪些包在开发和部署期间都会用到（<strong>dependencies</strong>）</li></ul><h5 id="7-3-1多人协作问题"><a href="#7-3-1多人协作问题" class="headerlink" title="7.3.1多人协作问题"></a>7.3.1多人协作问题</h5><p>​由于第三方包体积过大，不方便团队成员之间共享项目源代码，建议在共享的时候删除node_modules文件夹</p><h5 id="7-3-2记录项目中安装了哪些包"><a href="#7-3-2记录项目中安装了哪些包" class="headerlink" title="7.3.2记录项目中安装了哪些包"></a>7.3.2记录项目中安装了哪些包</h5><p>​在项目的根目录中，创建一个叫<strong>package.json</strong>的配置文件，用来记录项目中安装了哪些包，从而方便剔除node_modules后，在团队成员之间共享项目源代码</p><p>​<strong>注：在开发中一定要把node_modules文件夹添加到.gitignore忽略文件中</strong></p><h5 id="7-3-3快速创建package-json"><a href="#7-3-3快速创建package-json" class="headerlink" title="7.3.3快速创建package.json"></a>7.3.3快速创建package.json</h5><p>​在项目文件夹创建之初，写代码之前，先快速创建package.json这个包管理配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><ul><li>必须在<strong>英文</strong>目录下，且不可以包含<strong>空格</strong></li><li>运行 npm install 命令安装包时，npm管理工具会自动把包的名称和版本号记录到package.json文件中</li></ul><h5 id="7-3-4dependencies节点"><a href="#7-3-4dependencies节点" class="headerlink" title="7.3.4dependencies节点"></a>7.3.4dependencies节点</h5><p>​在package.json中，dependencies节点会专门记录你用npm -i 命令安装了哪些包</p><h5 id="7-3-5devDependencies节点"><a href="#7-3-5devDependencies节点" class="headerlink" title="7.3.5devDependencies节点"></a>7.3.5devDependencies节点</h5><ul><li>包在开发和上线后都用得到，记录到<strong>dependencies节点</strong></li><li>包只在开发时用得到，记录到<strong>devDependencies节点</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i 包名 -D简写，安装指定的包并记录到devDependencies节点</span><br><span class="line">npm install 包名 --save-dev全写</span><br></pre></td></tr></table></figure><h5 id="7-3-6一次性安装所有的包"><a href="#7-3-6一次性安装所有的包" class="headerlink" title="7.3.6一次性安装所有的包"></a>7.3.6一次性安装所有的包</h5><p>​当我们删除node_modules文件夹后，需要把所有的包下载到项目中，否则会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i一次性安装所有的包</span><br></pre></td></tr></table></figure><h5 id="7-3-7卸载包"><a href="#7-3-7卸载包" class="headerlink" title="7.3.7卸载包"></a>7.3.7卸载包</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall 包名</span><br></pre></td></tr></table></figure><p><strong>执行成功后，会把卸载的包自动从package.json的dependicies中移除掉</strong></p><h3 id="7-4解决下包速度慢的问题"><a href="#7-4解决下包速度慢的问题" class="headerlink" title="7.4解决下包速度慢的问题"></a>7.4解决下包速度慢的问题</h3><h5 id="7-4-1为什么速度慢？"><a href="#7-4-1为什么速度慢？" class="headerlink" title="7.4.1为什么速度慢？"></a>7.4.1为什么速度慢？</h5><p>​在使用npm下包时，默认用国外的<a class="link"   href="https://registry.npmjs.org服务器,网络数据的传输需要经过漫长的海底光缆,因此下包的速度会很慢/" >https://registry.npmjs.org服务器，网络数据的传输需要经过漫长的海底光缆，因此下包的速度会很慢<i class="fas fa-external-link-alt"></i></a></p><h5 id="7-4-2淘宝的镜像服务器"><a href="#7-4-2淘宝的镜像服务器" class="headerlink" title="7.4.2淘宝的镜像服务器"></a>7.4.2淘宝的镜像服务器</h5><p>​淘宝在国内搭建了一个服务器，会定期把国外官方服务器的包同步到国内服务器，极大提高了下载速度</p><p>​<strong>镜像（Mirroring）</strong>是一种文件存储形式，一个磁盘上的数据在另一个磁盘上存在完全相同的副本就是镜像</p><h5 id="7-4-3切换npm下包镜像源"><a href="#7-4-3切换npm下包镜像源" class="headerlink" title="7.4.3切换npm下包镜像源"></a>7.4.3切换npm下包镜像源</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查看当前下包的地址</span><br><span class="line">npm config get registry</span><br><span class="line">将下包的地址切换为淘宝镜像源</span><br><span class="line">npm config set registry=https://registry.npm.taobao.org</span><br><span class="line">查看切换是否成功</span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><h5 id="7-4-4nrm"><a href="#7-4-4nrm" class="headerlink" title="7.4.4nrm"></a>7.4.4nrm</h5><p>​为了更方便的切换下包的镜像源，可以安装nrm，快速查看和切换镜像源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">通过npm安装nrm为全局可用工具</span><br><span class="line">npm i nrm -g</span><br><span class="line">查看可用源</span><br><span class="line">nrm ls</span><br><span class="line">切换镜像源</span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure><h3 id="7-5包的分类"><a href="#7-5包的分类" class="headerlink" title="7.5包的分类"></a>7.5包的分类</h3><h5 id="7-5-1项目包"><a href="#7-5-1项目包" class="headerlink" title="7.5.1项目包"></a>7.5.1项目包</h5><p>​被安装到node_modules中的包都是项目包，项目包又分为两类</p><ul><li>开发依赖包：devDependencies节点中记录的     npm -i name -D</li><li>核心依赖包：dependencies节点中记录的            npm -i name</li></ul><h5 id="7-5-2全局包"><a href="#7-5-2全局包" class="headerlink" title="7.5.2全局包"></a>7.5.2全局包</h5><p>​在执行npm install时，若提供 -g 参数，则会安装为全局包<br>并且安装在C:\Users\用户\Appdata\Roming\npm\node_modules中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i 包名 -g全局安装指定包</span><br><span class="line">npm uninstall 包名 -g卸载指定全局包</span><br></pre></td></tr></table></figure><ul><li>只有工具性质的包才具有全局安装的必要性，因为它提供了全局命令供使用</li><li>参考包的官方文档说明，判断是否需要全局安装</li></ul><h5 id="7-5-3-i5ting-toc"><a href="#7-5-3-i5ting-toc" class="headerlink" title="7.5.3 i5ting_toc"></a>7.5.3 i5ting_toc</h5><p>​i5ting_toc可以把md文档转换为html页面的工具，使用步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将i5ting_toc安装为全局包</span><br><span class="line">npm i i5ting_toc -g</span><br><span class="line">实现md转html</span><br><span class="line">i5ting_toc -f 要转md的完整路径 -o</span><br></pre></td></tr></table></figure><h3 id="7-6规范包的结构"><a href="#7-6规范包的结构" class="headerlink" title="7.6规范包的结构"></a>7.6规范包的结构</h3><ul><li>包必须以单独的目录存在</li><li>包的顶级目录下必须包含package.json这个管理配置文件</li><li>package.json必须包含name,version,main三个属性，代表包名，版本号，入口</li></ul><h3 id="7-7开发属于自己的包"><a href="#7-7开发属于自己的包" class="headerlink" title="7.7开发属于自己的包"></a>7.7开发属于自己的包</h3><h5 id="7-7-1初始化包的基本结构"><a href="#7-7-1初始化包的基本结构" class="headerlink" title="7.7.1初始化包的基本结构"></a>7.7.1初始化包的基本结构</h5><ul><li>新建tools文件夹，作为根目录</li><li>在tools文件夹中新建：<ul><li>package.json配置文件</li><li>index.js入口文件</li><li>README.md说明文档</li></ul></li></ul><h5 id="7-7-2package-json配置文件"><a href="#7-7-2package-json配置文件" class="headerlink" title="7.7.2package.json配置文件"></a>7.7.2package.json配置文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:&quot;eddie_tools&quot; ,包名，不能重复，设置前先检索有没有</span><br><span class="line">    &quot;version&quot;:&quot;1.0.0&quot;,版本号</span><br><span class="line">    &quot;main&quot;: &quot;./index.js&quot;,入口文件</span><br><span class="line">    &quot;description&quot;: &quot;提供了*******相关的功能&quot;,   简短的描述信息</span><br><span class="line">    &quot;keywords&quot;: [&quot;cyd&quot;,&quot;dateFormat&quot;,&quot;escape&quot;],搜索的关键词</span><br><span class="line">    &quot;license&quot;: &quot;ISC&quot;开源许可协议</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-7-3将不同的功能模块拆分"><a href="#7-7-3将不同的功能模块拆分" class="headerlink" title="7.7.3将不同的功能模块拆分"></a>7.7.3将不同的功能模块拆分</h5><ol><li>A功能拆到.&#x2F;src&#x2F;A.js中，并暴露出去</li><li>B功能拆到.&#x2F;src&#x2F;B.js中，并暴露出去</li><li>index.js先require()导入AB讲个js文件，再分别暴露出去</li></ol><h5 id="7-7-4撰写说明文档"><a href="#7-7-4撰写说明文档" class="headerlink" title="7.7.4撰写说明文档"></a>7.7.4撰写说明文档</h5><h3 id="7-8模块的加载机制"><a href="#7-8模块的加载机制" class="headerlink" title="7.8模块的加载机制"></a>7.8模块的加载机制</h3><h5 id="7-8-1优先从缓存中加载"><a href="#7-8-1优先从缓存中加载" class="headerlink" title="7.8.1优先从缓存中加载"></a>7.8.1优先从缓存中加载</h5><p>​<strong>模块在第一次加载后会被缓存</strong>。 这也意味着多次调用 require() 不会导致模块的代码被执行多次。</p><p>​<strong>注意：不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率</strong></p><h5 id="7-8-2-内置模块的加载机制"><a href="#7-8-2-内置模块的加载机制" class="headerlink" title="7.8.2 内置模块的加载机制"></a>7.8.2 内置模块的加载机制</h5><p>​内置模块是由 Node.js 官方提供的模块，内置模块的加载优先级最高。<br>​例如，require(‘fs’) 始终返回内置的 fs 模块，即使在 node_modules 目录下有名字相同的包也叫做 fs</p><h5 id="7-8-3自定义模块的加载机制"><a href="#7-8-3自定义模块的加载机制" class="headerlink" title="7.8.3自定义模块的加载机制"></a>7.8.3自定义模块的加载机制</h5><p>​使用 require() 加载自定义模块时，必须指定以 .&#x2F; 或 ..&#x2F; 开头的路径标识符。在加载自定义模块时，如果没有指定 .&#x2F; 或 ..&#x2F;  这样的路径标识符，则 node 会把它当作内置模块或第三方模块进行加载</p><p>​同时，在使用 require() 导入自定义模块时，如果省略了文件的扩展名，则 Node.js 会按顺序分别尝试加载以下的文件：</p><ol><li>按照确切的文件名进行加载</li><li>补全 .js 扩展名进行加载</li><li>补全 .json 扩展名进行加载</li><li>补全 .node 扩展名进行加载</li><li>加载失败，终端报错</li></ol><h5 id="7-8-4第三方模块的加载机制"><a href="#7-8-4第三方模块的加载机制" class="headerlink" title="7.8.4第三方模块的加载机制"></a>7.8.4第三方模块的加载机制</h5><p>​如果传递给 require() 的模块标识符不是一个内置模块，也没有以 ‘.&#x2F;’ 或 ‘..&#x2F;’ 开头，则 Node.js 会从当前模块的父目录开始，尝试从 &#x2F;node_modules 文件夹中加载第三方模块。</p><p>​<strong>如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录</strong></p><p>例如，假设在 ‘C:\Users\project\foo.js’ 文件里调用了 require(‘tools’)，则 Node.js 会按以下顺序查找： </p><p>① C:\Users\project\node_modules\tools </p><p>② C:\Users\node_modules\tools </p><p>③ C:\node_modules\tools </p><h5 id="7-8-5目录作为模块"><a href="#7-8-5目录作为模块" class="headerlink" title="7.8.5目录作为模块"></a>7.8.5目录作为模块</h5><p>​当把目录作为模块标识符，传递给 require() 进行加载的时候，有三种加载方式： </p><p>① 在被加载的目录下查找一个叫做 package.json 的文件，并寻找 main 属性，作为 require() 加载的入口 </p><p>② 如果目录里没有 package.json 文件，或者 main 入口不存在或无法解析，则 Node.js 将会试图加载目录下的 index.js 文件。 </p><p>③ 如果以上两步都失败了，则 Node.js 会在终端打印错误消息</p><h1 id="8-Express"><a href="#8-Express" class="headerlink" title="8.Express"></a>8.Express</h1><h3 id="8-1Express简介"><a href="#8-1Express简介" class="headerlink" title="8.1Express简介"></a>8.1Express简介</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">什么是Express？</span><br><span class="line">官方：基于Node.js平台，快速、极简、开放的WEB开发框架</span><br><span class="line">通俗：本质上和http模块类似，用于创建WEB服务器，是npm上的第三方包</span><br><span class="line">http://www.expressjs.com.cn/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进一步理解</span><br><span class="line">由于http模块用起来复杂，Express是基于Node内置的http模块进一步封装出来的，提高开发效率</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Express可以做什么？</span><br><span class="line">使用 Express，我们可以方便、快速的创建 Web网站的服务器 或 API接口的服务器</span><br><span class="line">Web 网站服务器：专门对外提供 Web 网页资源的服务器</span><br><span class="line">API 接口服务器：专门对外提供 API 接口的服务器</span><br></pre></td></tr></table></figure><h3 id="8-2Express的基本使用"><a href="#8-2Express的基本使用" class="headerlink" title="8.2Express的基本使用"></a>8.2Express的基本使用</h3><h5 id="8-2-1安装express"><a href="#8-2-1安装express" class="headerlink" title="8.2.1安装express"></a><strong>8.2.1安装express</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express@4.17.1</span><br></pre></td></tr></table></figure><h5 id="8-2-2创建基本的WEB服务器"><a href="#8-2-2创建基本的WEB服务器" class="headerlink" title="8.2.2创建基本的WEB服务器"></a><strong>8.2.2创建基本的WEB服务器</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//2.创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//3.调用app.listen()启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="8-2-3监听GET请求、POST请求，把内容响应给客户端"><a href="#8-2-3监听GET请求、POST请求，把内容响应给客户端" class="headerlink" title="8.2.3监听GET请求、POST请求，把内容响应给客户端"></a><strong>8.2.3监听GET请求、POST请求</strong>，把内容响应给客户端</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//2.创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.监听客户端的get和Post请求,并向客户端响应内容res.send()</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;请求成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.调用app.listen()启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>参数1：客户端请求的URL地址</li><li>参数2：请求对应的事件处理函数<ul><li>req：请求对象（包含与请求相关的属性、方法）</li><li>res：响应对象（包含与响应相关的属性、方法）</li></ul></li></ul><p><strong>通过 res.send() 方法，可以把处理好的内容发送给客户端</strong></p><h5 id="8-2-4获取URL中携带的查询参数"><a href="#8-2-4获取URL中携带的查询参数" class="headerlink" title="8.2.4获取URL中携带的查询参数"></a>8.2.4获取URL中携带的查询参数</h5><p>​通过 <strong>req.query</strong> 对象，可以访问到   客户端通过<strong>查询字符串</strong>的形式发送到服务器的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//2.创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//4.获取URL中携带的查询参数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//3.调用app.listen()启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>req.query默认是一个空对象</li><li>客户端使用 ？name&#x3D;zs&amp;age&#x3D;18 这种<strong>查询字符串</strong>的形式发送到服务器的参数，可以通过<strong>req.query</strong>访问到</li></ul><h5 id="8-2-5获取URL中的动态参数"><a href="#8-2-5获取URL中的动态参数" class="headerlink" title="8.2.5获取URL中的动态参数"></a>8.2.5获取URL中的动态参数</h5><p>​通过 <strong>req.params</strong> 对象，可以访问到 URL 中，通过 <strong>：</strong>匹配到的动态参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//2.创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取URL中的动态参数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id/:name&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;<span class="comment">//可以同时匹配两个参数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">params</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//3.调用app.listen()启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="8-3托管静态资源"><a href="#8-3托管静态资源" class="headerlink" title="8.3托管静态资源"></a>8.3托管静态资源</h3><h5 id="8-3-1express-static"><a href="#8-3-1express-static" class="headerlink" title="8.3.1express.static()"></a>8.3.1express.static()</h5><p>​通过express.static()，我们可以非常方便地创建一个静态资源服务器。例如，通过如下代码就可以将 node_modules 目录下的图片、CSS 文件、JavaScript 文件对外开放访问了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//express.static()</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;node_modules&#x27;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express serve running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​现在，你就可以访问 node_modules目录中的所有文件了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/image.jpg</span><br></pre></td></tr></table></figure><ul><li>Express 在<strong>指定的静态目录</strong>中查找文件，并对外提供资源的访问路径。 因此，<strong>存放静态文件的目录名不会出现在 URL 中</strong>。</li></ul><h5 id="8-3-2托管多个静态资源目录"><a href="#8-3-2托管多个静态资源目录" class="headerlink" title="8.3.2托管多个静态资源目录"></a>8.3.2托管多个静态资源目录</h5><p>​如果要托管多个静态资源目录，请多次调用 express.static() 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;node_modules&#x27;</span>))</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;files&#x27;</span>))</span><br></pre></td></tr></table></figure><p>​<strong>访问静态资源文件时，express.static() 函数会根据目录的添加顺序查找所需的文件</strong></p><h5 id="8-3-3挂在路径前缀"><a href="#8-3-3挂在路径前缀" class="headerlink" title="8.3.3挂在路径前缀"></a>8.3.3挂在路径前缀</h5><p>​如果希望在托管的静态资源访问路径之前，<strong>挂载路径前缀</strong>，则可以使用如下的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/node_modules&#x27;</span>,express.<span class="title function_">static</span>(<span class="string">&#x27;node_modules&#x27;</span>))</span><br></pre></td></tr></table></figure><p>​现在，你就可以通过带有 <strong>&#x2F;node_modules</strong>前缀地址来访问 node_modules 目录中的文件了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/node_modules/image.jpg</span><br></pre></td></tr></table></figure><h5 id="8-3-4nodemon"><a href="#8-3-4nodemon" class="headerlink" title="8.3.4nodemon"></a>8.3.4nodemon</h5><p>​在编写调试 Node.js 项目的时候，修改代码后需要频繁的手动 close 掉，然后再重新启动，非常繁琐。</p><p><strong>nodemon</strong>可以监听文件的变动，自动帮我们重启项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">安装</span><br><span class="line">npm i nodemon</span><br><span class="line">使用</span><br><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure><h3 id="8-4Express路由"><a href="#8-4Express路由" class="headerlink" title="8.4Express路由"></a>8.4Express路由</h3><h5 id="8-4-1路由"><a href="#8-4-1路由" class="headerlink" title="8.4.1路由"></a>8.4.1路由</h5><h6 id="1-路由的概念"><a href="#1-路由的概念" class="headerlink" title="1.路由的概念"></a><strong>1.路由的概念</strong></h6><p>​广义上，路由就是<strong>映射关系</strong>。</p><p>​在Express里，路由指的是<strong>客户端的请求</strong>与<strong>服务器处理函数</strong>之间的映射关系。</p><p>​Express中的路由以3部分组成：<strong>请求类型</strong>、<strong>URL地址</strong>、<strong>处理函数</strong></p><h6 id="2-路由的匹配过程"><a href="#2-路由的匹配过程" class="headerlink" title="2.路由的匹配过程"></a><strong>2.路由的匹配过程</strong></h6><p>每当一个请求到达服务器之后，需要<strong>先经过路由的匹配</strong>，只有匹配成功之后，才会调用对应的处理函数。</p><p>在匹配时，会按照路由的顺序进行匹配，如果<strong>请求类型</strong>和<strong>请求的 URL</strong> 同时匹配成功，则 Express 会将这次请求，转交给对应的 function 函数进行处理。</p><ul><li>按照定义的先后顺序进行匹配</li><li>请求类型和请求的URL同时匹配成功，才会调用对应的处理函数</li></ul><h5 id="8-4-2路由的使用"><a href="#8-4-2路由的使用" class="headerlink" title="8.4.2路由的使用"></a>8.4.2路由的使用</h5><p>​最简单的用法：直接挂载到app上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><p>​<strong>模块化路由：</strong></p><p>​为了方便对路由进行模块化的管理，Express <strong>不建议</strong>将路由直接挂载到 app 上，而是推荐将路由<strong>抽离为单独的模块</strong>。步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.创建路由模块对应的 .js 文件</span><br><span class="line">2.调用 express.Router() 函数创建路由对象</span><br><span class="line">3.向路由对象上挂载具体的路由</span><br><span class="line">4.使用 module.exports 向外共享路由对象</span><br><span class="line">5.使用 app.use() 函数注册路由模块</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路由模块</span></span><br><span class="line"><span class="comment">//1.导入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//2.创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"><span class="comment">//3.挂在具体的路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/list&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Get user list&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/user/add&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Add new user&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//4.向外暴露路由对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./06router.js&#x27;</span>)</span><br><span class="line"><span class="comment">//2.注册路由模块</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="8-4-3Express中间件"><a href="#8-4-3Express中间件" class="headerlink" title="8.4.3Express中间件"></a>8.4.3Express中间件</h5><h6 id="1-概念："><a href="#1-概念：" class="headerlink" title="1.概念："></a><strong>1.概念：</strong></h6><p>​中间件（Middleware ），特指业务流程的中间处理环节</p><h6 id="2-Express-中间件的调用流程："><a href="#2-Express-中间件的调用流程：" class="headerlink" title="2.Express 中间件的调用流程："></a><strong>2.Express 中间件的调用流程：</strong></h6><p>​当一个请求到达 Express 的服务器之后，可以连续调用多个中间件，从而对这次请求进行预处理。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E4%B8%AD%E9%97%B4%E4%BB%B61.png"                      alt="中间件1"                ></p><h6 id="3-中间件的格式"><a href="#3-中间件的格式" class="headerlink" title="3.中间件的格式:"></a><strong>3.中间件的格式:</strong></h6><p>​Express 的中间件，本质上就是一个 <strong>function 处理函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>中间件</strong>函数的形参列表中，必须包含 **next **参数</li><li>路由处理函数中只包含 req 和 res</li><li><strong>next 函数</strong>是实现多个中间件连续调用的关键，它表示把流转关系转交给<strong>下一个中间件或路由</strong></li></ul><h5 id="8-4-4中间件的使用"><a href="#8-4-4中间件的使用" class="headerlink" title="8.4.4中间件的使用"></a>8.4.4中间件的使用</h5><h6 id="1-定义中间件函数"><a href="#1-定义中间件函数" class="headerlink" title="1.定义中间件函数"></a><strong>1.定义中间件函数</strong></h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mw = <span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个最简单的中间件函数&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-全局生效的中间件"><a href="#2-全局生效的中间件" class="headerlink" title="2.全局生效的中间件"></a><strong>2.全局生效的中间件</strong></h6><p>​客户端发起的<strong>任何请求</strong>，到达服务器之后<strong>都会触发的中间件</strong>，叫做<strong>全局生效的中间件</strong>。 通过调用 **app.use()**，即可定义一个全局生效的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mw = <span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个最简单的中间件函数&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">app.<span class="title function_">use</span>(mw)</span><br></pre></td></tr></table></figure><h6 id="3-全局中间件的简化形式"><a href="#3-全局中间件的简化形式" class="headerlink" title="3.全局中间件的简化形式"></a><strong>3.全局中间件的简化形式</strong></h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个最简单的中间件&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="4-中间件的作用"><a href="#4-中间件的作用" class="headerlink" title="4.中间件的作用"></a><strong>4.中间件的作用</strong></h6><p>​多个中间件之间，<strong>共享同一份</strong> <strong>req</strong> <strong>和</strong> <strong>res</strong>。基于这样的特性，我们可以<strong>在上游的中间件</strong>中，统一为 req 或 res 对象添加自定义的属性或方法，供<strong>下游的中间件或路由</strong>进行使用。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E4%B8%AD%E9%97%B4%E4%BB%B62.png"                      alt="中间件2"                ></p><h6 id="5-定义多个全局中间件："><a href="#5-定义多个全局中间件：" class="headerlink" title="5.定义多个全局中间件："></a><strong>5.定义多个全局中间件：</strong></h6><p>​可以使用 <strong>app.use()</strong>   <strong>连续定义多个全局中间件</strong>。客户端请求到达服务器之后，会按照中间件<strong>定义的先后顺序</strong>依次进行调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第1个全局中间件&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第2个全局中间件&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第3个全局中间件&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="6-局部中间件"><a href="#6-局部中间件" class="headerlink" title="6.局部中间件"></a><strong>6.局部中间件</strong></h6><p>​<strong>不使用</strong> app.use() 定义的中间件，叫做<strong>局部生效的中间件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义中间件函数mw1</span></span><br><span class="line"><span class="keyword">const</span> mw1 = <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;jubuzhongjianjian&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//mw1只在当前路由生效，局部生效的中间件</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,mw1, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;HOME PAGE+&#x27;</span> )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//mw不会影响下面这个路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/s&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27; PAGE&#x27;</span> )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="7-定义多个局部生效的中间件"><a href="#7-定义多个局部生效的中间件" class="headerlink" title="7.定义多个局部生效的中间件"></a><strong>7.定义多个局部生效的中间件</strong></h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,mw1,mw2, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;res.<span class="title function_">send</span>(<span class="string">&#x27;HOME PAGE+&#x27;</span>)&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,[mw1,mw2], <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;res.<span class="title function_">send</span>(<span class="string">&#x27;HOME PAGE+&#x27;</span>)&#125;)</span><br></pre></td></tr></table></figure><h6 id="8-中间件的注意点"><a href="#8-中间件的注意点" class="headerlink" title="8.中间件的注意点"></a>8.中间件的注意点</h6><ul><li>一定要在路由之前注册中间件</li><li>客户端发送过来的请求，可以连续调用多个中间件进行处理</li><li>执行完中间件的业务代码之后，不要忘记调用 next() 函数</li><li>为了防止代码逻辑混乱，调用 next() 函数后不要再写额外的代码</li><li>连续调用多个中间件时，多个中间件之间，共享 req 和 res 对象</li></ul><h5 id="8-4-5中间件的分类"><a href="#8-4-5中间件的分类" class="headerlink" title="8.4.5中间件的分类"></a>8.4.5中间件的分类</h5><h6 id="1-应用级别的中间件"><a href="#1-应用级别的中间件" class="headerlink" title="1.应用级别的中间件"></a>1.应用级别的中间件</h6><p>​通过 <strong>app.use()</strong> 或 <strong>app.get()</strong> 或 <strong>app.post()</strong> ，绑定到 app 实例上的中间件，叫做<strong>应用级别的中间件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><h6 id="2-路由级别的中间件"><a href="#2-路由级别的中间件" class="headerlink" title="2.路由级别的中间件"></a>2.路由级别的中间件</h6><p>​绑定到 <strong>express.Router()</strong> 实例上的中间件，叫做<strong>路由级别的中间件</strong>。它的用法和应用级别中间件没有任何区别。只不过，应用级别中间件是绑定到 app 实例上，路由级别中间件绑定到 router 实例上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">let</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"><span class="comment">//路由级别的中间件</span></span><br><span class="line">router.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br></pre></td></tr></table></figure><h6 id="3-错误级别的中间件"><a href="#3-错误级别的中间件" class="headerlink" title="3.错误级别的中间件"></a>3.错误级别的中间件</h6><p>​专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//1.人为的制造错误</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;服务器内部发生了某些错误&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;HOME PAGE&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//2.定义错误级别的中间件，捕获整个项目的异常错误，从而防止程序的崩溃</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生了错误&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ERROR&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express serve running at http://127.0.0.1:80&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>错误级别的中间件， <strong>必须注册在所有路由之后</strong></li></ul><h6 id="4-Express内置的中间件"><a href="#4-Express内置的中间件" class="headerlink" title="4.Express内置的中间件"></a>4.Express内置的中间件</h6><p>​自 Express 4.16.0 版本开始，Express 内置了 3 个常用的中间件</p><ol><li>express.static 快速托管静态资源的内置中间件</li><li>express.json 解析 JSON 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</li><li>express.urlencoded 解析 URL-encoded 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置解析 application/json格式数据的内置中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"><span class="comment">//配置解析 application/x-www-form-urlencoded 格式数据的内置中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br></pre></td></tr></table></figure><h6 id="5-第三方中间件"><a href="#5-第三方中间件" class="headerlink" title="5.第三方中间件"></a>5.第三方中间件</h6><p>​非 Express 官方内置的，而是由第三方开发出来的中间件</p><h5 id="8-4-6自定义中间件"><a href="#8-4-6自定义中间件" class="headerlink" title="8.4.6自定义中间件"></a>8.4.6自定义中间件</h5><p>自己手动模拟一个类似于 express.urlencoded 这样的中间件，来解析 POST 提交到服务器的表单数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bodyParser</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//定义中间件具体的业务逻辑，这是解析表单数据的中间件</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//1.定义变量，来存储客户端发送过来的请求体数据</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="comment">//2.监听req对象的data事件（客户端发送过来的新请求体数据）</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">在中间件中，需要监听 req 对象的 data 事件，来获取客户端发送到服务器的数据。如果数据量比较大，无法一次性发送完毕，则客户端会把数据切割后，分批发送到服务器。所以 data 事件可能会触发多次，每一次触发 data 事件时，获取到数据只是完整数据的一部分，需要手动对接收到的数据进行拼接。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    str += chunk <span class="comment">//此时ste存储的是最完整的数据</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//3.监听req的end事件</span></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">当请求体数据接收完毕之后，会自动触发 req 的 end 事件。因此，我们可以在 req 的 end 事件中，拿到并处理完整的请求体数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">//此时ste存储的是最完整的数据</span></span><br><span class="line">    <span class="comment">/*Node.js 内置了一个 querystring 模块，专门用来处理查询字符串。通过这个模块提供的 parse() 函数，可以轻松把查询字符串，解析成对象的格式。*/</span></span><br><span class="line">    <span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(body)</span><br><span class="line">    <span class="comment">/*上游的中间件和下游的中间件及路由之间，共享同一份 req 和 res。因此，我们可以将解析出来的数据，挂载为 req 的自定义属性，命名为 req.body，供下游使用。*/</span></span><br><span class="line">    req.<span class="property">body</span> = body</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = bodyParser</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> custombodyparser = <span class="built_in">require</span>(<span class="string">&#x27;./15custom-body-parser&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(custombodyparser)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="string">&#x27;console.log(running)&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="8-4-7使用Express写接口"><a href="#8-4-7使用Express写接口" class="headerlink" title="8.4.7使用Express写接口"></a>8.4.7使用Express写接口</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"><span class="comment">//定义get接口</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//通过req.query获取客户端通过查询字符串，发送到服务器的数据</span></span><br><span class="line">    <span class="keyword">const</span> query = req.<span class="property">query</span></span><br><span class="line">    <span class="comment">//调用res.send方法，向客户端响应处理结果</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        status : <span class="number">0</span>,<span class="comment">//表示处理成功，1表示处理失败</span></span><br><span class="line">        msg : <span class="string">&#x27;GET请求成功&#x27;</span>,<span class="comment">//状态的描述</span></span><br><span class="line">        data : query<span class="comment">//需要响应给客户端的数据</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//定义post接口</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//通过req.body获取请求体重包含的url-encoded格式的数据</span></span><br><span class="line">    <span class="keyword">const</span> body = req.<span class="property">body</span></span><br><span class="line">    <span class="comment">//调用res.send方法，向客户端响应结果</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        status : <span class="number">0</span>,</span><br><span class="line">        msg : <span class="string">&#x27;POST请求成功&#x27;</span>,</span><br><span class="line">        data : body</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建最基本的服务器</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//在路由模块之前配置解析表单数据的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;extended : <span class="literal">false</span>&#125;))</span><br><span class="line"><span class="comment">//在路由之前配置cors中间件，解决接口跨域的问题</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br><span class="line"><span class="comment">//导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./16apiRouter&#x27;</span>)</span><br><span class="line"><span class="comment">//注册路由模块</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>,router)</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-初识Node-js&quot;&gt;&lt;a href=&quot;#1-初识Node-js&quot; class=&quot;headerlink&quot; title=&quot;1.初识Node.js&quot;&gt;&lt;/a&gt;1.初识Node.js&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://no</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Node.js" scheme="http://example.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>10.和小达一起学MySQL</title>
    <link href="http://example.com/2022/08/11/10.%E2%80%9D%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E2%80%9CMySQL/"/>
    <id>http://example.com/2022/08/11/10.%E2%80%9D%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E2%80%9CMySQL/</id>
    <published>2022-08-11T11:30:31.000Z</published>
    <updated>2022-08-11T13:17:45.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-数据库的基本概念"><a href="#1-数据库的基本概念" class="headerlink" title="1.数据库的基本概念"></a>1.数据库的基本概念</h1><h3 id="1-1数据库的基本概念"><a href="#1-1数据库的基本概念" class="headerlink" title="1.1数据库的基本概念"></a>1.1数据库的基本概念</h3><h5 id="1-1-1什么是数据库"><a href="#1-1-1什么是数据库" class="headerlink" title="1.1.1什么是数据库"></a>1.1.1什么是数据库</h5><p>​数据库是用来<strong>组织、存储、管理</strong>数据的仓库</p><p>​为了方便管理数据，就有了<strong>数据库管理系统</strong>的概念(简称：数据库)。用户可以对数据库中的数据进行<strong>新增、查询、更新、删除等</strong>操作</p><h5 id="1-1-2常见的数据库和分类"><a href="#1-1-2常见的数据库和分类" class="headerlink" title="1.1.2常见的数据库和分类"></a>1.1.2常见的数据库和分类</h5><ul><li>MySQL数据库（目前使用最广泛、流行度最高的开源免费数据库；Community + Enterprise） </li><li>Oracle 数据库（收费）</li><li>SQL Server 数据库（收费）</li><li>Mongodb 数据库（Community + Enterprise）</li></ul><p><strong>传统型数据库（关系型数据库 or SQL数据库）：</strong>MySQL、Oracle、SQL Server，这三者设计理念相同，用法类似</p><p><strong>新型数据库（非关系型数据库 or NoSQL数据库）：</strong>Mongodb，它在一定程度上弥补了传统型数据库的缺陷</p><h5 id="1-1-3传统型数据库的组织结构"><a href="#1-1-3传统型数据库的组织结构" class="headerlink" title="1.1.3传统型数据库的组织结构"></a>1.1.3传统型数据库的组织结构</h5><p><strong>Excel</strong>，每个 Excel 中，数据的组织结构分别为<strong>工作簿、工作表、数据行、列</strong>这 4 大部分组成。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/Excel%E7%9A%84%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84.png"                      alt="Excel的组织结构"                ></p><ol><li>整个 Excel 叫做<strong>工作簿</strong></li><li>users 和 books 是<strong>工作表</strong></li><li>users 工作表中有 3 行数据，每行数据由 6 列信息组成</li><li>每列信息都有对应的<strong>数据类型</strong></li></ol><p><strong>传统型数据库</strong>，数据的组织结构分为**数据库(database)、数据表(table)、数据行(row)、字段(field)**这 4 大部分组成。</p><ol><li><strong>数据库</strong>类似于 Excel 的<strong>工作簿</strong></li><li><strong>数据表</strong>类似于 Excel 的<strong>工作表</strong></li><li><strong>数据行</strong>类似于 Excel 的<strong>每一行数据</strong></li><li><strong>字段</strong>类似于 Excel 的<strong>列</strong>，每个字段都有对应的数据类型</li></ol><p><strong>实际开发中库、表、行、字段的关系</strong></p><ol><li>在实际项目开发中，一般情况下，每个项目都对应独立的数据库。</li><li>不同的数据，要存储到数据库的不同表中，例如：用户数据存储到 users 表中，图书数据存储到 books 表中</li><li>每个表中具体存储哪些信息，由字段来决定，例如：我们可以为 users 表设计 id、username、password 这 3 个 字段</li><li>表中的行，代表每一条具体的数据。</li></ol><h1 id="2-MySQL的基本使用"><a href="#2-MySQL的基本使用" class="headerlink" title="2.MySQL的基本使用"></a>2.MySQL的基本使用</h1><h3 id="2-1使用MySQL-Workbench管理数据库"><a href="#2-1使用MySQL-Workbench管理数据库" class="headerlink" title="2.1使用MySQL Workbench管理数据库"></a>2.1使用MySQL Workbench管理数据库</h3><h5 id="2-1-1连接数据库"><a href="#2-1-1连接数据库" class="headerlink" title="2.1.1连接数据库"></a>2.1.1连接数据库</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/MYSQL01.png"                      alt="连接数据库"                ></p><h5 id="2-1-2界面组成部分"><a href="#2-1-2界面组成部分" class="headerlink" title="2.1.2界面组成部分"></a>2.1.2界面组成部分</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/MYSQL02.png"                      alt="界面组成部分"                ></p><h5 id="2-1-3创建数据库"><a href="#2-1-3创建数据库" class="headerlink" title="2.1.3创建数据库"></a>2.1.3创建数据库</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/MYSQL03.png"                      alt="创建数据库"                ></p><h5 id="2-1-4创建数据表"><a href="#2-1-4创建数据表" class="headerlink" title="2.1.4创建数据表"></a>2.1.4创建数据表</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/MYSQL04.png"                      alt="创建数据表"                ></p><p><strong>DataType数据类型：</strong></p><ol><li><strong>INT</strong>整数</li><li><strong>varchar(len)</strong> 字符串</li><li>**tinyint(1) **布尔值</li></ol><p><strong>字段的特殊标识：</strong></p><ol><li><strong>PK</strong>（Primary Key）主键、唯一标识</li><li><strong>NN</strong>（Not Null）值不允许为空</li><li><strong>UQ</strong>（Unique）值唯一</li><li><strong>AI</strong>（Auto Increment）值自动增长</li></ol><h5 id="2-1-5向表中写入数据"><a href="#2-1-5向表中写入数据" class="headerlink" title="2.1.5向表中写入数据"></a>2.1.5向表中写入数据</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/MYSQL05.png"                      alt="向表中写入数据"                ></p><h3 id="2-2使用SQL管理数据"><a href="#2-2使用SQL管理数据" class="headerlink" title="2.2使用SQL管理数据"></a>2.2使用SQL管理数据</h3><h5 id="2-2-1什么是SQL"><a href="#2-2-1什么是SQL" class="headerlink" title="2.2.1什么是SQL"></a>2.2.1什么是SQL</h5><p>SQL（Structured Query Language）是<strong>结构化查询语言</strong>，专门用来<strong>访问和处理数据库</strong>的<strong>编程语言</strong>。能够让 </p><p>我们<strong>以编程的形式</strong>，<strong>操作数据库里面的数据</strong>。</p><ol><li>SQL 是一门<strong>数据库编程语言</strong></li><li>使用 SQL 语言编写出来的代码，叫做 <strong>SQL 语句</strong></li><li>SQL 语言只能在<strong>关系型数据库</strong>中使用（例如 MySQL、Oracle、SQL Server）。<strong>非关系型数据库</strong>（例如 Mongodb） <strong>不支持</strong> SQL 语言</li></ol><h5 id="2-2-2SQL可以做什么"><a href="#2-2-2SQL可以做什么" class="headerlink" title="2.2.2SQL可以做什么"></a>2.2.2SQL可以做什么</h5><ol><li>从数据库中<strong>查询数据</strong></li><li>向数据库中<strong>插入新的数据</strong></li><li><strong>更新</strong>数据库中的数据</li><li>从数据库<strong>删除数据</strong></li><li>可以创建<strong>新数据库</strong></li><li>可在数据库中创建<strong>新表</strong></li><li>可在数据库中创建<strong>存储过程、视图</strong></li><li>…</li></ol><h5 id="2-2-3查询-SELECT语句"><a href="#2-2-3查询-SELECT语句" class="headerlink" title="2.2.3查询 - SELECT语句"></a>2.2.3查询 - SELECT语句</h5><p>​<strong>SELECT</strong>语句用于<strong>从表中查询数据</strong>，执行的结果被存储在<strong>结果表</strong>中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这是注释</span></span><br><span class="line"><span class="comment">-- 从 FROM 指定的表中，查询出所有的数据。</span></span><br><span class="line"><span class="comment">-- *号表示所有列</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名称</span><br><span class="line"><span class="comment">-- 从 FROM 指定的表中，查询出指定 列名称（字段）的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称</span><br></pre></td></tr></table></figure><p>​<strong>注：</strong> SQL语句中的<strong>关键字</strong>对<strong>大小写不敏感</strong>。SELECT 等效于 select，FROM 等效于 from</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users</span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> users</span><br><span class="line"><span class="keyword">select</span> username,password <span class="keyword">from</span> users</span><br></pre></td></tr></table></figure><h5 id="2-2-4插入-INSERT-INTO"><a href="#2-2-4插入-INSERT-INTO" class="headerlink" title="2.2.4插入 - INSERT INTO"></a>2.2.4插入 - INSERT INTO</h5><p>​<strong>INSERT INTO</strong> 语句用于向数据表中<strong>插入新的数据行</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法：向指定的表中，插入如下几列数据，列的值通过 VALUES 一一制定</span></span><br><span class="line"><span class="comment">-- 注意：列和值要一一对应，多个列和多个值之间使用英文,分隔</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列<span class="number">1</span>，列<span class="number">2</span>，...) <span class="keyword">VALUES</span> (值<span class="number">1</span>，值<span class="number">2</span>，...)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> users(name,password) <span class="keyword">values</span>(<span class="string">&#x27;bob&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="2-2-5更新-UPDATE"><a href="#2-2-5更新-UPDATE" class="headerlink" title="2.2.5更新 - UPDATE"></a>2.2.5更新 - UPDATE</h5><p>​<strong>UPDATE</strong> 语句用于<strong>修改</strong>表中的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.用 UPDATE 指定要更新哪个表中的数据</span></span><br><span class="line"><span class="comment">-- 2.用 SET 指定列对应的新值</span></span><br><span class="line"><span class="comment">-- 3.用 WHERE 指定更新的条件</span></span><br><span class="line"><span class="keyword">UPDATE</span> 表名称 <span class="keyword">SET</span> 列名称<span class="operator">=</span>新值 <span class="keyword">WHERE</span> 某列名<span class="operator">=</span>某值</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> users <span class="keyword">set</span> password<span class="operator">=</span>&quot;8888&quot; <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span></span><br><span class="line"><span class="comment">-- 多个更新之间用英文的,进行分隔</span></span><br><span class="line"><span class="comment">-- 一定记得加WHERE条件，否则整张表的数据都被更新</span></span><br><span class="line"><span class="keyword">update</span> users <span class="keyword">set</span> password<span class="operator">=</span><span class="string">&#x27;8888&#x27;</span>, status<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span></span><br></pre></td></tr></table></figure><h5 id="2-2-6删除-DELETE-FROM"><a href="#2-2-6删除-DELETE-FROM" class="headerlink" title="2.2.6删除 - DELETE FROM"></a>2.2.6删除 - DELETE FROM</h5><p>​<strong>DELETE</strong> 语句用于<strong>删除表中的行</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 从 FROM 指定的表中，根据 WHERE 条件，删除对应的数据行</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列名称<span class="operator">=</span>值</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="2-2-7-WHERE子句"><a href="#2-2-7-WHERE子句" class="headerlink" title="2.2.7 WHERE子句"></a>2.2.7 WHERE子句</h5><p>​<strong>WHERE</strong> 子句用于<strong>限定选择的标准</strong>。在 SELECT、UPDATE、DELETE 语句中，皆可使用 WHERE 子句来限定选择的标准。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 列 运算符 值</span><br><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 列<span class="operator">=</span>新值 <span class="keyword">WHERE</span> 列 运算符 值</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 列 运算符 值</span><br></pre></td></tr></table></figure><p>​<strong>运算符</strong>可以为：&#x3D;、&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;、BETWEEN、LIKE、&lt;&gt;（不等于，有些SQL版本可以为 !&#x3D; ）</p><h5 id="2-2-8-AND和OR运算符"><a href="#2-2-8-AND和OR运算符" class="headerlink" title="2.2.8 AND和OR运算符"></a>2.2.8 AND和OR运算符</h5><p>​<strong>AND 和 OR</strong> 可在 WHERE 子语句中<strong>把两个或多个条件结合起来</strong></p><ul><li>AND 表示必须<strong>同时满足多个条件</strong>，相当于 JavaScript 中的 &amp;&amp; 运算符，例如 if (a !&#x3D;&#x3D; 10 &amp;&amp; a !&#x3D;&#x3D; 20)</li><li>OR 表示<strong>只要满足任意一个条件即可</strong>，相当于 JavaScript 中的 || 运算符，例如 if(a !&#x3D;&#x3D; 10 || a !&#x3D;&#x3D; 20)</li></ul><h5 id="2-2-9-ORDER-BY子句"><a href="#2-2-9-ORDER-BY子句" class="headerlink" title="2.2.9 ORDER BY子句"></a>2.2.9 ORDER BY子句</h5><ul><li><strong>ORDER BY</strong> 语句用于根据指定的列<strong>对结果集进行排序</strong>，默认<strong>升序</strong>，<strong>降序</strong>可以使用<strong>DESC</strong>关键字。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 升序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> id</span><br><span class="line"><span class="comment">-- 降序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">desc</span></span><br><span class="line"><span class="comment">-- 多重排序：先按照status降序，再按照name升序（asc语义性更明显）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> status <span class="keyword">desc</span>,name <span class="keyword">asc</span></span><br></pre></td></tr></table></figure><h5 id="2-2-10-COUNT-函数"><a href="#2-2-10-COUNT-函数" class="headerlink" title="2.2.10 COUNT(*)函数"></a>2.2.10 COUNT(*)函数</h5><p>​<strong>COUNT(*)</strong> 函数用于<strong>返回查询结果的总数据条数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> 表名称</span><br></pre></td></tr></table></figure><h3 id="2-3在项目中操作MySQL"><a href="#2-3在项目中操作MySQL" class="headerlink" title="2.3在项目中操作MySQL"></a>2.3在项目中操作MySQL</h3><h5 id="2-3-1安装与配置"><a href="#2-3-1安装与配置" class="headerlink" title="2.3.1安装与配置"></a>2.3.1安装与配置</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.初始化包管理配置文件</span></span><br><span class="line">init -y </span><br><span class="line"><span class="comment">//2.安装包的管理配置文件</span></span><br><span class="line">npm i install mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.配置mysql模块</span></span><br><span class="line"><span class="comment">//导入mysql模块</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="comment">//建立与mysql数据库的连接</span></span><br><span class="line"><span class="keyword">const</span> db = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="comment">//数据库的IP地址</span></span><br><span class="line">    <span class="attr">user</span>:<span class="string">&#x27;root&#x27;</span>,<span class="comment">//登录数据库的账号</span></span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;admin123&#x27;</span>,<span class="comment">//登录数据库的密码</span></span><br><span class="line">    <span class="attr">database</span>:<span class="string">&#x27;my_db_01&#x27;</span><span class="comment">//指定要操作哪个数据库</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//4.测试mysql模块是否能够正常工作</span></span><br><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;SELECT 1&#x27;</span>,<span class="function">(<span class="params">err,results</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results)<span class="comment">//只要能打印出[&#123;RowDataPacket&#123;&#x27;1&#x27;:1&#125;&#125;]，就说明数据库连接正常</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2-3-2查询"><a href="#2-3-2查询" class="headerlink" title="2.3.2查询"></a>2.3.2查询</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="keyword">const</span> sqlStr1 = <span class="string">&#x27;select * from users&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr1,<span class="function">(<span class="params">err,results</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//查询失败</span></span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="comment">//查询成功</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2-3-3插入"><a href="#2-3-3插入" class="headerlink" title="2.3.3插入"></a>2.3.3插入</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入新数据</span></span><br><span class="line"><span class="comment">//待执行的 SQL 语句，其中 ？ 表示占位符</span></span><br><span class="line"><span class="keyword">const</span> sqlStr2 = <span class="string">&#x27;INSERT INTO users(name,password) VALUES (?,?)&#x27;</span></span><br><span class="line"><span class="comment">//要插入到users表中的数据对象</span></span><br><span class="line"><span class="keyword">const</span> user2 = &#123;<span class="attr">name</span>:<span class="string">&#x27;sxk&#x27;</span>,<span class="attr">password</span>:<span class="string">&#x27;liuzzhh&#x27;</span>&#125;</span><br><span class="line"><span class="comment">//使用数组的形式，依次为 ？ 占位符指定具体的值</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr2,[user2.<span class="property">name</span>,user2.<span class="property">password</span>],<span class="function">(<span class="params">err,results</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)<span class="comment">//失败</span></span><br><span class="line">    <span class="keyword">if</span>(results.<span class="property">affectedRows</span> === <span class="number">1</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入数据成功&#x27;</span>)&#125;<span class="comment">//成功</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简易写法</span></span><br><span class="line"><span class="comment">//待执行的 SQL 语句，其中 ？ 表示占位符</span></span><br><span class="line"><span class="keyword">const</span> sqlStr2 = <span class="string">&#x27;INSERT INTO users SET ?&#x27;</span></span><br><span class="line"><span class="comment">//要插入到users表中的数据对象</span></span><br><span class="line"><span class="keyword">const</span> user2 = &#123;<span class="attr">name</span>:<span class="string">&#x27;sxk&#x27;</span>,<span class="attr">password</span>:<span class="string">&#x27;liuzzhh&#x27;</span>&#125;</span><br><span class="line"><span class="comment">//直接将数据对象当作占位符的值</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr2,user2,<span class="function">(<span class="params">err,results</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span>(results.<span class="property">affectedRows</span> === <span class="number">1</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入数据成功&#x27;</span>)&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2-3-4更新"><a href="#2-3-4更新" class="headerlink" title="2.3.4更新"></a>2.3.4更新</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新数据</span></span><br><span class="line"><span class="keyword">const</span> sqlStr3 = <span class="string">&#x27;UPDATE users SET name=?,password=? where id=?&#x27;</span></span><br><span class="line"><span class="keyword">const</span> user3 = &#123;<span class="attr">id</span>:<span class="number">26</span>,<span class="attr">name</span>:<span class="string">&#x27;sj&#x27;</span>,<span class="attr">password</span>:<span class="string">&#x27;sjssb&#x27;</span>&#125;</span><br><span class="line">db.<span class="title function_">query</span>(sqlStr3,[user3.<span class="property">name</span>,user3.<span class="property">password</span>,user3.<span class="property">id</span>],<span class="function">(<span class="params">err,results</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span>(results.<span class="property">affectedRows</span> === <span class="number">1</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新数据成功&#x27;</span>)&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简易写法</span></span><br><span class="line"><span class="keyword">const</span> sqlStr3 = <span class="string">&#x27;UPDATE users SET ? where id=?&#x27;</span></span><br><span class="line"><span class="keyword">const</span> user3 = &#123;<span class="attr">id</span>:<span class="number">26</span>,<span class="attr">name</span>:<span class="string">&#x27;sj&#x27;</span>,<span class="attr">password</span>:<span class="string">&#x27;sjssb&#x27;</span>&#125;</span><br><span class="line">db.<span class="title function_">query</span>(sqlStr3,[user3,user3.<span class="property">id</span>],<span class="function">(<span class="params">err,results</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span>(results.<span class="property">affectedRows</span> === <span class="number">1</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新数据成功&#x27;</span>)&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2-3-5删除、标记删除"><a href="#2-3-5删除、标记删除" class="headerlink" title="2.3.5删除、标记删除"></a>2.3.5删除、标记删除</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sqlStr4 = <span class="string">&#x27;DELETE FROM users WHERE id = ?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr4,<span class="number">26</span>,<span class="function">(<span class="params">err,results</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span>(results.<span class="property">affectedRows</span> === <span class="number">1</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除数据成功&#x27;</span>)&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>标记删除：</strong></p><p>使用 DELETE 语句会把真正的把数据从表中删除掉。为了保险起见，<strong>推荐使用</strong>标记删除的形式，<strong>模拟删除的动作</strong>。 </p><p>所谓的标记删除，就是在表中设置类似于 <strong>status</strong> 这样的<strong>状态字段</strong>，来<strong>标记</strong>当前这条数据是否被删除。 </p><p>当用户执行了删除的动作时，我们并没有执行 DELETE 语句把数据删除掉，而是执行了 UPDATE 语句，将这条数据对应 的 status 字段标记为删除即可</p><h1 id="3-前后端身份认证"><a href="#3-前后端身份认证" class="headerlink" title="3.前后端身份认证"></a>3.前后端身份认证</h1><h3 id="3-1-WEB开发模式"><a href="#3-1-WEB开发模式" class="headerlink" title="3.1 WEB开发模式"></a>3.1 WEB开发模式</h3><p>​目前主流的 Web 开发模式有两种，分别是： </p><ol><li>基于服务端渲染的传统 Web 开发模式 </li><li>基于前后端分离的新型 Web 开发模式</li></ol><h5 id="3-1-1服务端渲染的-Web-开发模式"><a href="#3-1-1服务端渲染的-Web-开发模式" class="headerlink" title="3.1.1服务端渲染的 Web 开发模式"></a>3.1.1服务端渲染的 Web 开发模式</h5><p>​<strong>服务端渲染的概念：</strong>服务器发送给客户端的 HTML 页面，是在服务器通过字符串的拼接，动态生成的。因此，客户端不需要使用 Ajax 这样的技术额外请求页面的数据。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E7%9A%84WEB%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F.png"                      alt="服务端渲染的WEB开发模式"                ></p><h5 id="3-1-2服务端渲染的优缺点"><a href="#3-1-2服务端渲染的优缺点" class="headerlink" title="3.1.2服务端渲染的优缺点"></a>3.1.2服务端渲染的优缺点</h5><p><strong>优点：</strong></p><ul><li><strong>前端耗时少。</strong>因为服务器端负责动态生成 HTML 内容，浏览器只需要直接渲染页面即可。尤其是移动端，更省电</li><li><strong>有利于SEO。</strong>因为服务器端响应的是<strong>完整的 HTML 页面内容</strong>，所以爬虫更容易爬取获得信息，更有利于 SEO</li></ul><p><strong>缺点：</strong></p><ul><li><strong>占用服务器端资源。</strong>即服务器端完成 HTML 页面内容的拼接，如果请求较多，会对服务器造成一定的访问压力</li><li><strong>不利于前后端分离，开发效率低。</strong>使用服务器端渲染，则<strong>无法进行分工合作</strong>，尤其对于<strong>前端复杂度高</strong>的项目，不利于项目高效开发</li></ul><h5 id="3-1-3前后端分离的WEB开发模式"><a href="#3-1-3前后端分离的WEB开发模式" class="headerlink" title="3.1.3前后端分离的WEB开发模式"></a>3.1.3前后端分离的WEB开发模式</h5><p>​<strong>前后端分离的概念：</strong>前后端分离的开发模式，<strong>依赖于 Ajax 技术的广泛应用</strong>。简而言之，就是<strong>后端只负责提供 API 接口，前端使用 Ajax 调用接口</strong>的开发模式</p><h5 id="3-1-4前后端分离的优缺点"><a href="#3-1-4前后端分离的优缺点" class="headerlink" title="3.1.4前后端分离的优缺点"></a>3.1.4前后端分离的优缺点</h5><p><strong>优点：</strong></p><ul><li><strong>开发体验好。</strong>前端专注于 UI 页面的开发，后端专注于api 的开发，且前端有更多的选择性。</li><li><strong>用户体验好。</strong>Ajax 技术的广泛应用，极大的提高了用户的体验，可以轻松实现页面的局部刷新。</li><li><strong>减轻了服务器端的渲染压力。</strong>因为页面最终是在每个用户的浏览器中生成的。</li></ul><p><strong>缺点：</strong></p><ul><li><strong>不利于 SEO。</strong>因为完整的 HTML 页面需要在客户端动态拼接完成，所以爬虫对无法爬取页面的有效信息。（解决方案：利用 Vue、React 等前端框架的 <strong>SSR</strong> （server side render）技术能够很好的解决 SEO 问题！）</li></ul><h5 id="3-1-5开发模式的选择"><a href="#3-1-5开发模式的选择" class="headerlink" title="3.1.5开发模式的选择"></a>3.1.5开发模式的选择</h5><ul><li>企业级网站，主要功能是展示而没有复杂的交互，并且需要良好的 SEO，则这时我们就需要使用<strong>服务器端渲染</strong></li><li>类似后台管理项目，交互性比较强，不需要考虑 SEO，那么就可以使用<strong>前后端分离</strong>的开发模式。</li></ul><p>另外，具体使 用何种开发模式并不是绝对的，为了<strong>同时兼顾</strong>了<strong>首页的渲染速度</strong>和<strong>前后端分离的开发效率</strong>，一些网站采用了<strong>首屏服务器端渲染 + 其他页面前后端分离</strong>的开发模式。</p><h3 id="3-2身份认证"><a href="#3-2身份认证" class="headerlink" title="3.2身份认证"></a>3.2身份认证</h3><h5 id="3-2-1什么是身份认证"><a href="#3-2-1什么是身份认证" class="headerlink" title="3.2.1什么是身份认证"></a>3.2.1什么是身份认证</h5><p>​<strong>身份认证</strong>（Authentication）又称<strong>“身份验证”、“鉴权”</strong>，是指<strong>通过一定的手段，完成对用户身份的确认</strong>。</p><p>如：检票、手机密码、指纹解锁、手机验证码、邮箱密码登录、二维码登录</p><h5 id="3-2-1为什么需要身份认证"><a href="#3-2-1为什么需要身份认证" class="headerlink" title="3.2.1为什么需要身份认证"></a>3.2.1为什么需要身份认证</h5><p>​身份认证的目的，是为了<strong>确认当前所声称为某种身份的用户，确实是所声称的用户</strong>。</p><h5 id="3-2-3不同开发模式下的身份认证"><a href="#3-2-3不同开发模式下的身份认证" class="headerlink" title="3.2.3不同开发模式下的身份认证"></a>3.2.3不同开发模式下的身份认证</h5><ul><li><strong>服务端渲染</strong>推荐使用 <strong>Session 认证机制</strong></li><li><strong>前后端分离</strong>推荐使用 <strong>JWT 认证机制</strong></li></ul><h3 id="3-3-Session认证机制"><a href="#3-3-Session认证机制" class="headerlink" title="3.3 Session认证机制"></a>3.3 Session认证机制</h3><h5 id="3-3-1-HTTP-协议的无状态性"><a href="#3-3-1-HTTP-协议的无状态性" class="headerlink" title="3.3.1 HTTP 协议的无状态性"></a>3.3.1 HTTP 协议的无状态性</h5><p>​了解 HTTP 协议的<strong>无状态性</strong>是进一步学习 Session 认证机制的必要前提。</p><p>​HTTP 协议的<strong>无状态性</strong>，指的是客户端<strong>的每次 HTTP 请求都是独立的</strong>，连续多个请求之间没有直接的关系，<strong>服务器不会主动保留每次 HTTP 请求的状态</strong>。</p><h5 id="3-3-2突破HTTP无状态的限制、Cookie"><a href="#3-3-2突破HTTP无状态的限制、Cookie" class="headerlink" title="3.3.2突破HTTP无状态的限制、Cookie"></a>3.3.2突破HTTP无状态的限制、Cookie</h5><p>​对于超市来说，为了方便收银员在进行结算时给 VIP 用户打折，超市可以为每个 VIP 用户发放会员卡，现实生活中的<strong>会员卡身份认证方式</strong>，在 Web 开发中的专业术语叫做 <strong>Cookie</strong></p><p>​<strong>Cookie</strong> 是<strong>存储在用户浏览器中的一段不超过 4 KB 的字符串</strong>。它由一个<strong>名称</strong>（Name）、一个<strong>值</strong>（Value）和其它几个用于控制 Cookie <strong>有效期、安全性、使用范围</strong>的<strong>可选属性</strong>组成。 </p><p>​<strong>Cookie的几大特性：</strong></p><ul><li>自动发送</li><li>域名独立</li><li>过期时限</li><li>4kb限制</li></ul><h5 id="3-3-3Cookie在身份认证中的作用"><a href="#3-3-3Cookie在身份认证中的作用" class="headerlink" title="3.3.3Cookie在身份认证中的作用"></a>3.3.3Cookie在身份认证中的作用</h5><p>​客户端第一次请求服务器的时候，服务器<strong>通过响应头的形式</strong>，向客户端发送一个身份认证的 Cookie，客户端会自动将 Cookie 保存在浏览器中。 </p><p>​随后，当客户端浏览器每次请求服务器的时候，浏览器会<strong>自动</strong>将身份认证相关的 Cookie，<strong>通过请求头的形式</strong>发送给 服务器，服务器即可验明客户端的身份</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/COOKIE1.png"                      alt="COOKIE"                ></p><h5 id="3-3-4安全性（NO）"><a href="#3-3-4安全性（NO）" class="headerlink" title="3.3.4安全性（NO）"></a>3.3.4安全性（NO）</h5><p>​由于 Cookie 是存储在浏览器中的，而且<strong>浏览器也提供了读写 Cookie 的 API</strong>，因此 <strong>Cookie 很容易被伪造</strong>，<strong>不具有安全性</strong>。因此不建议服务器将重要的隐私数据，通过 Cookie 的形式发送给浏览器。 </p><p>​<strong>注意：</strong>千万<strong>不要使用</strong> Cookie 存储重要且隐私的数据！比如用户的身份信息、密码等</p><p>​为了防止客户伪造会员卡，收银员在拿到客户出示的会员卡之后，可以<strong>在收银机上进行刷卡认证</strong>。只有收银机确认存在的会员卡，才能被正常使用</p><p>​这种<strong>“会员卡”+“刷卡认证”</strong>的设计理念，就是<strong>SESSION认证机制</strong>的精髓</p><h5 id="3-3-5-Session的工作原理"><a href="#3-3-5-Session的工作原理" class="headerlink" title="3.3.5 Session的工作原理"></a>3.3.5 Session的工作原理</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/Session%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png"                      alt="COOKIE"                ></p><h5 id="3-3-6-Session认证的局限性"><a href="#3-3-6-Session认证的局限性" class="headerlink" title="3.3.6 Session认证的局限性"></a>3.3.6 Session认证的局限性</h5><p>​Session 认证机制需要<strong>配合 Cookie 才能实现</strong>。由于 Cookie <strong>默认不支持跨域访问</strong>，所以，当涉及到前端跨域请求后端接口的时候，<strong>需要做很多额外的配置</strong>，才能实现跨域 Session 认证。 </p><ul><li>当前端请求后端接口<strong>不存在跨域问题</strong>的时候，<strong>推荐使用 Session</strong> 身份认证机制</li><li>当前端需要跨域请求后端接口的时候，不推荐使用 Session 身份认证机制，推荐使用 JWT 认证机制。</li></ul><h3 id="3-4在Express中使用Session认证"><a href="#3-4在Express中使用Session认证" class="headerlink" title="3.4在Express中使用Session认证"></a>3.4在Express中使用Session认证</h3><h5 id="3-4-1安装-express-session-中间件"><a href="#3-4-1安装-express-session-中间件" class="headerlink" title="3.4.1安装 express-session 中间件"></a>3.4.1安装 express-session 中间件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express-session</span><br></pre></td></tr></table></figure><h5 id="3-4-2配置-express-session"><a href="#3-4-2配置-express-session" class="headerlink" title="3.4.2配置 express-session"></a>3.4.2配置 express-session</h5><p>​express-session 中间件安装成功后，需要通过 <strong>app.use()</strong> 来注册 session 中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//1.导入express-session</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//2.配置express-session中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>:<span class="string">&#x27;itcyd&#x27;</span>, <span class="comment">//secret属性的值可以为任意字符串</span></span><br><span class="line">    <span class="attr">resave</span>:<span class="literal">false</span>,<span class="comment">//固定写法</span></span><br><span class="line">    <span class="attr">saveUninitialized</span>:<span class="literal">true</span><span class="comment">//固定写法</span></span><br><span class="line"></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h5 id="3-4-3向Session存数据"><a href="#3-4-3向Session存数据" class="headerlink" title="3.4.3向Session存数据"></a>3.4.3向Session存数据</h5><p>​当 express-session 中间件配置成功后，即可通过 <strong>req.session</strong> 来访问和使用 session 对象，从而存储用户的关键信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录的 API 接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断用户提交的登录信息是否正确</span></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">username</span> !== <span class="string">&#x27;admin&#x27;</span> || req.<span class="property">body</span>.<span class="property">password</span> !== <span class="string">&#x27;000000&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;登录失败&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// TODO_02：请将登录成功后的用户信息，保存到 Session 中</span></span><br><span class="line">  <span class="comment">//注意：只有成功配置了 express-session 中间件后，才能通过req点出来</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="property">user</span> = req.<span class="property">body</span> <span class="comment">//用户信息</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="property">islogin</span> = <span class="literal">true</span><span class="comment">//用户的登录状态</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;登录成功&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="3-4-4从Session取数据"><a href="#3-4-4从Session取数据" class="headerlink" title="3.4.4从Session取数据"></a>3.4.4从Session取数据</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取用户姓名的接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/username&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// TODO_03：请从 Session 中获取用户的名称，响应给客户端</span></span><br><span class="line">  <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">islogin</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;<span class="attr">status</span>:<span class="number">1</span>,<span class="attr">msg</span>:<span class="string">&#x27;fail&#x27;</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  req.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>:<span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="attr">username</span>:req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">username</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="3-4-5清空-Session"><a href="#3-4-5清空-Session" class="headerlink" title="3.4.5清空 Session"></a>3.4.5清空 Session</h5><p>调用  <strong>req.session.destroy()</strong> 函数，即可<strong>清空服务器保存的 session 信息</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 退出登录的接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/logout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// TODO_04：清空 Session 信息</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="title function_">destroy</span>()</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>:<span class="string">&#x27;退出登录成功&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-5-JWT认证机制"><a href="#3-5-JWT认证机制" class="headerlink" title="3.5 JWT认证机制"></a>3.5 JWT认证机制</h3><h5 id="3-5-1什么是JWT"><a href="#3-5-1什么是JWT" class="headerlink" title="3.5.1什么是JWT"></a>3.5.1什么是JWT</h5><p>​JWT（英文全称：JSON Web Token）是目前<strong>最流行</strong>的<strong>跨域认证解决方案</strong>。</p><h5 id="3-5-2-JWT的工作原理"><a href="#3-5-2-JWT的工作原理" class="headerlink" title="3.5.2 JWT的工作原理"></a>3.5.2 JWT的工作原理</h5><p>​用户的信息通过 <strong>Token 字符串</strong>的形式，保存在客户端浏览器中。服务器通过<strong>还原 Token 字符串</strong>的形式来认证用户的身份。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/JWT%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6.png"                      alt="JWT认证机制"                ></p><h5 id="3-5-3-JWT组成部分"><a href="#3-5-3-JWT组成部分" class="headerlink" title="3.5.3 JWT组成部分"></a>3.5.3 JWT组成部分</h5><p>​JWT 通常由三部分组成，分别是 <strong>Header（头部）、Payload（有效荷载）、Signature（签名）</strong>，三者之间用 . 分隔</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header.Payload.Signature</span><br></pre></td></tr></table></figure><ul><li><strong>Payload</strong>,才是真正的用户信息，它是用户信息经过加密之后生成的字符串</li><li>Header和Signature是<strong>安全性</strong>相关的部分，只是为了保证Token的安全性</li></ul><h5 id="3-5-4-JWT的使用方式"><a href="#3-5-4-JWT的使用方式" class="headerlink" title="3.5.4 JWT的使用方式"></a>3.5.4 JWT的使用方式</h5><p>​客户端收到服务器返回的 JWT 之后，通常会将它储存在 <strong>localStorage 或 sessionStorage</strong> 中，此后，客户端每次与服务器通信，都要带上这个 JWT 的字符串，从而进行身份认证。推荐的做法是<strong>把 JWT 放在 HTTP请求头的 Authorization 字段中</strong>，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure><h3 id="3-6在Express中使用JWT"><a href="#3-6在Express中使用JWT" class="headerlink" title="3.6在Express中使用JWT"></a>3.6在Express中使用JWT</h3><h5 id="3-6-1安装JWT相关的包"><a href="#3-6-1安装JWT相关的包" class="headerlink" title="3.6.1安装JWT相关的包"></a>3.6.1安装JWT相关的包</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure><ul><li><strong>jsonwebtoken</strong> 用于生成JWT字符串</li><li><strong>express-jwt</strong> 用于将 JWT 字符串解析还原成 JSON 对象</li></ul><h5 id="3-6-2定义secret密钥"><a href="#3-6-2定义secret密钥" class="headerlink" title="3.6.2定义secret密钥"></a>3.6.2定义secret密钥</h5><p>​为了保证 JWT 字符串的安全性，防止 JWT 字符串在网络传输过程中被别人破解，我们需要专门定义一个用于<strong>加密</strong>和<strong>解密</strong>的 secret 密钥，<strong>本质就是一个字符串</strong>。</p><ul><li>当生成 JWT 字符串的时候，需要使用 secret 密钥对用户的信息进行加密，最终得到加密好的 JWT 字符串</li><li>当把 JWT 字符串解析还原成 JSON 对象的时候，需要使用 secret 密钥进行解密</li></ul><h5 id="3-6-3在登录成功后生成-JWT-字符串"><a href="#3-6-3在登录成功后生成-JWT-字符串" class="headerlink" title="3.6.3在登录成功后生成 JWT 字符串"></a>3.6.3<strong>在登录成功</strong>后生成 JWT 字符串</h5><p>​调用 <strong>jsonwebtoken</strong> 包提供的 <strong>sign()</strong> 方法，将用户的信息加密成 JWT 字符串，响应给客户端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// 将 req.body 请求体中的数据，转存为 userinfo 常量</span></span><br><span class="line">  <span class="keyword">const</span> userinfo = req.<span class="property">body</span></span><br><span class="line">  <span class="comment">// 登录失败</span></span><br><span class="line">  <span class="keyword">if</span> (userinfo.<span class="property">username</span> !== <span class="string">&#x27;admin&#x27;</span> || userinfo.<span class="property">password</span> !== <span class="string">&#x27;000000&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="number">400</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;登录失败！&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 登录成功</span></span><br><span class="line">  <span class="comment">// TODO_03：在登录成功之后，调用 jwt.sign() 方法生成 JWT 字符串。并通过 token 属性发送给客户端</span></span><br><span class="line">  <span class="comment">//三个参数分别书 用户信息对象，加密密钥，配置对象</span></span><br><span class="line">  tokenStr = jwt.<span class="title function_">sign</span>(&#123;<span class="attr">username</span>:userinfo.<span class="property">username</span>&#125;,secretKey,&#123;<span class="attr">expiresIn</span>:<span class="string">&#x27;30s&#x27;</span>&#125;)</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;登录成功！&#x27;</span>,</span><br><span class="line">    <span class="attr">token</span>: tokenStr<span class="comment">// 要发送给客户端的 token 字符串</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="3-6-4-将-JWT-字符串还原为JSON-对象"><a href="#3-6-4-将-JWT-字符串还原为JSON-对象" class="headerlink" title="3.6.4 将 JWT 字符串还原为JSON 对象"></a>3.6.4 <strong>将</strong> JWT 字符串还原为JSON 对象</h5><p>​客户端每次在访问那些有权限接口的时候，都需要主动通过<strong>请求头中的 Authorization 字段</strong>，将 Token 字符串发送到服务器进行身份认证。 </p><p>​服务器可以通过 <strong>express-jwt</strong> 这个中间件，自动将客户端发送过来的 Token 解析还原成 JSON 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO_04：注册将 JWT 字符串解析还原成 JSON 对象的中间件</span></span><br><span class="line"><span class="comment">//使用app.use注册中间件</span></span><br><span class="line"><span class="comment">//expressJWT(&#123;secret:secretKey&#125;)就是用来解析 Token 的中间件</span></span><br><span class="line"><span class="comment">//.unless(&#123;path:[/^\/api\//]&#125;)用来指定哪些接口不需要访问权限</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123;<span class="attr">secret</span>:secretKey&#125;).<span class="title function_">unless</span>(&#123;<span class="attr">path</span>:[<span class="regexp">/^\/api\//</span>]&#125;))</span><br></pre></td></tr></table></figure><h5 id="3-6-5使用req-user获取用户信息"><a href="#3-6-5使用req-user获取用户信息" class="headerlink" title="3.6.5使用req.user获取用户信息"></a>3.6.5使用req.user获取用户信息</h5><p>​当 express-jwt 这个中间件配置成功之后，即可在那些有权限的接口中，使用 <strong>req.user</strong> 对象，来访问从 JWT 字符串中解析出来的用户信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个有权限的 API 接口</span></span><br><span class="line"><span class="comment">//只要配置成功了express-jwt就会把解析出来的用户信息，挂在到req.user属性上</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/admin/getinfo&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// TODO_05：使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;获取用户信息成功！&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: req.<span class="property">user</span> <span class="comment">// 要发送给客户端的用户信息</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="3-6-6捕获解析JWT失败后产生的错误"><a href="#3-6-6捕获解析JWT失败后产生的错误" class="headerlink" title="3.6.6捕获解析JWT失败后产生的错误"></a>3.6.6捕获解析JWT失败后产生的错误</h5><p>​当使用 express-jwt 解析 Token 字符串时，如果客户端发送过来的 Token 字符串<strong>过期</strong>或<strong>不合法</strong>，会产生一个<strong>解析失败</strong>的错误，影响项目的正常运行。我们可以通过 <strong>Express 的错误中间件</strong>，捕获这个错误并进行相关的处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//Token解析失败导致的错误</span></span><br><span class="line">  <span class="keyword">if</span>(err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;<span class="attr">status</span>:<span class="number">401</span>,<span class="attr">message</span>:<span class="string">&#x27;无效的Token&#x27;</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//其他原因导致的错误</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;<span class="attr">status</span>:<span class="number">500</span>,<span class="attr">message</span>:<span class="string">&#x27;未知错误&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 express 模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 express 的服务器实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO_01：安装并导入 JWT 相关的两个包，分别是 jsonwebtoken 和 express-jwt</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许跨域资源共享</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 post 表单数据的中间件</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO_02：定义 secret 密钥，建议将密钥命名为 secretKey</span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&#x27;itheima No1 ^_^&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO_04：注册将 JWT 字符串解析还原成 JSON 对象的中间件</span></span><br><span class="line"><span class="comment">// 注意：只要配置成功了 express-jwt 这个中间件，就可以把解析出来的用户信息，挂载到 req.user 属性上</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123; <span class="attr">secret</span>: secretKey &#125;).<span class="title function_">unless</span>(&#123; <span class="attr">path</span>: [<span class="regexp">/^\/api\//</span>] &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// 将 req.body 请求体中的数据，转存为 userinfo 常量</span></span><br><span class="line">  <span class="keyword">const</span> userinfo = req.<span class="property">body</span></span><br><span class="line">  <span class="comment">// 登录失败</span></span><br><span class="line">  <span class="keyword">if</span> (userinfo.<span class="property">username</span> !== <span class="string">&#x27;admin&#x27;</span> || userinfo.<span class="property">password</span> !== <span class="string">&#x27;000000&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="number">400</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;登录失败！&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 登录成功</span></span><br><span class="line">  <span class="comment">// TODO_03：在登录成功之后，调用 jwt.sign() 方法生成 JWT 字符串。并通过 token 属性发送给客户端</span></span><br><span class="line">  <span class="comment">// 参数1：用户的信息对象</span></span><br><span class="line">  <span class="comment">// 参数2：加密的秘钥</span></span><br><span class="line">  <span class="comment">// 参数3：配置对象，可以配置当前 token 的有效期</span></span><br><span class="line">  <span class="comment">// 记住：千万不要把密码加密到 token 字符中</span></span><br><span class="line">  <span class="keyword">const</span> tokenStr = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">username</span>: userinfo.<span class="property">username</span> &#125;, secretKey, &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;30s&#x27;</span> &#125;)</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;登录成功！&#x27;</span>,</span><br><span class="line">    <span class="attr">token</span>: tokenStr, <span class="comment">// 要发送给客户端的 token 字符串</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是一个有权限的 API 接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/admin/getinfo&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// TODO_05：使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">user</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;获取用户信息成功！&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: req.<span class="property">user</span>, <span class="comment">// 要发送给客户端的用户信息</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO_06：使用全局错误处理中间件，捕获解析 JWT 失败后产生的错误</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这次错误是由 token 解析失败导致的</span></span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="number">401</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;无效的token&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;未知的错误&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 app.listen 方法，指定端口号并启动web服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8888</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express server running at http://127.0.0.1:8888&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-数据库的基本概念&quot;&gt;&lt;a href=&quot;#1-数据库的基本概念&quot; class=&quot;headerlink&quot; title=&quot;1.数据库的基本概念&quot;&gt;&lt;/a&gt;1.数据库的基本概念&lt;/h1&gt;&lt;h3 id=&quot;1-1数据库的基本概念&quot;&gt;&lt;a href=&quot;#1-1数据库的基本概</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>11.和小达一起学React</title>
    <link href="http://example.com/2022/08/11/11.%E2%80%9D%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E2%80%9CReact/"/>
    <id>http://example.com/2022/08/11/11.%E2%80%9D%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E2%80%9CReact/</id>
    <published>2022-08-11T11:30:31.000Z</published>
    <updated>2022-08-11T13:18:26.433Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/react_logo.jpeg"                      alt="React Logo"                ></p><h1 id="1-React基本介绍"><a href="#1-React基本介绍" class="headerlink" title="1.React基本介绍"></a>1.React基本介绍</h1><ul><li><strong>React</strong>是用于构建用户界面的<strong>JavaScript库</strong></li><li><strong>React</strong>—–<strong>React-Dom</strong>—–<strong>React-Router</strong>—–<strong>Redux</strong>    组成React框架</li><li><strong>官网</strong>       <a class="link"   href="https://reactjs.org/" >https://reactjs.org/<i class="fas fa-external-link-alt"></i></a></li><li><strong>中文网</strong>   <a class="link"   href="https://zh-hans.reactjs.org/" >https://zh-hans.reactjs.org/<i class="fas fa-external-link-alt"></i></a><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94.png"                      alt="React"                ></li></ul><h2 id="1-1React特点"><a href="#1-1React特点" class="headerlink" title="1.1React特点"></a>1.1React特点</h2><ul><li><strong>声明式UI：</strong>只需要描述UI看起来是什么样的，就跟写HTML一样。声明式(what)，命令式（how）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsx = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React! 动态数据变化:&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><strong>组件化：</strong>基于组件进行开发，开发项目是在组合、复用多个组件</li><li><strong>学习一次，随处使用：</strong>可以开发所有界面，Web,移动端，VR</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/react-use.png"                      alt="React"                ></p><h2 id="1-2React脚手架"><a href="#1-2React脚手架" class="headerlink" title="1.2React脚手架"></a>1.2React脚手架</h2><h3 id="1-2-1脚手架"><a href="#1-2-1脚手架" class="headerlink" title="1.2.1脚手架"></a>1.2.1脚手架</h3><p>​保证前端开发过程顺利进行而搭设的开发平台</p><h3 id="1-2-2作用"><a href="#1-2-2作用" class="headerlink" title="1.2.2作用"></a>1.2.2作用</h3><p>​省去繁琐的<strong>工具配置过程</strong></p><p>​开始时：搭好架子，省去Webpack的配置</p><p>​开发时：热更新、格式化代码、git提交时自动校验代码格式</p><p>​发布时：一键自动打包(代码压缩、优化、按需加载)</p><h3 id="1-2-3命令，初始化项目"><a href="#1-2-3命令，初始化项目" class="headerlink" title="1.2.3命令，初始化项目"></a>1.2.3命令，初始化项目</h3><p>原始：1.全局安装<code>npm i -g create-react-app</code> 2. 通过脚手架的命令来创建 React 项目</p><p>推荐：在终端输入<code>npx create-react-app react-basic</code></p><ul><li><code>npx create-react-app</code> 是<strong>固定命令</strong></li><li><code>create-react-app</code>是React<strong>脚手架名称</strong></li><li><code>react-basic</code>表示<strong>项目名称</strong>，可以修改</li><li>npx是 npm v5.2 版本新添加的命令，用来简化 npm 中工具包的使用</li></ul><p>启动项目：<code>npm start</code>或<code>yarn start</code></p><h3 id="1-2-4项目目录结构调整"><a href="#1-2-4项目目录结构调整" class="headerlink" title="1.2.4项目目录结构调整"></a>1.2.4项目目录结构调整</h3><ul><li>说明：<ul><li><code>src</code>是写代码进行项目开发的目录</li><li>查看 <code>package.json</code> 两个核心库：<code>react</code>、<code>react-dom</code>（脚手架已经帮我们安装好，我们直接用即可）</li></ul></li><li>调整：<ul><li>删除 src 目录下的所有文件</li><li>创建<strong>Index.js</strong>作为项目的<strong>入口文件</strong>，直接写React代码即可</li></ul></li></ul><h2 id="1-3React基本使用"><a href="#1-3React基本使用" class="headerlink" title="1.3React基本使用"></a>1.3React基本使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入2个核心包，React和ReactDOM</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="comment">//2.创建元素（虚拟DOM）</span></span><br><span class="line"><span class="comment">//参数1：标签的名字 h1,div,p</span></span><br><span class="line"><span class="comment">//参数2：标签的属性，对象</span></span><br><span class="line"><span class="comment">//参数3：标签的内容</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>,&#123;<span class="attr">id</span>:<span class="string">&#x27;box&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;haha&#x27;</span>&#125;,<span class="string">&#x27;hello react&#x27;</span>)</span><br><span class="line"><span class="comment">//3.渲染React元素到页面</span></span><br><span class="line"><span class="comment">//参数1：渲染哪个React元素</span></span><br><span class="line"><span class="comment">//参数2：渲染到哪个容器里面</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">创建如下所示：</span><br><span class="line">&lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">    &lt;li&gt;香蕉&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;橘子&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;苹果&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">const element = React.createElement(&#x27;ul&#x27;,&#123;className:&#x27;list&#x27;&#125;,</span><br><span class="line">[</span><br><span class="line">    React.createElement(&#x27;li&#x27;,null,&#x27;香蕉&#x27;),</span><br><span class="line">    React.createElement(&#x27;li&#x27;,null,&#x27;橘子&#x27;),</span><br><span class="line">    React.createElement(&#x27;li&#x27;,null,&#x27;苹果&#x27;),</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h1 id="2-JSX"><a href="#2-JSX" class="headerlink" title="2.JSX"></a>2.JSX</h1><h2 id="2-1-createElement的问题"><a href="#2-1-createElement的问题" class="headerlink" title="2.1 createElement的问题"></a>2.1 createElement的问题</h2><ul><li>繁琐不简洁</li><li>不直观，无法一眼看出所描述的结构</li><li>不优雅，开发体验不好</li></ul><h2 id="2-2-JSX简介"><a href="#2-2-JSX简介" class="headerlink" title="2.2 JSX简介"></a>2.2 JSX简介</h2><p>​<strong>是什么：</strong> <strong>JSX</strong>是<strong>JavaScript XML</strong>的缩写，表示在Javascript代码中写XML(HTML)格式的代码。</p><p>​<strong>优势：</strong> <strong>声明式语法</strong>更加直观，与HTML结构相同，降低学习成本，提高开发效率。</p><p>![JSX 声明式vs命令式](..&#x2F;pictures&#x2F;JSX 声明式vs命令式.png)</p><h2 id="2-3使用步骤"><a href="#2-3使用步骤" class="headerlink" title="2.3使用步骤"></a>2.3使用步骤</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.导入react和reactDOM包</span><br><span class="line">2.使用jsx语法创建react元素</span><br><span class="line">3.把react元素渲染到页面中</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入2个核心包，React和ReactDOM</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="comment">//2.创建元素（虚拟DOM）</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;box&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是box<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="comment">//3.渲染React元素到页面</span></span><br><span class="line"><span class="comment">//参数1：渲染哪个React元素</span></span><br><span class="line"><span class="comment">//参数2：渲染到哪个容器里面</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="2-4-JSX的注意事项"><a href="#2-4-JSX的注意事项" class="headerlink" title="2.4 JSX的注意事项"></a>2.4 JSX的注意事项</h2><ul><li>只有在<strong>脚手架</strong>中<strong>才能使用 jsx</strong> 语法，因为JSX需要经过 <strong>babel</strong> 的编译处理，才能在浏览器中使用。脚手架中已经默认有了这个配置。</li><li>JSX必须要有一个<strong>根节点</strong><ul><li><strong>幽灵节点</strong>，不会渲染任何内容  <code>&lt;&gt;&lt;/&gt;</code> <code>&lt;React.Fragment&gt;&lt;/React.Fragment&gt;</code></li></ul></li><li><strong>标签有开始就要有结束</strong>，没有子节点的元素可以使用<code>/&gt;</code>结束，比如<code>&lt;img  /&gt;</code></li><li>JSX中语法更接近 JavaScript<ul><li><code>class</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; <code>className</code></li><li><code>for</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;  <code>htmlFor</code></li></ul></li><li>JSX可以换行，如果JSX有多行，推荐使用<code>()</code>包裹 JSX，防止自动插入分号的bug</li></ul><h2 id="2-5-prettier插件自动格式化代码"><a href="#2-5-prettier插件自动格式化代码" class="headerlink" title="2.5 prettier插件自动格式化代码"></a>2.5 prettier插件自动格式化代码</h2><ul><li><p>安装：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/prettier.png"                      alt="prettier"                ></p></li><li><p>添加prettier配置</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.保存到额时候用使用prettier进行格式化</span></span><br><span class="line"><span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">//2.不要有分号</span></span><br><span class="line"><span class="string">&quot;prettier.semi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">//3.使用单引号</span></span><br><span class="line"><span class="string">&quot;prettier.singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">//4.默认使用prittier作为格式化工具</span></span><br><span class="line"><span class="string">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span>,</span><br></pre></td></tr></table></figure><h2 id="2-6-JSX中嵌入JavaScript表达式"><a href="#2-6-JSX中嵌入JavaScript表达式" class="headerlink" title="2.6 JSX中嵌入JavaScript表达式"></a>2.6 JSX中嵌入JavaScript表达式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">能被console.log()打印的才是表达式</span><br><span class="line">在jsx中使用花括号&#123;&#125;，提供js表达式</span><br></pre></td></tr></table></figure><ul><li>基本使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    姓名：&#123;name&#125;, 年龄：&#123;age&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>可以访问对象的属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> car = &#123;</span><br><span class="line">    <span class="attr">brand</span>: <span class="string">&#x27;玛莎拉蒂&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    汽车：&#123;car.brand&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>可以访问数组的下标</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> friends = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    汽车：&#123;friends[1]&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>可以使用三元运算符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gender = <span class="number">18</span></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    性别：&#123;age &gt;= 18? &#x27;是&#x27;:&#x27;否&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>可以调用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;你好&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> title = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>姓名：&#123;sayHi()&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>JSX本身</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> span = <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是一个span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> title = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>盒子&#123;span&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>JSX中的<strong>注释</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">/* 这是jsx中的注释 */</span>&#125;   推荐快键键 ctrl + /</span><br></pre></td></tr></table></figure><ul><li>不要出现语句，比如<code>if</code> <code>for</code></li></ul><h2 id="2-7条件渲染"><a href="#2-7条件渲染" class="headerlink" title="2.7条件渲染"></a>2.7条件渲染</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在react中，一切都是javascript，所以条件渲染完全是通过js来控制的,没有任何新知识点</span><br></pre></td></tr></table></figure><ul><li>通过判断<code>if/else</code>控制</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isLoding = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (isLoding) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>数据加载中.....<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>数据加载完成，此处显示加载后的数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> title = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;loadData()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(title, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li>通过三元运算符控制</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isLoding = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> isLoding ? (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>数据加载中.....<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  ) : (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>数据加载完成，此处显示加载后的数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>逻辑运算符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isLoding = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> isLoding &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>加载中...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;loadData()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="2-8-vscode配置自动补全"><a href="#2-8-vscode配置自动补全" class="headerlink" title="2.8 vscode配置自动补全"></a>2.8 vscode配置自动补全</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当按tab键的时候，会自动提示</span></span><br><span class="line"><span class="string">&quot;emmet.triggerExpansionOnTab&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;emmet.showAbbreviationSuggestions&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// jsx的提示</span></span><br><span class="line"><span class="string">&quot;emmet.includeLanguages&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;javascript&quot;</span>: <span class="string">&quot;javascriptreact&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-9列表渲染"><a href="#2-9列表渲染" class="headerlink" title="2.9列表渲染"></a>2.9列表渲染</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我们经常需要遍历一个数组来重复渲染一段结构</span><br><span class="line">在react中，通过 map方法 进行列表的渲染</span><br></pre></td></tr></table></figure><ul><li>列表的渲染</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;关羽&#x27;</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="string">&#x27;赵云&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = names.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dv = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;list&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(dv, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li>直接在JSX中渲染</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;关羽&#x27;</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="string">&#x27;赵云&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dv = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;names.map(item =&gt; <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>key属性的使用</li></ul><p><strong>注意：列表渲染时应该给重复渲染的元素添加key属性，key属性的值要保证唯一</strong></p><p><strong>注意：key值避免使用index下标，因为下标会发生改变</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dv = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;names.map(item =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="2-10样式"><a href="#2-10样式" class="headerlink" title="2.10样式"></a>2.10样式</h2><h3 id="2-10-1行内样式-style"><a href="#2-10-1行内样式-style" class="headerlink" title="2.10.1行内样式-style"></a>2.10.1行内样式-style</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dv = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27;, <span class="attr">backgroundColor:</span> &#x27;<span class="attr">pink</span>&#x27; &#125;&#125;&gt;</span>style样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="2-10-2类名-className"><a href="#2-10-2类名-className" class="headerlink" title="2.10.2类名-className"></a>2.10.2类名-className</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./base.css&#x27;</span></span><br><span class="line"><span class="keyword">const</span> dv = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span>&gt;</span>style样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="base-css样式文件"><a href="#base-css样式文件" class="headerlink" title="base.css样式文件"></a>base.css样式文件</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-11总结"><a href="#2-11总结" class="headerlink" title="2.11总结"></a>2.11总结</h2><ul><li>JSX是React的核心内容</li><li>JSX表示在JS代码中书写HTML结构，是React<strong>声明式</strong>的体现</li><li>使用JSX配合嵌入的JS表达式，条件渲染，列表渲染，可以渲染任意的UI结构</li><li>结果使用className和style的方式给JSX添加样式</li><li>React完全利用JS的语言自身的能力来编写UI，而不是造轮子增强HTML的功能。（对比VUE）</li></ul><h1 id="3-组件"><a href="#3-组件" class="headerlink" title="3.组件"></a>3.组件</h1><h2 id="3-1组件的基本介绍"><a href="#3-1组件的基本介绍" class="headerlink" title="3.1组件的基本介绍"></a>3.1组件的基本介绍</h2><ul><li>组件是React中<strong>最基本的内容</strong>，使用React就一定在使用组件</li><li>组件表示页面中的<strong>部分功能</strong>，页面中的东西都是由组件组成的</li><li>多个组件<strong>组合而成</strong>，可以实现完整的页面功能</li><li>组件特点：<strong>可复用</strong>，<strong>每个组件相互独立</strong>，可组合</li></ul><h2 id="3-2React创建组件"><a href="#3-2React创建组件" class="headerlink" title="3.2React创建组件"></a>3.2React创建组件</h2><h3 id="3-2-1函数组件"><a href="#3-2-1函数组件" class="headerlink" title="3.2.1函数组件"></a>3.2.1函数组件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数组件：使用JS的函数或者箭头函数创建的组件</span><br></pre></td></tr></table></figure><ul><li>为了区分普通标签，函数<strong>组件</strong>的名称必须<strong>大写字母开头</strong></li><li><strong>必须有返回值</strong>，返回一个<strong>结构</strong></li><li>如果<strong>不渲染任何内容</strong>，<strong>return一个null</strong>即可</li></ul><p><strong>使用函数创建组件：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Hello</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是一个函数组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>函数组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Hello</span>&gt;</span><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span>&gt;</span><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>使用箭头函数创建组件：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Hello</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个函数组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>函数组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Hello</span>&gt;</span><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span>&gt;</span><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>调用&#x2F;渲染组件：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="3-2-2知识回顾-类与继承"><a href="#3-2-2知识回顾-类与继承" class="headerlink" title="3.2.2知识回顾(类与继承)"></a>3.2.2知识回顾(类与继承)</h3><p><strong>Class基本语法</strong></p><ul><li><p>在 ES6 之前通过构造函数创建对象</p></li><li><p>在 ES6 中新增了一个关键字 class, 类 和构造函数类似，用于创建对象</p><ul><li>类与对象的区别</li><li>类：指的是一类的事物，是个概念，比如车 手机 水杯等</li><li>对象：一个具体的事物，有具体的特征和行为，比如一个手机，我的手机等， 类可以创建出来对象。</li></ul></li><li><p>类创建对象的基本语法</p><ul><li>基本语法<code>class 类名&#123;&#125;</code></li><li>构造函数<code>constructor</code>的用法，创建对象</li><li>在类中提供方法，直接提供即可</li><li>在类中不需要使用,分隔</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.ES6之前的写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Teacher</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Teacher</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好我是`</span> + <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> itmo = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&#x27;王&#x27;</span>,<span class="number">30</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(itmo)</span><br><span class="line"><span class="comment">//2.ES6的写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>&#123;</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大家好，我是&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>extends实现继承</strong></p><ul><li>类可以使用它继承的类中所有的成员（属性和方法）</li><li>类中可以提供自己的属性和方法</li><li>注意：如果想要给类中新增属性，必须<strong>先调用 super 方法</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123; </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,gender</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name,gender)<span class="comment">//!父类的构造函数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">skin</span> = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">pingpong</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;乒乓球&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// Chinese继承了Person的方法和属性，然后还有自己的属性skin和方法pingpong</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3类组件"><a href="#3-2-3类组件" class="headerlink" title="3.2.3类组件"></a>3.2.3类组件</h3><p><strong>用类创建组件的约束</strong></p><ul><li>类组件的名称必须<strong>大写字母开头</strong></li><li>类组件应该<strong>继承</strong> <code>React.Component</code>父类，从而可以使用父类中提供的方法和属性</li><li>类组件必须提供<code>render</code>方法,<code>render</code>方法必须有<strong>返回值</strong>，表示该组件的结构</li></ul><p><strong>定义组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是Hello组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>函数组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Hello</span>&gt;</span><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Hello</span>&gt;</span><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="3-2-4提取组件到单独的js文件"><a href="#3-2-4提取组件到单独的js文件" class="headerlink" title="3.2.4提取组件到单独的js文件"></a>3.2.4提取组件到单独的js文件</h3><ul><li>组件作为一个独立的个体，一般会放到一个<strong>独立的JS文件</strong>中</li></ul><ol><li>在src中准备文件夹components,创建Hello.js或者Hello.jsx</li><li>在 Hello.js 中导入React (函数组件可以不导入，类组件必须导入，因为要继承<code>React.Component</code>)</li><li>创建组件（函数 或 类）</li><li>在 Hello.js 中导出该组件</li><li>在 index.js 中导入 Hello 组件</li><li>渲染组件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.类组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个Hello组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Hello</span></span><br><span class="line"><span class="comment">//2.函数组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Demo</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个函数组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Demo</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span></span><br><span class="line"><span class="comment">//导入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Hello</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Hello.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Demo</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Demo.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>函数组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Hello</span>&gt;</span><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Hello</span>&gt;</span><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Demo</span>&gt;</span><span class="tag">&lt;/<span class="name">Demo</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="3-2-5有状态组件-x2F-无状态组件"><a href="#3-2-5有状态组件-x2F-无状态组件" class="headerlink" title="3.2.5有状态组件&#x2F;无状态组件"></a>3.2.5有状态组件&#x2F;无状态组件</h3><ul><li><strong>状态（state）</strong>即组件的私有数据，当组件的状态发生了改变，页面结构也就发生了改变。</li><li><strong>函数组件</strong>又叫做<strong>无状态组件</strong>   函数组件是不能自己提供数据(<strong>hooks</strong>允许函数组件提供数据)</li><li><strong>函数组件</strong>没有状态，只负责页面的展示(静态，不会发生变化)性能比较高</li><li><strong>类组件</strong>又叫做<strong>有状态组件</strong> 类组件可以自己提供数据，数据如果发生了改变，内容会自动的更新</li><li><strong>类组件</strong>有自己的状态，负责<strong>更新UI</strong>，只要类组件的数据发生了改变，UI就会发生更新</li></ul><p>在复杂的项目中，一般都是由函数组件和类组件共同配合来完成的。【增加了负担，所以有了hooks】比如计数器案例，点击按钮让数值+1， 0和1就是不同时刻的状态，当状态从0变成1之后，UI也要跟着发生变化。React想要实现这种功能，就需要使用有状态组件来完成。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/state%E7%BB%84%E4%BB%B6.png"                                     ></p><h3 id="3-2-6类组件的状态"><a href="#3-2-6类组件的状态" class="headerlink" title="3.2.6类组件的状态"></a>3.2.6类组件的状态</h3><ul><li>状态<code>state</code>即数据，是组件内部的<code>私有数据</code>,只有在组件内部可以使用</li><li><code>state的值是一个对象</code>,表示一个组件中可以有多个数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;hello react&#x27;</span>,</span><br><span class="line">            <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.msg&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更简单的语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.msg&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-事件处理"><a href="#4-事件处理" class="headerlink" title="4.事件处理"></a>4.事件处理</h1><h2 id="4-1注册事件"><a href="#4-1注册事件" class="headerlink" title="4.1注册事件"></a>4.1注册事件</h2><p><code>on时间名=&#123;事件处理程序&#125;</code>，如<code>onClick=&#123;this.handleClick&#125;</code></p><p><strong>注意：</strong>React事件采用驼峰命名法，如onClick，onMouseEnter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickFn&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">clickFn</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击事件&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2事件对象"><a href="#4-2事件对象" class="headerlink" title="4.2事件对象"></a>4.2事件对象</h2><ul><li>可以通过事件处理程序的参数获取到事件对象</li><li>React 中的事件对象叫做：合成事件（对象）</li><li>合成事件：兼容所有浏览器，无需担心跨浏览器兼容性问题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>()<span class="comment">//阻止默认事件</span></span><br><span class="line">    e.<span class="title function_">stopPropagation</span>()<span class="comment">//阻止冒泡</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;事件对象&#x27;</span>, e)</span><br><span class="line">&#125;</span><br><span class="line">&lt;a onClick=&#123;<span class="variable language_">this</span>.<span class="property">handleClick</span>&#125;&gt;点我，不会跳转页面&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="4-3this的指向"><a href="#4-3this的指向" class="headerlink" title="4.3this的指向"></a>4.3this的指向</h2><ul><li>注册事件的this指向undefined，<strong>有问题，需要解决</strong></li><li>render方法中的this指向当前react组件</li></ul><p><strong>解决方案1：注册事件先写箭头函数，再用箭头函数调用</strong></p><ul><li>箭头函数的特点：自身没有this，访问的是外部的this</li><li>但是该方法会把大量的js处理逻辑放到jsx中，将来不容易维护</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.clickFn()&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">clickFn</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击事件&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案2：使用bind方法修改this的指向</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.clickFn.bind(this)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">clickFn</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击事件&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案3：class类实例语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;hello react&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//直接注册事件用箭头函数来写</span></span><br><span class="line">  clickFn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">msg</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickFn&#125;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-setState修改状态"><a href="#4-4-setState修改状态" class="headerlink" title="4.4.setState修改状态"></a>4.4.setState修改状态</h2><p>​组件中的<strong>状态是可变的</strong>，使用<code>this.setState(&#123;要修改的数据&#125;)</code>来进行修改，并更新UI</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickFn&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    clickFn = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>)</span><br><span class="line">        <span class="comment">//修改组件状态</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>&#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="5-表单的处理"><a href="#5-表单的处理" class="headerlink" title="5.表单的处理"></a>5.表单的处理</h1><blockquote><p>我们在开发过程中，经常需要操作表单元素，比如获取表单的值或者是设置表单的值。</p></blockquote><p>react中处理<strong>表单元素</strong>有两种方式：</p><ul><li>受控组件</li><li>非受控组件（DOM操作）</li></ul><h2 id="5-1受控组件"><a href="#5-1受控组件" class="headerlink" title="5.1受控组件"></a>5.1受控组件</h2><ul><li><p>HTML中表单元素是可输入的，即表单用户并维护着自己的可变状态（value）。</p></li><li><p>但是在react中，可变状态通常是保存在state中的，并且要求状态只能通过<code>setState</code>进行修改。</p></li><li><p>React中将state中的数据与表单元素的value值绑定到了一起，<code>由state的值来控制表单元素的值</code></p></li><li><p>受控组件：<strong>value值受到react控制的表单元素</strong></p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6.png"                                     ></p><h2 id="5-2受控组件使用步骤"><a href="#5-2受控组件使用步骤" class="headerlink" title="5.2受控组件使用步骤"></a>5.2受控组件使用步骤</h2><ol><li>在state中添加一个状态，作为表单元素的value值（控制表单元素的值）</li><li>给表单元素添加onChange事件，设置state的值为表单元素的值（控制值的变化）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">           msg : <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>受控组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/*input框的值通过value属性进行控制 */&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.msg&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  </span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    handleChange = <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">msg</span>:e.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">msg</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3常见的受控组件"><a href="#5-3常见的受控组件" class="headerlink" title="5.3常见的受控组件"></a>5.3常见的受控组件</h2><ul><li>文本框、文本域、下拉框（操作value属性）</li><li>复选框（操作checked属性）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">city</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">agree</span>:<span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>常见的受控组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文本框<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          姓名：</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">value</span>=<span class="string">&#123;this.state.username&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onChange</span>=<span class="string">&#123;this.changeUsername&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文本域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          描述：</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">textarea</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">value</span>=<span class="string">&#123;this.state.desc&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onChange</span>=<span class="string">&#123;this.changeDesc&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>下拉框<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          选择城市</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;this.state.city&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.changeCity&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>复选框<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          是否已经阅读了协议</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.agree&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.changeAgree&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  changeUsername = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">username</span>: e.<span class="property">target</span>.<span class="property">value</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  changeDesc = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">desc</span>: e.<span class="property">target</span>.<span class="property">value</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  changeCity = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">city</span>: e.<span class="property">target</span>.<span class="property">value</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  changeAgree = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">agree</span>: e.<span class="property">target</span>.<span class="property">checked</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-4多表单元素的优化"><a href="#5-4多表单元素的优化" class="headerlink" title="5.4多表单元素的优化"></a>5.4多表单元素的优化</h2><p>问题：每个表单元素都需要一个单独的事件处理程序，处理太繁琐</p><p>优化：使用一个事件处理程序处理多个表单元素</p><p>步骤</p><ul><li>给表单元素添加name属性，名称与state属性名相同</li><li>根据表单元素类型获取对应的值</li><li>在事件处理程序中通过<code>[name]</code>修改对应的state</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">city</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">agree</span>:<span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>常见的受控组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文本框<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          姓名：</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">value</span>=<span class="string">&#123;this.state.username&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">name</span>=<span class="string">&quot;username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文本域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          描述：</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">textarea</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">value</span>=<span class="string">&#123;this.state.desc&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">name</span>=<span class="string">&quot;desc&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>下拉框<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          选择城市</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;this.state.city&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>复选框<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          是否已经阅读了协议</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.agree&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> <span class="attr">name</span>=<span class="string">&quot;agree&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1.区分需要修改谁</span></span><br><span class="line">    <span class="keyword">const</span> &#123; name,type &#125; = e.<span class="property">target</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        [name]: type === <span class="string">&#x27;checkbox&#x27;</span> ? e.<span class="property">target</span>.<span class="property">checked</span> : e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-5非受控组件"><a href="#5-5非受控组件" class="headerlink" title="5.5非受控组件"></a>5.5非受控组件</h2><blockquote><p>非受控组件借助于ref，使用原生DOM的方式来获取表单元素的值</p></blockquote><p>使用步骤</p><ul><li>调用<code>React.createRef()</code>方法创建一个ref</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">super</span>()</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">txtRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将创建好的ref对象添加到文本框中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;<span class="variable language_">this</span>.<span class="property">txtRef</span>&#125;/&gt;</span><br></pre></td></tr></table></figure><ul><li>通过ref对象获取文本框的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//this.txtRef.current可以找到这个文本框</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">txtRef</span>.<span class="property">current</span>.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  txtRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line">  state = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.txtRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickFn&#125;</span>&gt;</span>获取值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  clickFn = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">txtRef</span>.<span class="property">current</span>.<span class="property">value</span>)</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><p>非受控组件用的不多，推荐使用受控组件</p><h1 id="6-组件通讯"><a href="#6-组件通讯" class="headerlink" title="6.组件通讯"></a>6.组件通讯</h1><p>​<strong>组件</strong>是独立且封闭的单元，默认情况下，只能使用组件自己的数据。在组件化过程中，我们将一个完整的功能拆分成多个组件，以更好的完成整个应用的功能。而在这个过程中，多个组件之间不可避免的要<strong>共享某些数据</strong>。为了实现这些功能，就需要<strong>打破组件的独立封闭性</strong>，让其与外界沟通。这个过程就是<strong>组件通讯</strong>。</p><p>​<strong>大白话：一个组件使用另外一个组件的状态</strong></p><h2 id="6-1props"><a href="#6-1props" class="headerlink" title="6.1props"></a>6.1props</h2><ul><li>组件本身是封闭的，但是组件可以通过一个props属性来接受外部的数据</li><li><strong>props的作用：</strong>接受传递给组件的数据</li><li>传递数据：给组件标签添加属性</li><li>接收数据：<strong>函数组件</strong>通过参数props接收数据，<strong>类组件</strong>通过this.props接收数据</li></ul><h3 id="6-1-1函数组件通讯"><a href="#6-1-1函数组件通讯" class="headerlink" title="6.1.1函数组件通讯"></a>6.1.1函数组件通讯</h3><p>在父组件里通过属性的方式，把值传到子组件里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个App组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Demo</span> <span class="attr">car</span>=<span class="string">&quot;小黄车&quot;</span> <span class="attr">money</span>=<span class="string">&quot;100&quot;</span> <span class="attr">check</span>=<span class="string">&#123;true&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Demo</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件通过参数props进行接收，参数支持解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props)</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Demo组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.car&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.money&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.check?&#x27;yes&#x27;:&#x27;no&#x27;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-2类组件通讯"><a href="#6-1-2类组件通讯" class="headerlink" title="6.1.2类组件通讯"></a>6.1.2类组件通讯</h3><p>在父组件里通过属性的方式，把值传到子组件里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个App组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Demo</span> <span class="attr">car</span>=<span class="string">&quot;小黄车&quot;</span> <span class="attr">money</span>=<span class="string">&quot;100&quot;</span> <span class="attr">check</span>=<span class="string">&#123;true&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Demo</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Hello</span> <span class="attr">car</span>=<span class="string">&quot;小黄车&quot;</span> <span class="attr">money</span>=<span class="string">&quot;100&quot;</span> <span class="attr">check</span>=<span class="string">&#123;true&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件直接使用this.props</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是Hello组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.car&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.money&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.check?&#x27;yes&#x27;:&#x27;no&#x27;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-3props的特点"><a href="#6-1-3props的特点" class="headerlink" title="6.1.3props的特点"></a>6.1.3props的特点</h3><ul><li>可以给组件传递<strong>任意类型的数据</strong></li><li>props是<strong>只读</strong>的，不允许修改props的数据。父组件的数据变了，子组件的数据也会更新。</li><li>注意：在<strong>类组件</strong>中使用的时候，**需要把props传递给super()**，否则构造函数无法获取到props</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="comment">// 推荐将props传递给父类构造函数</span></span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>接收到的数据：&#123;this.props.age&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-4props的children属性"><a href="#6-1-4props的children属性" class="headerlink" title="6.1.4props的children属性"></a>6.1.4props的children属性</h3><p>写到标签中间的内容就是children</p><ul><li>children属性：表示该组件的子节点，只要组件有子节点，props就有该属性</li><li>children 属性与普通的props一样，值可以是任意值（文本、React元素、组件，甚至是函数）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写在中间的</span></span><br><span class="line">&lt;<span class="title class_">Hello</span>&gt;首页&lt;/<span class="title class_">Hello</span>&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Hello</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      该组件的子节点：&#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="title class_">Hello</span>&gt;我是子节点&lt;/<span class="title class_">Hello</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="6-1-5props校验"><a href="#6-1-5props校验" class="headerlink" title="6.1.5props校验"></a>6.1.5props校验</h3><p>目的：<strong>校验</strong>接收的props的<strong>数据类型</strong>，把错误提示的更明显</p><p>对于组件来说，props是外来的，无法保证组件使用者传入什么格式的数据，如果传入的数据格式不对，可能会导致组件内部报错。<strong>组件的使用者不能很明确的知道错误的原因。</strong></p><p><strong>使用步骤：</strong></p><ol><li>安装包 prop-types （yarn add prop-types &#x2F; npm i props-types）</li><li>导入 prop-types</li><li>组件名.propTypes &#x3D; {} 来给组件的props添加校验规则</li><li>校验规则通过 PropTypes 对象来指定</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi, &#123;props.colors&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">App</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">    <span class="comment">// 约定colors属性为array类型</span></span><br><span class="line">    <span class="comment">// 如果类型不对，则报出明确错误，便于分析错误原因</span></span><br><span class="line">    <span class="attr">colors</span>: <span class="title class_">PropTypes</span>.<span class="property">array</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>约束规则</strong></p><ol><li>常见类型：array、bool、func、number、object、string</li><li>React元素类型：element</li><li>必填项：isRequired</li><li>特定结构的对象：shape({ })</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常见类型</span></span><br><span class="line"><span class="attr">optionalFunc</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>,</span><br><span class="line"><span class="comment">// 必选</span></span><br><span class="line"><span class="attr">requiredFunc</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>.<span class="property">isRequired</span>,</span><br><span class="line"><span class="comment">// 特定结构的对象</span></span><br><span class="line"><span class="attr">optionalObjectWithShape</span>: <span class="title class_">PropTypes</span>.<span class="title function_">shape</span>(&#123;</span><br><span class="line"><span class="attr">color</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line"><span class="attr">fontSize</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="6-1-6props默认值"><a href="#6-1-6props默认值" class="headerlink" title="6.1.6props默认值"></a>6.1.6props默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            此处展示props的默认值：&#123;props.pageSize&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 默认值</span></span><br><span class="line"><span class="title class_">App</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line"><span class="attr">pageSize</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不传入pageSize属性</span></span><br><span class="line">&lt;<span class="title class_">App</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="补充：类的静态属性"><a href="#补充：类的静态属性" class="headerlink" title="补充：类的静态属性"></a>补充：类的静态属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    name = <span class="string">&quot;&#x27;zs&#x27;,</span></span><br><span class="line"><span class="string">static age = 18</span></span><br><span class="line"><span class="string">sayHi()&#123;</span></span><br><span class="line"><span class="string">        console.log(&#x27;Hi&#x27;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">static sayBye()&#123;</span></span><br><span class="line"><span class="string">        console.log(&#x27;bye&#x27;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">const p = new Person()</span></span><br><span class="line"><span class="string">console.log(p.name)</span></span><br><span class="line"><span class="string">p.sayHi()</span></span><br><span class="line"><span class="string">console.log(Person.age)</span></span><br><span class="line"><span class="string">Person.sayBye()</span></span><br></pre></td></tr></table></figure><h2 id="6-2组件通讯"><a href="#6-2组件通讯" class="headerlink" title="6.2组件通讯"></a>6.2组件通讯</h2><h3 id="6-2-1父传子"><a href="#6-2-1父传子" class="headerlink" title="6.2.1父传子"></a>6.2.1父传子</h3><ol><li>父组件的state对象提供数据</li><li>父组件中给子组件的标签添加属性，值为state中的数据</li><li>子组件通过props接受父组件中传递的数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./18父传子_子&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">wife</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          配偶：</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">placeholder</span>=<span class="string">&#x27;请输入配偶的名字&#x27;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;this.state.wife&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child</span> <span class="attr">mama</span>=<span class="string">&#123;this.state.wife&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  handleChange = <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">wife</span>:e.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Father</span>&gt;</span><span class="tag">&lt;/<span class="name">Father</span>&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">props</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>妈妈的名字：&#123;props.mama&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-2子传父"><a href="#6-2-2子传父" class="headerlink" title="6.2.2子传父"></a>6.2.2子传父</h3><ol><li>父组件提供一个回调函数（用于接收数据），将该函数作为属性的值，传递给子组件</li><li>子组件通过 props 调用回调函数，将子组件的数据作为<strong>参数</strong>传递给回调函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./19子传父_子.js&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">      <span class="attr">wife</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">sonwife</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            配偶：</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">placeholder</span>=<span class="string">&#x27;请输入配偶的名字&#x27;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">value</span>=<span class="string">&#123;this.state.wife&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            儿媳妇：&#123;this.state.sonwife&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Child</span> <span class="attr">wife</span>=<span class="string">&#123;this.state.wife&#125;</span> <span class="attr">changeName</span>=<span class="string">&#123;this.changeName&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    handleChange = <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">wife</span>:e.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    changeName = <span class="function">(<span class="params">name</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">sonwife</span>:name&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Father</span>&gt;</span><span class="tag">&lt;/<span class="name">Father</span>&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">  </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    state=&#123;</span><br><span class="line">        <span class="attr">wife</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>妈妈的名字：&#123;this.props.wife&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    配偶的名字：</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.wife&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange</span> &#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    handleChange = <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">wife</span>:e.<span class="property">target</span>.<span class="property">wife</span>&#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">changeName</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-3兄弟组件通讯"><a href="#6-2-3兄弟组件通讯" class="headerlink" title="6.2.3兄弟组件通讯"></a>6.2.3兄弟组件通讯</h3><p>​兄弟组件通讯的核心思想是<strong>状态提升</strong>，<code>将共享状态放到到最近的公共父组件中，由父组件管理这个状态</code></p><ul><li>父组件职责：<ul><li>提供共享状态</li><li>提供操作共享状态的方法</li></ul></li><li>要通讯的子组件只需通过props接受状态或操作状态的方法</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E7%8A%B6%E6%80%81%E6%8F%90%E5%8D%8702.png"                                     ></p><h3 id="6-2-4Context跨级组件通讯"><a href="#6-2-4Context跨级组件通讯" class="headerlink" title="6.2.4Context跨级组件通讯"></a>6.2.4Context跨级组件通讯</h3><p> <img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E8%B7%A8%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92.png"                                     ></p><p>​需要跨级组件传递时，如果使用props一层一层向下传递非常繁琐，推荐<strong>使用Context</strong></p><p><strong>实现</strong></p><ul><li>index调用 React. createContext() 创建 Provider（提供数据） 和 Consumer（消费数据） 两个组件。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Provider</span>,<span class="title class_">Consumer</span> &#125; = <span class="title class_">React</span>.<span class="title function_">createContext</span>()</span><br><span class="line"><span class="keyword">export</span> &#123;<span class="title class_">Consumer</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>index使用 Provider 包裹根元素，这样Provider就是最大的根元素。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Provider</span> value=&#123;<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">color</span>&#125;&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>APP组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Father</span>&gt;</span><span class="tag">&lt;/<span class="name">Father</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Provider</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>设置 value 属性，表示要传递的数据。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Provider</span> value=&#123;<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">color</span>&#125;&gt;</span><br></pre></td></tr></table></figure><ul><li>孙组件调用 Consumer 组件接收数据。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Consumer</span>&gt;</span><br><span class="line">&#123;<span class="function">(<span class="params">value</span>) =&gt;</span> </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是孙组件&#123;value&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/<span class="title class_">Consumer</span>&gt;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>如果两个组件是远方亲戚（比如，嵌套多层）可以使用Context实现组件通讯</li><li>Context提供了两个组件：Provider 和 Consumer</li><li>Provider组件：用来提供数据</li><li>Consumer组件：用来消费数据</li></ol><h1 id="7-组件的生命周期"><a href="#7-组件的生命周期" class="headerlink" title="7.组件的生命周期"></a>7.组件的生命周期</h1><h2 id="7-1概述"><a href="#7-1概述" class="headerlink" title="7.1概述"></a>7.1概述</h2><p>​<strong>组件的生命周期</strong>：组件从被创建到挂载到页面中运行，再到组件不用时卸载的过程</p><p>​<strong>钩子函数</strong>的作用：为开发人员在不同阶段操作组件提供了时机</p><ul><li>只有 <strong>类组件</strong> 才有 <strong>生命周期</strong>(函数组件没有生命周期)</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"                                     ></p><p><a class="link"   href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" >http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/<i class="fas fa-external-link-alt"></i></a></p><h2 id="7-2挂载阶段"><a href="#7-2挂载阶段" class="headerlink" title="7.2挂载阶段"></a>7.2挂载阶段</h2><p>执行时机：组件创建时（页面加载时）</p><p>执行顺序：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E7%BB%84%E4%BB%B6%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png"                                     ></p><table><thead><tr><th>钩子 函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>constructor</td><td>创建组件时，最先执行</td><td>1. 初始化state  2. 创建Ref等3.绑定this指向</td></tr><tr><td>render</td><td>每次组件渲染都会触发</td><td>渲染UI（<strong>注意： 不能调用setState()</strong> ）</td></tr><tr><td>componentDidMount</td><td>组件挂载（完成DOM渲染）后</td><td>1. 发送网络请求   2.DOM操作</td></tr></tbody></table><h2 id="7-3更新阶段"><a href="#7-3更新阶段" class="headerlink" title="7.3更新阶段"></a>7.3更新阶段</h2><ul><li>执行时机：1. setState() 2. forceUpdate() 3. 组件接收到新的props</li><li>说明：以上三者任意一种变化，组件就会重新渲染</li><li>执行顺序</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E6%9B%B4%E6%96%B0%E9%98%B6%E6%AE%B5.png"                                     ></p><table><thead><tr><th>钩子函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>render</td><td>每次组件渲染都会触发</td><td>渲染UI（与 挂载阶段 是同一个render）</td></tr><tr><td>componentDidUpdate</td><td>组件更新（完成DOM渲染）后</td><td>DOM操作，可以获取到更新后的DOM内容（<strong>注意： 不能调用setState()</strong> ）</td></tr></tbody></table><h2 id="7-4卸载阶段"><a href="#7-4卸载阶段" class="headerlink" title="7.4卸载阶段"></a>7.4卸载阶段</h2><ul><li>执行时机：组件从页面中消失</li></ul><table><thead><tr><th>钩子函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>componentWillUnmount</td><td>组件将要卸载（从页面中消失）</td><td>执行清理工作，资源释放（比如：清理定时器等）</td></tr></tbody></table><h1 id="8-setState"><a href="#8-setState" class="headerlink" title="8.setState()"></a>8.setState()</h1><h2 id="8-1更新数据"><a href="#8-1更新数据" class="headerlink" title="8.1更新数据"></a>8.1更新数据</h2><ul><li>setState()修改数据是<strong>异步更新数据</strong>的</li></ul><p><code>当你调用 setState() 的时候，React.js 并不会马上修改 state,而是把这个对象放到一个更新队列里面,稍后才会从队列当中把新的状态提取出来合并【覆盖】到 state 当中，然后再触发组件更新</code></p><ul><li>多次调用 setState()只会触发一次重新渲染,所以后面的setState()<strong>不能依赖</strong>前面的，因为会<strong>覆盖</strong>掉。</li><li>在使用 React.js 的时候，并不需要担心多次进行 <code>setState</code> 会带来性能问题。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">money</span>:<span class="number">200</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">4</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">4</span>,</span><br><span class="line">    <span class="attr">money</span>:<span class="number">200</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="8-2推荐使用的setState语法"><a href="#8-2推荐使用的setState语法" class="headerlink" title="8.2推荐使用的setState语法"></a>8.2推荐使用的setState语法</h2><ul><li><p>推荐：使用 <code>setState((preState) =&gt; &#123;&#125;)</code> 语法</p></li><li><p>参数preState: React.js 会把上一个 <code>setState</code> 的结果传入这个函数</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">preState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">count</span>: preState.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><strong>这种语法依旧是异步的，但是state可以获取到最新的状态，适用于需要调用多次setState。不会覆盖掉上面的</strong></p><h2 id="8-2-3setState的第二个参数"><a href="#8-2-3setState的第二个参数" class="headerlink" title="8.2.3setState的第二个参数"></a>8.2.3setState的第二个参数</h2><ul><li>场景：在状态更新（页面完成重新渲染）后立即执行某个操作。因为setState是异步的，会先执行下面的函数再执行setState,但是用这种方式可以先修改state再执行回调函数</li><li>语法：<code>setState(updater[, callback])</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(</span><br><span class="line"><span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;&#125;),<span class="comment">//第一个参数</span></span><br><span class="line"><span class="function">() =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个回调函数会在状态更新后立即执行&#x27;</span>)&#125;<span class="comment">//第二个参数。会立即执行</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(</span><br><span class="line"><span class="function">(<span class="params">state, props</span>) =&gt;</span> &#123;&#125;,</span><br><span class="line"><span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;更新state后的标题：&#x27;</span> + <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span></span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="9-组件性能优化"><a href="#9-组件性能优化" class="headerlink" title="9.组件性能优化"></a>9.组件性能优化</h1><h2 id="9-1组件更新机制"><a href="#9-1组件更新机制" class="headerlink" title="9.1组件更新机制"></a>9.1组件更新机制</h2><ul><li><p>setState() 的两个作用： 1. 修改 state 2. 更新组件（UI）</p></li><li><p>过程：父组件重新渲染时，也会重新渲染子组件。但只会渲染当前组件子树（当前组件及其所有子组件）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E7%BB%84%E4%BB%B6%E6%9B%B4%E6%96%B0.png"                                     ></p></li></ul><h2 id="9-2减轻state"><a href="#9-2减轻state" class="headerlink" title="9.2减轻state"></a>9.2减轻state</h2><ul><li>减轻 state：只存储跟组件渲染相关的数据（比如：count &#x2F; 列表数据 &#x2F; loading 等）</li><li>注意：不用做渲染的数据不要放在 state 中，比如定时器 id等 </li><li>对于这种需要在多个方法中用到的数据，应该直接放在 this 中 <ul><li>this.xxx &#x3D; ‘bbb’</li><li>this.xxx</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// timerId存储到this中，而不是state中</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timerId</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;&#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timerId</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123; … &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-3避免不必要的重新渲染"><a href="#9-3避免不必要的重新渲染" class="headerlink" title="9.3避免不必要的重新渲染"></a>9.3避免不必要的重新渲染</h2><ul><li><p>组件更新机制：父组件更新会引起子组件也被更新，这种思路很清晰</p></li><li><p>问题：子组件没有任何变化时也会重新渲染 （接收到的props没有发生任何的改变）</p></li><li><p>解决方式：使用钩子函数 <code>shouldComponentUpdate(nextProps, nextState)</code></p></li><li><p>作用：通过返回值决定该组件是否重新渲染，返回 true 表示重新渲染，false 表示不重新渲染</p></li><li><p>触发时机：更新阶段的钩子函数，组件重新渲染前执行 （shouldComponentUpdate &#x3D;&gt; render）</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//nextProps即将要更新的props；nextState即将要更新的组件自己的state</span></span><br><span class="line"><span class="title function_">shouldComponentUpdate</span>(<span class="params">nextProps</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">money</span> === nextProps.<span class="property">money</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-4纯组件"><a href="#9-4纯组件" class="headerlink" title="9.4纯组件"></a>9.4纯组件</h2><ul><li>纯组件：<code>React.PureComponent</code> 与 <code>React.Component </code>功能相似</li><li>区别：PureComponent <strong>内部自动实现了 shouldComponentUpdate 钩子，不需要手动比较</strong>，只要state和props发生变化，就不会重新渲染</li><li>原理：纯组件内部通过分别 对比 前后两次 props 和 state 的值，来决定是否重新渲染组件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>纯组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-5纯组件比较-值类型"><a href="#9-5纯组件比较-值类型" class="headerlink" title="9.5纯组件比较-值类型"></a>9.5纯组件比较-值类型</h2><ul><li><p>说明：纯组件内部的对比是 shallow compare（浅层对比）</p></li><li><p>对于值类型来说：比较两个值是否相同（直接赋值即可，没有坑）</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> newNumber = number</span><br><span class="line">newNumber = <span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number === newNumber) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">state = &#123; <span class="attr">number</span>: <span class="number">0</span> &#125;</span><br><span class="line"><span class="title function_">setState</span>(&#123;</span><br><span class="line">  <span class="attr">number</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// PureComponent内部对比：</span></span><br><span class="line">最新的state.<span class="property">number</span> === 上一次的state.<span class="property">number</span> <span class="comment">// false，重新渲染组件</span></span><br></pre></td></tr></table></figure><h2 id="9-6纯组件比较-引用类型"><a href="#9-6纯组件比较-引用类型" class="headerlink" title="9.6纯组件比较-引用类型"></a>9.6纯组件比较-引用类型</h2><ul><li>说明：纯组件内部的对比是 shallow compare（浅层对比）</li><li>对于引用类型来说：只比较对象的引用（地址）是否相同</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">number</span>: <span class="number">0</span> &#125;</span><br><span class="line"><span class="keyword">const</span> newObj = obj</span><br><span class="line">newObj.<span class="property">number</span> = <span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj === obj) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">state = &#123; <span class="attr">obj</span>: &#123; <span class="attr">number</span>: <span class="number">0</span> &#125; &#125;</span><br><span class="line"><span class="comment">// 错误做法</span></span><br><span class="line">state.<span class="property">obj</span>.<span class="property">number</span> = <span class="number">2</span></span><br><span class="line"><span class="title function_">setState</span>(&#123; <span class="attr">obj</span>: state.<span class="property">obj</span> &#125;)</span><br><span class="line"><span class="comment">// PureComponent内部比较：</span></span><br><span class="line">最新的state.<span class="property">obj</span> === 上一次的state.<span class="property">obj</span> <span class="comment">// true，不重新渲染组件</span></span><br></pre></td></tr></table></figure><p>纯组件的最佳实践：</p><p> <strong>注意：state 或 props 中属性值为引用类型时，应该创建新数据，不要直接修改原数据！</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确！创建新数据</span></span><br><span class="line"><span class="keyword">const</span> newObj = &#123;...state.<span class="property">obj</span>, <span class="attr">number</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="title function_">setState</span>(&#123; <span class="attr">obj</span>: newObj &#125;)</span><br><span class="line"><span class="comment">// 正确！创建新数据</span></span><br><span class="line"><span class="comment">// 不要用数组的push / unshift 等直接修改当前数组的的方法</span></span><br><span class="line"><span class="comment">// 而应该用 concat 或 slice 等这些返回新数组的方法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line"><span class="attr">list</span>: [...<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span>, &#123;新数据&#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="10-React路由"><a href="#10-React路由" class="headerlink" title="10.React路由"></a>10.React路由</h1><h2 id="10-1单页应用程序"><a href="#10-1单页应用程序" class="headerlink" title="10.1单页应用程序"></a>10.1单页应用程序</h2><ul><li>SPA： <code>Single Page Application</code>  单页面应用程序，整个应用中只有一个页面（index.html）</li><li>MPA : <code>Multiple Page Application</code>多页面应用程序，整个应用中有很多个页面（*.html）</li></ul><p><a class="link"   href="https://music.163.com/" >网易云音乐<i class="fas fa-external-link-alt"></i></a>就是单页面应用程序。</p><p><strong>优势：</strong></p><ol><li>加快页面响应速度，降低了对服务器的压力<ul><li>传统的多页面应用程序，每次请求服务器返回的都是一整个完整的页面</li><li>单页面应用程序只有第一次会加载完整的页面，以后每次请求仅获取必要的数据</li></ul></li><li>更好的用户体验，运行更加流畅</li></ol><p><strong>缺点：</strong></p><ol><li><strong>不利于 SEO</strong> 搜索引擎优化 <ul><li>因为 爬虫 只爬取 HTML 页面中的文本内容，不会执行 JS 代码</li><li>可以通过 SSR（服务端渲染 Server Side Rendering）来解决 SEO 问题<ul><li>解释：先在服务器端把内容渲染出来，然后，返回给浏览器的就是纯 HTML 内容了</li></ul></li><li>页面静态化，比如，对于一个电商应用可以为每一个商品生产一个静态的HTML页面，静态 HTML 页面中是带有文字内容的，所以，有利于 SEO 的</li></ul></li></ol><h2 id="10-2React路由介绍"><a href="#10-2React路由介绍" class="headerlink" title="10.2React路由介绍"></a>10.2React路由介绍</h2><p>​现代的前端应用大多都是 <strong>SPA（单页应用程序）</strong>，为了<strong>有效的使用单个页面来管理原来多页面的功能，前端路由应运而生</strong>。前端路由的功能：<strong>让用户从一个视图（页面）导航到另一个视图（页面）</strong></p><ul><li>前端路由是一套<strong>映射规则</strong>，在React中，是 <strong>URL路径</strong> 与 <strong>组件</strong> 的对应关系 ，简单来说就是：配置路径和组件（配对）</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E8%B7%AF%E7%94%B1%E6%98%AF%E8%A7%84%E5%88%991.png"                                     ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E8%B7%AF%E7%94%B1%E6%98%AF%E4%B8%80%E5%A5%97%E8%A7%84%E5%88%992.png"                                     ></p><p><strong>模拟实现单页面</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Friend</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Friend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">My</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/My&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">currentHash</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//hashchange事件：锚点值(hash)值改变触发</span></span><br><span class="line">  <span class="comment">//当componentDidMount()页面渲染好了，就可以注册事件</span></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//注册事件</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hash值变了&#x27;</span>,<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">currentHash</span>: <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>)&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span>&#123;currentHash&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/home&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/my&quot;</span>&gt;</span>我的音乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/friend&quot;</span>&gt;</span>我的朋友<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        //如果currentHash === &#x27;/home&#x27; 则渲染 <span class="tag">&lt;<span class="name">Home</span>&gt;</span><span class="tag">&lt;/<span class="name">Home</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;currentHash === &#x27;/home&#x27; &amp;&amp; <span class="tag">&lt;<span class="name">Home</span>&gt;</span><span class="tag">&lt;/<span class="name">Home</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;currentHash === &#x27;/my&#x27; &amp;&amp; <span class="tag">&lt;<span class="name">My</span>&gt;</span><span class="tag">&lt;/<span class="name">My</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;currentHash === &#x27;/friend&#x27; &amp;&amp; <span class="tag">&lt;<span class="name">Friend</span>&gt;</span><span class="tag">&lt;/<span class="name">Friend</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">          </span></span><br><span class="line"><span class="language-xml">          </span></span><br><span class="line"><span class="language-xml">          </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-3路由的基本使用"><a href="#10-3路由的基本使用" class="headerlink" title="10.3路由的基本使用"></a>10.3路由的基本使用</h2><p><a class="link"   href="https://reactrouter.com/" >https://reactrouter.com<i class="fas fa-external-link-alt"></i></a></p><p>针对<strong>react-router5</strong>的版本</p><ol><li><strong>安装react-router-dom</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>导入<code>react-router-dom</code>提供的 <code>HashRouter</code>, <code>Route</code>, <code>Link</code></strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HashRouter</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>使用<code>HashRouter</code>包裹整个应用</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Router</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    // … 省略页面内容</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Router</span>&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>使用<code>Link</code>替换<code>a</code>链接，指定导航链接</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Link</span> to=<span class="string">&quot;/first&quot;</span>&gt;页面一&lt;/<span class="title class_">Link</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/two&quot;</span>&gt;</span>页面二<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="5"><li>使用<code>Route</code>指定路由规则</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在哪里写的Route,最终匹配到的组件就会渲染到这</span></span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/first&quot;</span> component=&#123;<span class="title class_">First</span>&#125;&gt;&lt;/<span class="title class_">Route</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="10-3-1详细说明"><a href="#10-3-1详细说明" class="headerlink" title="10.3.1详细说明"></a>10.3.1详细说明</h3><ul><li>Router 组件：包裹整个应用，一个 React 应用只需要使用一次</li><li>两种常用 Router：<code>HashRouter</code> 和 <code>BrowserRouter</code>  </li><li>HashRouter：使用 URL 的哈希值实现（<a class="link"   href="http://localhost:3000/#/first%EF%BC%89" >http://localhost:3000/#/first）<i class="fas fa-external-link-alt"></i></a><ul><li>原理：监听 window 的 <code>hashchange</code> 事件来实现的</li></ul></li><li>（推荐）BrowserRouter：使用 H5 的 history API 实现（<a class="link"   href="http://localhost:3000/first%EF%BC%89" >http://localhost:3000/first）<i class="fas fa-external-link-alt"></i></a><ul><li>原理：监听 window 的 <code>popstate</code> 事件来实现的</li></ul></li></ul><p>**地址栏要<code>#</code>就用<code>HashRouter</code>，不要<code>#</code>就用<code>BrowserRouter</code></p><p><strong>可以在导入的时候重命名</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HashRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="10-3-2路由的执行过程"><a href="#10-3-2路由的执行过程" class="headerlink" title="10.3.2路由的执行过程"></a>10.3.2路由的执行过程</h3><ol><li>点击 Link 组件（a标签），修改了浏览器地址栏中的 url</li><li>React 路由监听到地址栏 url 的变化  (hashChange&#x2F; popState)</li><li>React 路由内部遍历所有 Route 组件，使用路由规则（path）与 pathname（hash）进行匹配</li><li>当路由规则（path）能够匹配地址栏中的 pathname（hash） 时，就展示该 Route 组件的内容</li></ol><h2 id="10-4Link与NavLink"><a href="#10-4Link与NavLink" class="headerlink" title="10.4Link与NavLink"></a>10.4Link与NavLink</h2><p><code>Link</code>组件最终会渲染成a标签，用于指定路由导航</p><ul><li>to属性，将来会渲染成a标签的href属性</li><li>但是<code>Link</code>组件无法实现导航的高亮效果</li></ul><p><code>NavLink</code>组件，一个更特殊的<code>Link</code>组件，可以用用于指定当前导航高亮</p><ul><li>点击Navlink之后当前点击的链接会自动添加一个类名为active，css中给active类设置样式</li></ul><ul><li>to属性，用于指定地址，会渲染成a标签的href属性</li><li>activeClass: 用于指定高亮的类名，默认<code>active</code>,如下设置成aa后，在css中aa类设置样式</li><li>exact: 精确匹配，表示必须精确匹配类名才生效。有时为了简便，首页就是一个<code>/</code>，模糊匹配时点别的也会高亮，用精确匹配就不会</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">NavLink</span> to=<span class="string">&quot;/friend&quot;</span> activeClass=<span class="string">&quot;aa&quot;</span> exact&gt;我的朋友&lt;/<span class="title class_">NavLink</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="10-5Route"><a href="#10-5Route" class="headerlink" title="10.5Route"></a>10.5Route</h2><ul><li>path 的说明<ul><li>如果path指定为<code>/</code>，所有<code>/</code>开头的都可以被匹配</li><li>如果 path 的路径匹配上了，那么就可以对应的组件就会被 render。如果 path 没有匹配上，那么会 render null</li><li>如果path不写，能够匹配所有的匹配，一定会被渲染</li></ul></li><li>exact 的说明， exact 表示<strong>精确匹配</strong>某个路径<ul><li><strong>一般来说，如果路径配置了 &#x2F;， 都需要配置 exact 属性</strong></li></ul></li></ul><h2 id="10-6Switch与404错误提示页面"><a href="#10-6Switch与404错误提示页面" class="headerlink" title="10.6Switch与404错误提示页面"></a>10.6Switch与404错误提示页面</h2><ul><li><strong>Switch作用：</strong>如果将来能够匹配到多个路由规则，只会让第一个渲染出来</li></ul><ul><li><p>通常，我们会把<code>Route</code>包裹在一个<code>Switch</code>组件中</p></li><li><p>通过<code>Switch</code>组件非常容易的就能实现404错误页面的提示（写个404页面放在最后一个Route,不写path）</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">component</span>=<span class="string">&#123;User&#125;/</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">component</span>=<span class="string">&#123;NoMatch&#125;/</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="10-7嵌套路由的配置"><a href="#10-7嵌套路由的配置" class="headerlink" title="10.7嵌套路由的配置"></a>10.7嵌套路由的配置</h2><ul><li>在React中，配置嵌套路由非常的简单，因为<code>Route</code>就是一个组件，可以在任意想配置的地方进行配置</li><li>在组件中依旧可以使用<code>Link</code>指定子路由的链接，<code>Route</code>指定子路由的规则，不用再使用<code>Router</code>组件</li><li>但是配置嵌套路由的时候，二级路由的path必须包含一级路由，必须要<strong>先匹配到父级路由，才能匹配到子路由</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过/home可以匹配Home父组件  再通过/list匹配子组件</span></span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/home/list&quot;</span> component=&#123;<span class="title class_">List</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><h2 id="10-8Redirect重定向"><a href="#10-8Redirect重定向" class="headerlink" title="10.8Redirect重定向"></a>10.8Redirect重定向</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Redirect</span> exact <span class="keyword">from</span>=<span class="string">&#x27;/&#x27;</span> to=<span class="string">&#x27;/home&#x27;</span>&gt;&lt;/<span class="title class_">Redirect</span>&gt;</span><br></pre></td></tr></table></figure><p>如果地址是&#x2F;，需要重定向直接跳到&#x2F;home去，注意：一旦用到&#x2F;，要用exact</p><h2 id="10-9编程式导航"><a href="#10-9编程式导航" class="headerlink" title="10.9编程式导航"></a>10.9编程式导航</h2><ul><li>场景：点击登录按钮，登录成功后，通过代码跳转到后台首页</li><li>编程式导航：通过 JS 代码来实现页面跳转</li><li>history 是 React 路由提供的，用于获取浏览器历史记录的相关信息，通过prop获取history这个对象</li><li>push(path)：跳转到某个页面，参数 path 表示要跳转的路径</li><li>go(n)： 前进或后退到某个页面，参数 n 表示前进或后退页面数量（比如：-1 表示后退到上一页）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    handleLogin = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">push</span>(<span class="string">&#x27;/home&#x27;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">go</span>(-<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;...省略其他代码&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-10动态路由与路由参数获取"><a href="#10-10动态路由与路由参数获取" class="headerlink" title="10.10动态路由与路由参数获取"></a>10.10动态路由与路由参数获取</h2><ul><li>可以使用<code>:id</code>的方式来配置动态的路由参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以匹配 /users/1  /users/2  /users/xxx</span></span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/users/:id&quot;</span> component=&#123;<span class="title class_">Users</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><ul><li>在组件中，通过<code>props.match.params.id</code>可以接收到地址栏的id</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">params</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11-Ant-Design组件库"><a href="#11-Ant-Design组件库" class="headerlink" title="11.Ant Design组件库"></a>11.Ant Design组件库</h1><p>&#96;&#96;antd&#96; 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。</p><ul><li><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install antd --save</span><br></pre></td></tr></table></figure><ul><li><h2 id="导入全局样式"><a href="#导入全局样式" class="headerlink" title="导入全局样式"></a>导入全局样式</h2></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;antd/dist/antd.css&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="导入组件"><a href="#导入组件" class="headerlink" title="导入组件"></a>导入组件</h2></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DatePicker</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">DatePicker</span> /&gt;</span></span>, mountNode</span><br></pre></td></tr></table></figure><h1 id="12-React组件复用"><a href="#12-React组件复用" class="headerlink" title="12. React组件复用"></a>12. React组件复用</h1><h2 id="12-1组件复用说明"><a href="#12-1组件复用说明" class="headerlink" title="12.1组件复用说明"></a>12.1组件复用说明</h2><p>​如果两个组件中的部分功能相似或相同，复用相似的功能。<strong>把逻辑复用起来，但是组件渲染的内容不同。</strong></p><ul><li>三种解决方案<ul><li>render-props</li><li>HOC（高阶组件）</li><li>mixins(Vue还在使用，React已经<strong>废弃</strong>)</li></ul></li><li>注意：这两种方式不是新的API，而是利用React自身特点的编码技巧，演化而成的固定模式（写法）</li></ul><h2 id="12-2render-props使用"><a href="#12-2render-props使用" class="headerlink" title="12.2render-props使用"></a>12.2render-props使用</h2><p>需求：现在有一个App组件，在App组件中，需要渲染</p><ul><li>猫组件：跟着鼠标跑</li><li>位置组件：显示当前鼠标的位置</li></ul><p></p><p>此时，猫组件和位置组件的<strong>逻辑相同</strong>，我们定义一个新组件</p><ul><li>鼠标组件：<strong>用于提供逻辑</strong>。该组件将来可能用于渲染Cat组件和位置组件，所以渲染的是不确定的,所以render可以直接返回一个属性children。因为无论是猫组件还是位置组件无非用到鼠标组件的state，所以<code>this.state</code>作为参数传过去</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">render</span>(<span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//鼠标组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">index</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  move = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">pageX</span>, e.<span class="property">pageY</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">x</span>: e.<span class="property">pageX</span>,</span><br><span class="line">      <span class="attr">y</span>: e.<span class="property">pageY</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="variable language_">this</span>.<span class="property">move</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="variable language_">this</span>.<span class="property">move</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">children</span>(<span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为鼠标组件需要一个children属性，所以在App组件传一个children进去，children为一个函数，该函数可以传一个Cat组件进去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//APP组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span>  <span class="title class_">ReactDOM</span>  <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cat</span> <span class="keyword">from</span> <span class="string">&#x27;./Cat&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Position</span> <span class="keyword">from</span> <span class="string">&#x27;./Position&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Mouse</span> <span class="keyword">from</span> <span class="string">&#x27;./Mouse&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        //解构一个x,y</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Mouse</span>&gt;</span>&#123;(&#123;x,y&#125;) =&gt; &#123;<span class="tag">&lt;<span class="name">Cat</span> <span class="attr">x</span>=<span class="string">&#123;x&#125;</span> <span class="attr">y</span>=<span class="string">&#123;y&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Cat</span>&gt;</span>&#125;&#125;<span class="tag">&lt;/<span class="name">Mouse</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><p>Cat组件直接从this.props拿x和y</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;img&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;left:this.props.x,top:this.props.y&#125;&#125;</span> /&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-3高阶组件-HOC-higher-order-component"><a href="#12-3高阶组件-HOC-higher-order-component" class="headerlink" title="12.3高阶组件  HOC higher order component"></a>12.3高阶组件  HOC higher order component</h2><p>​<strong>目的：</strong>实现状态逻辑复用   增强一个组件的能力。高阶组件就相当于手机壳，通过包装组件，增强组件功能</p><ul><li>高阶组件（HOC，Higher-Order Component）是一个函数，参数接收要包装的组件，返回增强的组件</li><li>高阶组件的命名： <code>withXXX</code>xxx表示一个能力</li><li>高阶组件内部创建一个类组件，在这个类组件中提供复用的状态逻辑代码，通过prop将复用的状态传递给<br>被包装组件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//高阶组件，参数：接受一个普通的组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">withMouse</span>(<span class="params">Base</span>)&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">        <span class="comment">// 处理鼠标的位置等逻辑</span></span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml">&lt;Base&#123;...this.state&#125;&gt;&lt;/BigBase&#123;...this.state&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">    return Mouse</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> withMouse <span class="keyword">from</span> <span class="string">&#x27;./withMouse&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CatWithMouse</span> = <span class="title function_">withMouse</span>(<span class="title class_">Cat</span>)</span><br><span class="line">&lt;<span class="title class_">CatWithMouse</span>&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">CatWithMouse</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>使用高阶组件可能出现props丢失的现象，因为高阶组件没有往下传递props</p><p><strong>解决方法：</strong>渲染 时，将 state 和 this.props 一起传递给组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Base</span> &#123;...<span class="variable language_">this</span>.<span class="property">state</span>&#125; &#123;...<span class="variable language_">this</span>.<span class="property">props</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><h1 id="13-Hooks"><a href="#13-Hooks" class="headerlink" title="13.Hooks"></a>13.Hooks</h1><h2 id="13-1React-Hooks-介绍"><a href="#13-1React-Hooks-介绍" class="headerlink" title="13.1React Hooks 介绍"></a>13.1React Hooks 介绍</h2><h3 id="13-1-1Hooks-是什么"><a href="#13-1-1Hooks-是什么" class="headerlink" title="13.1.1Hooks 是什么"></a>13.1.1Hooks 是什么</h3><ul><li><code>Hooks</code>：钩子、钓钩、钩住；是 <strong>React v16.8</strong> 中的新增功能</li><li>作用：为<strong>函数组件</strong>提供<code>状态</code>、<code>生命周期</code>等原本 class 组件中提供的 React 功能 </li><li>注意：<strong>Hooks 只能在函数组件中使用</strong>，自此，函数组件成为 React 的新宠儿</li></ul><h3 id="13-1-2组件开发模式的对比"><a href="#13-1-2组件开发模式的对比" class="headerlink" title="13.1.2组件开发模式的对比"></a>13.1.2组件开发模式的对比</h3><ul><li>React v16.8 以前： class 组件(提供状态) + 函数组件(展示内容)</li><li>React v16.8 及其以后：<ol><li>class 组件(提供状态) + 函数组件(展示内容)</li><li>Hooks(提供状态) + 函数组件(展示内容)</li><li>混用以上两种方式：部分功能用 class 组件，部分功能用 Hooks+函数组件</li></ol></li></ul><p>注意1：虽然有了 Hooks，但 React 官方并没有计划从 React 库中移除 class。<br>注意2：有了 Hooks 以后，不能再把<strong>函数组件</strong>称为无状态组件了，因为 Hooks 为函数组件提供了状态。</p><h3 id="13-1-3为什么要有-Hooks"><a href="#13-1-3为什么要有-Hooks" class="headerlink" title="13.1.3为什么要有 Hooks"></a>13.1.3为什么要有 Hooks</h3><p>两个角度：1 组件的状态逻辑复用 2 class 组件自身的问题</p><ol><li>组件的状态逻辑复用：<ul><li>在 Hooks 之前，组件的状态逻辑复用经历了：mixins（混入）、HOCs（高阶组件）、render-props 等模式。</li><li>（早已废弃）mixins 的问题：1 数据来源不清晰 2 命名冲突。</li><li>HOCs、render-props 的问题：重构组件结构，导致组件形成 JSX 嵌套地狱问题。</li></ul></li><li>class 组件自身的问题：<ul><li>选择：函数组件和 class 组件之间的区别以及使用哪种组件更合适</li><li>需要理解 class 中的 this 是如何工作的</li><li>相互关联且需要对照修改的代码被拆分到不同生命周期函数中<ul><li>componentDidMount -&gt;  window.addEventListener(‘resize’, this.fn)</li><li>componentWillUnmount -&gt; window.addEventListener(‘resize’, this.fn)</li></ul></li></ul></li></ol><ul><li>相比于函数组件来说，不利于代码压缩和优化，也不利于 TS 的类型推导</li></ul><p>正是由于 React 原来存在的这些问题，才有了 Hooks 来解决这些问题</p><h3 id="13-1-4hooks的优势"><a href="#13-1-4hooks的优势" class="headerlink" title="13.1.4hooks的优势"></a>13.1.4hooks的优势</h3><p>由于原来 React 中存在的问题，促使 React 需要一个更好的自带机制来实现组件状态逻辑复用。</p><ol><li>Hooks 只能在函数组件中使用，避免使用class 组件的问题</li><li>复用组件状态逻辑，而<strong>无需更改组件层次结构</strong></li><li><strong>根据功能</strong>而<strong>不是基于生命周期</strong>方法强制进行代码分割</li><li>抛开 React 赋予的概念来说，Hooks 就是一些普通的函数</li><li>具有更好的 TS  类型推导</li><li>tree- - shaking  友 好，打包时去掉未引用的代码</li><li>更好的压缩</li></ol><p>项目开发中，<strong>Hooks 的采用策略：</strong></p><ul><li>不推荐直接使用 Hooks 大规模重构现有组件</li><li>推荐：新功能用 Hooks，复杂功能实现不了的，也可以继续用 class</li><li>找一个功能简单、非核心功能的组件开始使用 hooks</li></ul><h3 id="13-1-5前面的-React-知识是有用的"><a href="#13-1-5前面的-React-知识是有用的" class="headerlink" title="13.1.5前面的 React 知识是有用的"></a>13.1.5前面的 React 知识是有用的</h3><p>class 组件相关的 API 不用了，比如：</p><ul><li><code>class Hello extends Component</code></li><li><code>componentDidMount</code>、<code>componentDidUpdate</code>、<code>componentWillUnmount</code></li><li><code>this</code> 相关的用法</li></ul><p>原来学习的内容还是要用的，比如：</p><ul><li>JSX：<code>&#123;&#125;</code>、<code>onClick=&#123;handleClick&#125;</code>、条件渲染、列表渲染、样式处理等</li><li>组件：函数组件、组件通讯</li><li>路由</li><li>React 开发理念：<code>单向数据流</code>、<code>状态提升</code> 等</li><li>解决问题的思路、技巧、常见错误的分析等上</li></ul><h2 id="13-2useState-Hook"><a href="#13-2useState-Hook" class="headerlink" title="13.2useState Hook"></a>13.2useState Hook</h2><h3 id="13-2-1useState-Hook-的基本使用"><a href="#13-2-1useState-Hook-的基本使用" class="headerlink" title="13.2.1useState Hook 的基本使用"></a>13.2.1useState Hook 的基本使用</h3><ul><li>使用场景：当你想要在<strong>函数组件中，使用组件状态时</strong>，就要使用 <code>useState</code> Hook 了</li><li>作用：为函数组件提供状态（state）</li><li>使用步骤：<ol><li>导入 <code>useState</code> 函数</li><li>调用 <code>useState</code> 函数，并传入状态的初始值</li><li>从 <code>useState</code> 函数的返回值中，拿到状态和修改状态的函数</li><li>在 JSX 中展示状态</li><li>在按钮的点击事件中调用修改状态的函数，来更新状态</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入 `useState` 函数</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> ,&#123;useState&#125;<span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span> ()&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.调用 `useState` 函数，并传入状态的初始值</span></span><br><span class="line">    <span class="comment">//useState()参数，意思是初始值</span></span><br><span class="line">    <span class="comment">//返回值：是一个数组，长度为2</span></span><br><span class="line">    <span class="comment">//下标0：就是这个状态</span></span><br><span class="line">    <span class="comment">//下标1：修改这个状态的函数</span></span><br><span class="line"><span class="comment">//3.从 `useState` 函数的返回值中，拿到状态和修改状态的函数</span></span><br><span class="line">    <span class="keyword">const</span> [count,setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是根组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>我点击了&#123;count&#125;次<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">//4.在按钮的点击事件中调用修改状态的函数，来更新状态</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li><p>参数：<strong>状态初始值</strong>。比如，传入 0 表示该状态的初始值为 0</p><ul><li>注意：此处的状态可以是任意值（比如，数值、字符串等），而 class 组件中的 state 必须是对象</li></ul></li><li><p>返回值：数组，包含两个值：1 状态值（state） 2 修改该状态的函数（setState）</p></li><li><p>使用数组解构简化 <code>useState</code> 的使用</p><ul><li>约定：<strong>修改状态的函数名称以 set 开头，后面跟上状态的名称</strong></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构出来的名称可以是任意名称</span></span><br><span class="line"><span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> [age, setAge] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="13-2-2状态的读取和修改"><a href="#13-2-2状态的读取和修改" class="headerlink" title="13.2.2状态的读取和修改"></a>13.2.2状态的读取和修改</h3><p>状态的使用：1 读取状态 2 修改状态</p><ol><li>读取状态：该方式提供的状态，是函数内部的局部变量，可以在函数内的任意位置使用</li><li>修改状态：</li></ol><ul><li><code>setCount(newValue)</code> 是一个函数，参数表示：<strong>新的状态值</strong></li><li>调用该函数后，将<strong>使用新的状态值<code>替换</code>旧值</strong></li><li>修改状态后，因为状态发生了改变，所以，该组件会重新渲染</li></ul><h3 id="13-2-3组件的更新过程"><a href="#13-2-3组件的更新过程" class="headerlink" title="13.2.3组件的更新过程"></a>13.2.3组件的更新过程</h3><p>函数组件使用 <strong>useState</strong> hook 后的执行过程，以及状态值的变化： </p><ul><li>组件第一次渲染：<ol><li>从头开始执行该组件中的代码逻辑</li><li>调用 <code>useState(0)</code> 将传入的参数作为状态初始值，即：0</li><li>渲染组件，此时，获取到的状态 count 值为： 0</li></ol></li><li>组件第二次渲染：<ol><li>点击按钮，调用 <code>setCount(count + 1)</code> 修改状态，因为状态发生改变，所以，该组件会重新渲染</li><li>组件重新渲染时，会再次执行该组件中的代码逻辑</li><li>再次调用 <code>useState(0)</code>，此时 <strong>React 内部会拿到最新的状态值而非初始值</strong>，比如，该案例中最新的状态值为 1</li><li>再次渲染组件，此时，获取到的状态 count 值为：1</li></ol></li></ul><p>注意：<strong>useState 的初始值(参数)只会在组件第一次渲染时生效</strong>。 </p><p>也就是说，以后的每次渲染，useState 获取到都是最新的状态值。React 组件会记住每次最新的状态值!</p><h3 id="12-3-4为函数组件添加多个状态"><a href="#12-3-4为函数组件添加多个状态" class="headerlink" title="12.3.4为函数组件添加多个状态"></a>12.3.4为函数组件添加多个状态</h3><p>问题：如果一个函数组件需要多个状态，该如何处理?<br>回答：调用 <code>useState</code> Hook 多次即可，每调用一次 useState Hook 可以提供一个状态。<br>注意：useState Hook 多次调用返回的 [state, setState] 相互之间，互不影响。</p><h3 id="12-3-5hooks-的使用规则"><a href="#12-3-5hooks-的使用规则" class="headerlink" title="12.3.5hooks 的使用规则"></a>12.3.5hooks 的使用规则</h3><p>注意：<strong>React Hooks 只能直接出现在 函数组件 中，不能嵌套在 if&#x2F;for&#x2F;其他函数中</strong>！</p><p>否则就会报错：React Hook “useState” is called conditionally. React Hooks must be called in the exact same order in every component render</p><p>React 的 useState 这个 Hook 被条件性（放在一个条件判断中）的调用了。</p><p>React Hooks 必须要每次组件渲染时，按照<strong>相同的顺序</strong>来调用所有的 Hooks。</p><ul><li>为什么会有这样的规则？ 因为 React 是按照 Hooks 的调用顺序来识别每一个 Hook，如果每次调用的顺序不同，导致 React 无法知道是哪一个 Hook</li></ul><h2 id="13-3useEffect-Hook"><a href="#13-3useEffect-Hook" class="headerlink" title="13.3useEffect Hook"></a>13.3useEffect Hook</h2><h3 id="13-3-1side-effect-副作用"><a href="#13-3-1side-effect-副作用" class="headerlink" title="13.3.1side effect - 副作用"></a>13.3.1side effect - 副作用</h3><p>使用场景：当你想要在函数组件中，<strong>处理副作用（side effect）时</strong>，就要使用 <code>useEffect</code> Hook 了<br>作用：<strong>处理函数组件中的副作用（side effect）</strong></p><p>问题：副作用（side effect）是什么?<br>回答：在计算机科学中，如果一个函数或其他操作修改了其局部环境之外的状态变量值，那么它就被称为有副作用。副作用是相对于主作用来说的，一个功能（比如，函数）除了主作用，其他的作用就是副作用<br>对于 React 组件来说，<strong>主作用就是根据数据（state&#x2F;props）渲染 UI</strong>，除此之外都是副作用（比如，手动修改 DOM）**</p><p><strong>常见的副作用（side effect）</strong></p><ul><li>数据（Ajax）请求、手动修改 DOM、localStorage 操作等</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不带副作用的情况：</span></span><br><span class="line"><span class="comment">// 该函数的（主）作用：计算两个数的和</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带副作用的情况：</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="comment">// 因为此处修改函数外部的变量值，而这一点不是该函数的主作用，因此，就是：side effect（副作用）</span></span><br><span class="line">  c = <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带副作用的情况：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="comment">// 因为 console.log 会导致控制台打印内容，所以，也是对外部产生影响，所以，也是：副作用</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有副作用：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有副作用：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// 此处直接修改了参数的值，也是一个副作用</span></span><br><span class="line">  obj.<span class="property">name</span> = <span class="string">&#x27;啊&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> obj.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> o = &#123; <span class="attr">name</span>: <span class="string">&#x27;啊&#x27;</span> &#125;</span><br><span class="line"><span class="title function_">fn</span>(o)</span><br></pre></td></tr></table></figure><h3 id="13-3-2useEffect-的基本使用"><a href="#13-3-2useEffect-的基本使用" class="headerlink" title="13.3.2useEffect 的基本使用"></a>13.3.2useEffect 的基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">//useEffect的参数是一个函数，</span></span><br><span class="line"><span class="comment">//这个函数会在组件渲染好的时候执行(componentDidMount + componentDidUpdate)</span></span><br><span class="line"><span class="comment">//就是在这个函数中写副作用的代码</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`当前已点击 <span class="subst">$&#123;count&#125;</span> 次`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`当前已点击 <span class="subst">$&#123;count&#125;</span> 次`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>参数：回调函数（称为 <strong>effect</strong>），就是<strong>在该函数中写副作用代码</strong></li><li>执行时机：该 effect 会在每次组件更新（DOM更新）后执行，等价于两个钩子函数(componentDidMount + componentDidUpdate)</li></ul><h3 id="13-3-3useEffect-的依赖"><a href="#13-3-3useEffect-的依赖" class="headerlink" title="13.3.3useEffect 的依赖"></a>13.3.3useEffect 的依赖</h3><ul><li>问题：如果组件中有另外一个状态，另一个状态更新时，刚刚的 effect 回调，也会执行 </li><li>性能优化：<strong>跳过不必要的执行，只在 count 变化时，才执行相应的 effect</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`当前已点击 <span class="subst">$&#123;count&#125;</span> 次`</span></span><br><span class="line">&#125;, [count])</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>第二个参数：可选的，可省略；也可以传一个数组，数组中的元素可以成为<strong>依赖项（deps）</strong> </li><li>该示例中表示：只有当 count 改变时，才会重新执行该 effect</li></ul><p>当<code>useEffect</code> 的<strong>依赖</strong>是一个<strong>空数组</strong>时，表示只在组件第一次渲染后执行 effect，因为空数组是不会发生变化的。<br>使用场景：1 事件绑定 2 发送请求获取数据 等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleResize</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, handleResize)</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>该 effect 只会在组件第一次渲染后执行，因此，可以执行像事件绑定等只需要执行一次的操作<ul><li>此时，相当于 class 组件的 componentDidMount 钩子函数的作用</li></ul></li><li>跟 useState Hook 一样，一个组件中也可以调用 useEffect Hook 多次 </li><li>推荐：一个 useEffect  只处理一个功能，有多个功能时，使用多次 useEffect</li></ul><p><strong>注意：如果<code>useEffect</code>的函数使用到了某个依赖项，必须要在第二个参数中填写该依赖</strong></p><p><strong>总结：</strong> useEffect 的使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发时机：1 第一次渲染会执行 2 每次组件重新渲染都会再次执行</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发时机：只在组件第一次渲染时执行</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发时机：1 第一次渲染会执行 2 当 count or money 变化时会再次执行</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;, [count，money])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="13-3-4useEffect-清理组件副作用"><a href="#13-3-4useEffect-清理组件副作用" class="headerlink" title="13.3.4useEffect 清理组件副作用"></a>13.3.4useEffect 清理组件副作用</h3><p>问题：如何在组件卸载时，解绑事件？此时，就用到 effect 的返回值了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleResize</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, handleResize)</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, handleResize)</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>effect 的返回值也是可选的，可省略。也可以返回一个清理函数，用来执行事件解绑等清理操作</li><li>清理函数的执行时机：1【空数组没有依赖】组件卸载时 2 【有依赖项】effect 重新执行前（暂时知道即可） <ul><li>此时，相当于 class 组件的 componentWillUnmount 钩子函数的作用</li></ul></li><li>推荐：一个 useEffect 只处理一个功能，有多个功能时，使用多次 useEffect </li><li>优势：根据业务逻辑来拆分，相同功能的业务逻辑放在一起，而不是根据生命周期方法名称来拆分代码</li></ul><h3 id="13-3-5useEffect-发送请求"><a href="#13-3-5useEffect-发送请求" class="headerlink" title="13.3.5useEffect 发送请求"></a>13.3.5useEffect 发送请求</h3><p>在组件中，使用 useEffect Hook 发送请求获取数据（side effect）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> [list,setList] = <span class="title function_">useState</span>([])</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">getList</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://....&#x27;</span>)</span><br><span class="line">            <span class="title function_">setList</span>(res.<span class="property">data</span>.<span class="property">channels</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">getList</span>()</span><br><span class="line">    &#125;,[])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>注意：<strong>effect 只能是一个同步函数，不能使用 async</strong></li><li>因为 effect 的返回值应该是一个清理函数，React 会在组件卸载或者 effect 的依赖项变化时重新执行 </li><li>但如果 effect 是 async 的，此时返回值是 Promise 对象。这样的话，就无法保证清理函数被立即调用</li><li>如果延迟调用清理函数，也就没有机会忽略过时的请求结果或取消请求</li><li><strong>为了使用 async&#x2F;await 语法，可以在 effect 内部创建 async 函数，并调用</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误演示：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要给 effect 添加 async</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="keyword">async</span> () =&gt; &#123;&#125;, [])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="13-4函数组件的特性、问题"><a href="#13-4函数组件的特性、问题" class="headerlink" title="13.4函数组件的特性、问题"></a>13.4函数组件的特性、问题</h2><p>函数组件的特性说明：</p><ul><li>对于函数组件来说，每次状态更新后，组件都会重新渲染。并且，<strong>每次组件更新都像是在给组件拍照。每张照片就代表组件在某个特定时刻的状态。</strong>或者说：<code>组件的每次特定渲染，都有自己的 props/state/事件处理程序</code> 等。这些照片记录的状态，从代码层面来说，是通过 JS 中函数的闭包机制来实现的。</li></ul><p>问题：</p><ul><li>组件每次重新渲染时，<em>组件内部的事件处理程序等函数都会重新创建，导致子组件每次都会接收到不同的 props，从而重复进行不必要的渲染（性能问题）</em>。我们使用 <code>React.memo</code> 配合 <code>useCallback/useMemo</code>  来解决</li><li>组件内的事件处理程序等函数中，只能获取到那一次特定渲染时的数据，这是合理的（闭包的原因）。使用 <code>useRef Hook</code> 来解决</li></ul><h2 id="13-5React-memo高阶组件"><a href="#13-5React-memo高阶组件" class="headerlink" title="13.5React.memo高阶组件"></a>13.5React.memo高阶组件</h2><h3 id="13-5-1React-memo-高阶组件的使用场景说明："><a href="#13-5-1React-memo-高阶组件的使用场景说明：" class="headerlink" title="13.5.1React.memo 高阶组件的使用场景说明："></a>13.5.1React.memo 高阶组件的使用场景说明：</h3><p>React 组件更新机制：只要父组件状态更新，子组件就会无条件的一起更新。</p><ul><li>子组件 props 变化时更新过程：组件代码执行 -&gt; JSX Diff（配合虚拟 DOM）-&gt; 渲染（变化后的内容）【 DOM 操作】。</li><li>子组件 props 无变化更新过程：组件代码执行 -&gt; JSX Diff（配合虚拟 DOM）【无 DOM 操作】。</li></ul><p>注意：此处更新指的是组件代码执行、JSX 进行 Diff 操作（纯 JS 的操作，速度非常快，不会对性能产生太多影响）。</p><ul><li>如果组件 props 改变了，那么，该组件就必须要更新，才能接收到最新的 props。</li><li>但是，如果组件 props 没有改变时，组件也要进行一次更新。实际上，这一次更新是没有必要的。</li></ul><p>如果要避免组件 props 没有变化而进行的不必要更新（Diff），这种情况下，就要使用 React.memo 高阶组件。</p><h3 id="13-5-2语法"><a href="#13-5-2语法" class="headerlink" title="13.5.2语法"></a>13.5.2语法</h3><p>使用场景：当你想要避免函数组件 props 没有变化而产生的不必要更新时，就要用到 React.memo 了。</p><p>作用：<strong>记忆组件上一次的渲染结果，在 props 没有变化时复用该结果，避免函数组件不必要的更新</strong>。</p><p>解释：</p><ul><li>React.memo 是一个高阶组件，用来记忆（memorize）组件。</li><li>参数（Child）：需要被记忆的组件，或者说是需要避免不必要更新的组件。</li><li>返回值（MemoChild）：React 记住的 Child 组件。</li></ul><p>原理：通过对比检查更新前后 props 是否相同，来决定是否复用上一次的渲染结果，</p><ul><li>如果相同，复用上一次的渲染结果；</li><li>如果不同，重新渲染组件。</li></ul><p><strong>并不是所有的组件都适合使用memo，比如child2组件，每次都需要重新渲染，使用memo反而会使性能变得更低，逻辑也变得更复杂</strong></p><h3 id="13-5-3浅层对比"><a href="#13-5-3浅层对比" class="headerlink" title="13.5.3浅层对比"></a>13.5.3浅层对比</h3><p>默认情况下，React.memo 只会对更新前后的 props 进行浅对比（shallow compare）与 PureComponent 相同。</p><p>也就是说，对于对象类型的 prop 来说，只会比较引用</p><ul><li>如果更新前后的引用相同，复用上一次的渲染结果（不会重新渲染该组件）。</li><li>如果更新前后的引用不同，重新渲染该组件。</li></ul><p>如果你要手动控制比较过程，可以使用 React.memo 的第二个参数</p><p>解释：</p><ul><li>第二个参数：用来比较更新前后 props 的函数。</li><li>返回值：如果返回 true，表示记住（不重新渲染）该组件；如果返回 false，表示重新渲染该组件。</li></ul><h2 id="13-6useCallback"><a href="#13-6useCallback" class="headerlink" title="13.6useCallback"></a>13.6useCallback</h2><h3 id="13-6-1使用场景"><a href="#13-6-1使用场景" class="headerlink" title="13.6.1使用场景"></a>13.6.1使用场景</h3><p>在使用 React.memo 时，对于对象类型的 props，只会比较引用（浅对比）。</p><p>但是，因为<strong>组件每次更新都会创建新的 props 值</strong>，比如，新的对象、事件处理程序等（函数组件的特性）。</p><p>这就导致：React.memo 在处理对象类型的 props 时，会失效（每次的 props 都是新对象）。</p><p>但是，我们还是想让 React.memo 在处理对象类型的 props 时，也有效。</p><p>为了让 React.memo 处理对象类型的 props 有效，只要在<em>组件更新期间保持对象类型引用相</em>等，就可以了。</p><p>这时候，就要用到以下两个 Hooks：</p><ul><li><code>useCallback</code> Hook：记住函数的引用，在组件每次更新时返回相同引用的函数。</li><li><code>useMemo</code> Hook：记住任意数据（数值、对象、函数等），在组件每次更新时返回相同引用的数据【功能之一】</li></ul><h3 id="13-6-2基本使用"><a href="#13-6-2基本使用" class="headerlink" title="13.6.2基本使用"></a>13.6.2基本使用</h3><p>使用场景：在使用 React.memo 时，为了组件每次更新时都能获取到相同引用的函数，就要用到 useCallback Hook</p><p>注意：<strong>需要配合 React.memo 高阶函数一起使用</strong>。</p><p>作用：记忆传入的回调函数，这个被记住的回调函数会一直生效，直到依赖项发生改变</p><p>解释：</p><ul><li>第一个参数：必选，需要被记忆的回调函数。</li><li>第二个参数：必选，依赖项数组，用于指定回调函数中依赖（用到）的数据（类似于 useEffect 的第二个参数）。</li><li>即使没有依赖，也得传入空数组（[]），此时，useCallback 记住的回调函数就会一直生效。</li><li>返回值：useCallback 记住的回调函数。</li><li>useCallback 记住的回调函数会一直生效（或者说会一直返回同一个回调函数），直到依赖项发生改变。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/../pictures/react_log</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>13.和小达一起学Git</title>
    <link href="http://example.com/2022/08/11/13.%E2%80%9D%E7%8E%A9%E8%BD%AC%E2%80%9CGit/"/>
    <id>http://example.com/2022/08/11/13.%E2%80%9D%E7%8E%A9%E8%BD%AC%E2%80%9CGit/</id>
    <published>2022-08-11T11:30:31.000Z</published>
    <updated>2022-08-11T13:19:42.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-版本控制"><a href="#1-版本控制" class="headerlink" title="1.版本控制"></a>1.版本控制</h1><h3 id="1-1手动修改文件版本名字"><a href="#1-1手动修改文件版本名字" class="headerlink" title="1.1手动修改文件版本名字"></a>1.1手动修改文件版本名字</h3><p><strong>缺点：</strong></p><ol><li>操作麻烦：每次都要重命名版本名字</li><li>命名不规范：无法通过文件名知道在当前版本中做了哪些修改</li><li>容易丢失：硬盘故障、失误删除等</li><li>协作困难：需要手动合并每个人对文件项目的修改，合并时及其容易出错</li></ol><h3 id="1-2版本控制系统-软件"><a href="#1-2版本控制系统-软件" class="headerlink" title="1.2版本控制系统(软件)"></a>1.2版本控制系统(软件)</h3><h5 id="1-2-1概念"><a href="#1-2-1概念" class="headerlink" title="1.2.1概念"></a><strong>1.2.1概念</strong></h5><p>​记录文件变化，以便将来查阅特定版本的修订情况的系统。负责管理文件版本</p><h5 id="1-2-2优势"><a href="#1-2-2优势" class="headerlink" title="1.2.2优势"></a><strong>1.2.2优势</strong></h5><ol><li>操作简便：只需机组简单的终端命令就可以快速上手常见的版本控制软件</li><li>易于对比：方便比较文件的变化细节</li><li>易于回溯：可以将选定的文件回溯到之前的状态，甚至将整个项目都回溯到之前的状态</li><li>不易丢失：误删的文件可以轻松的恢复</li><li>协作方便：基于版本控制软件的<strong>分支功能</strong>，可以实现多人协作开发时的代码合并</li></ol><h5 id="1-2-3本地版本控制系统"><a href="#1-2-3本地版本控制系统" class="headerlink" title="1.2.3本地版本控制系统"></a>1.2.3本地版本控制系统</h5><p>​特点：使用软件记录文件的不同版本，降低手动维护版本的出错率</p><p>​缺点：1.单机运行不支持多人协作开发</p><p>​2.版本数据库故障后，所有的历史更新记录会丢失</p><h5 id="1-2-4集中化的版本控制系统（SVN）"><a href="#1-2-4集中化的版本控制系统（SVN）" class="headerlink" title="1.2.4集中化的版本控制系统（SVN）"></a>1.2.4集中化的版本控制系统（SVN）</h5><p>​特点：基于服务器、客户端的运行模式。</p><p>​1.服务器保存文件的所有更新记录</p><p>​2.客户端只保留最新的文件版本</p><p>​优点：</p><p>​联网运行，支持多人开发</p><p>​缺点：</p><p>​1.不支持离线提交版本更新</p><p>​2.中心服务器崩溃后，所有人无法正常工作</p><p>​3.版本数据库故障后，所有历史记录会丢失。</p><h5 id="1-2-5分布式版本控制系统（Git）"><a href="#1-2-5分布式版本控制系统（Git）" class="headerlink" title="1.2.5分布式版本控制系统（Git）"></a>1.2.5分布式版本控制系统（Git）</h5><p>​特点：基于服务器、客户端的运行模式。</p><p>​1.服务器保存文件的所有更新版本</p><p>​2.<strong>客户端是服务器的完整备份</strong></p><p>​优点：</p><p>​1.联网运行，支持多人协作开发</p><p>​2.支持离线本地提交版本更新</p><p>​3.服务器故障后，可使用任何一个客户端的备份进行恢复</p><p>​</p><h1 id="2-Git基础"><a href="#2-Git基础" class="headerlink" title="2.Git基础"></a>2.Git基础</h1><h3 id="2-1概念"><a href="#2-1概念" class="headerlink" title="2.1概念"></a>2.1概念</h3><p>​Git 是一个开源的<strong>分布式版本控制系统</strong>，是目前世界上最先进、最流行的版本控制系统。可以快速高效地处理 </p><p>从很小到非常大的项目版本管理。 </p><p><strong>特点</strong>项目越大越复杂，协同开发者越多，越能体现出 Git 的<strong>高性能和高可用性</strong></p><h3 id="2-2Git的特性"><a href="#2-2Git的特性" class="headerlink" title="2.2Git的特性"></a>2.2Git的特性</h3><p>​Git 之所以快速和高效，主要依赖于它的如下两个特性： </p><p>​① 直接记录<strong>快照</strong>，而非**差异比较 **</p><p>​② 近乎所有操作都是<strong>本地执行</strong></p><h5 id="2-2-1-SVN的差异比较"><a href="#2-2-1-SVN的差异比较" class="headerlink" title="2.2.1 SVN的差异比较"></a>2.2.1 SVN的差异比较</h5><p>​传统的版本控制系统（例如 SVN）是<strong>基于差异</strong>的版本控制，它们存储的是<strong>一组基本文件</strong>和<strong>每个文件随时间逐步 累积的差异</strong>。 </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E5%B7%AE%E5%BC%82%E6%AF%94%E8%BE%83.png"                      alt="差异比较"                ></p><p>​</p><p><strong>优势</strong>节省磁盘空间</p><p><strong>缺点</strong>在每次切换版本的时候，都需要在基本文件的基础上，应用每个差异，从而生成目标版本对应的文件，<strong>耗时，效率低</strong></p><h5 id="2-2-2-Git-的记录快照"><a href="#2-2-2-Git-的记录快照" class="headerlink" title="2.2.2 Git 的记录快照"></a>2.2.2 Git 的记录快照</h5><p>​Git 快照是在原有文件版本的基础上<strong>重新生成</strong>一份新的文件，<strong>类似于备份</strong>。为了效率，如果文件没有修改，Git </p><p>不再重新存储该文件，而是只保留一个链接指向之前存储的文件。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E8%AE%B0%E5%BD%95%E5%BF%AB%E7%85%A7.png"                      alt="记录快照"                ></p><p><strong>优势</strong>版本切换时非常快，因为每个版本都是完整的文件快照，切换版本时直接恢复目标版本的快照即可。</p><p><strong>缺点</strong>占用磁盘空间较大</p><h5 id="2-2-3本地执行"><a href="#2-2-3本地执行" class="headerlink" title="2.2.3本地执行"></a>2.2.3本地执行</h5><p>​在Git 中的绝大多数操作都<strong>只需要访问本地文件和资源</strong>，一般不需要来自网络上其它计算机的信息。</p><p>​断网后依旧可以在本地对项目进行版本管理，联网后，把本地修改的记录同步到云端服务器。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E6%9C%AC%E5%9C%B0%E6%89%A7%E8%A1%8C.png"                      alt="本地执行"                ></p><h3 id="2-3Git的三个区域"><a href="#2-3Git的三个区域" class="headerlink" title="2.3Git的三个区域"></a>2.3Git的三个区域</h3><p><strong>工作区</strong>处理工作的区域</p><p><strong>暂存区</strong>已完成的工作的临时存放区域，等待被提交</p><p><strong>Git仓库</strong>最终的存放区域</p><h3 id="2-4Git的三种状态"><a href="#2-4Git的三种状态" class="headerlink" title="2.4Git的三种状态"></a>2.4Git的三种状态</h3><p><strong>已修改Modified</strong>表示修改了文件，但是还没有将修改的结果放到暂存区，就是<strong>已修改状态</strong></p><p><strong>已暂存staged</strong>表示对已修改文件的当前版本做了标记，使之包含在下次提交的列表中。如果文件已修改并放入暂存区就是<strong>已暂存状态</strong></p><p><strong>已提交committed</strong>表示文件已经安全的保存在本地的Git仓库中，如果Git仓库中<strong>保存着特定版本</strong>的文件，就是<strong>已提交状态</strong></p><h3 id="2-5Git的工作流程"><a href="#2-5Git的工作流程" class="headerlink" title="2.5Git的工作流程"></a>2.5Git的工作流程</h3><p>​1.在工作区修改文件</p><p>​2.将你想要下次提交的更改进行暂存</p><p>​3.找到暂存区的文件，将快照永久性存储到Git仓库</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/Git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png"                      alt="Git工作流程"                ></p><h1 id="3-安装、配置Git"><a href="#3-安装、配置Git" class="headerlink" title="3.安装、配置Git"></a>3.安装、配置Git</h1><h3 id="3-1Git下载"><a href="#3-1Git下载" class="headerlink" title="3.1Git下载"></a>3.1Git下载</h3><p>​<a class="link"   href="https://git-scm.com/downloads" >https://git-scm.com/downloads<i class="fas fa-external-link-alt"></i></a></p><h3 id="3-2配置用户信息"><a href="#3-2配置用户信息" class="headerlink" title="3.2配置用户信息"></a>3.2配置用户信息</h3><p>​设置自己的用户名和邮件地址。因为通过 Git 对项目进行版本管理的时候，Git 需要使用这些基本信息，来记录是谁对项目进行了操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git confit --<span class="variable language_">global</span> user.<span class="property">name</span> <span class="string">&quot;xxx&quot;</span>    <span class="comment">//用户名</span></span><br><span class="line">git confir --<span class="variable language_">global</span> user.<span class="property">email</span> <span class="string">&quot;xxx&quot;</span><span class="comment">//邮箱地址</span></span><br></pre></td></tr></table></figure><p>​<strong>全局配置文件</strong>可以在C：&#x2F;users&#x2F;xxx&#x2F;.gitconfig文件中找到，记录了自己对Git做的全局性的配置。</p><h3 id="3-3查看全局配置信息"><a href="#3-3查看全局配置信息" class="headerlink" title="3.3查看全局配置信息"></a>3.3查看全局配置信息</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --list --<span class="variable language_">global</span><span class="comment">//查看所有的全局配置项</span></span><br><span class="line"></span><br><span class="line">git config user.<span class="property">name</span><span class="comment">//查看指定的全局配置项</span></span><br><span class="line">git config user.<span class="property">email</span></span><br></pre></td></tr></table></figure><h3 id="3-4帮助信息"><a href="#3-4帮助信息" class="headerlink" title="3.4帮助信息"></a>3.4帮助信息</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git help &lt;verb&gt;<span class="comment">//无需联网即可打开帮助手册</span></span><br><span class="line">git help config</span><br><span class="line"></span><br><span class="line">git config -h<span class="comment">//在终端打印更简明的help输出</span></span><br></pre></td></tr></table></figure><h1 id="4-Git操作"><a href="#4-Git操作" class="headerlink" title="4.Git操作"></a>4.Git操作</h1><h3 id="4-1获取Git仓库"><a href="#4-1获取Git仓库" class="headerlink" title="4.1获取Git仓库"></a>4.1获取Git仓库</h3><h5 id="4-1-1将尚未进行版本控制的本地目录转换为Git仓库"><a href="#4-1-1将尚未进行版本控制的本地目录转换为Git仓库" class="headerlink" title="4.1.1将尚未进行版本控制的本地目录转换为Git仓库"></a>4.1.1将尚未进行版本控制的本地目录转换为Git仓库</h5><p>​1.在项目的目录右键打开<strong>Git Bash</strong></p><p>​2.执行<strong>git init</strong>命令将当前目录转化为Git仓库</p><p>​（git init 命令会创建一个名为 .git 的隐藏目录，<strong>这个 .git 目录就是当前项目的 Git 仓库</strong>，里面包含了初始的必要文件，这些文件是 Git 仓库的必要组成部分。）</p><h5 id="4-1-2从其他服务器克隆已存在的Git仓库"><a href="#4-1-2从其他服务器克隆已存在的Git仓库" class="headerlink" title="4.1.2从其他服务器克隆已存在的Git仓库"></a>4.1.2从其他服务器克隆已存在的Git仓库</h5><h3 id="4-2工作区中文件的两大类和四种状态"><a href="#4-2工作区中文件的两大类和四种状态" class="headerlink" title="4.2工作区中文件的两大类和四种状态"></a>4.2工作区中文件的两大类和四种状态</h3><p>​<strong>1.未被Git管理(未跟踪Untracked)</strong></p><p>​未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围，除非手动设置。</p><p>​<strong>2.已被Git管理</strong></p><p>​<strong>2.1未修改(Unmodified)：</strong>工作区文件的内容和Git仓库中的文件内容保持一致</p><p>​<strong>2.2已修改(Modified)：</strong>工作区文件的内容和Git仓库文件的内容不一致</p><p>​<strong>2.3已暂存(Staged)：</strong>工作区中被修改的文件已放到暂存区，准备保存到Git仓库中</p><h3 id="4-3检查文件状态git-status"><a href="#4-3检查文件状态git-status" class="headerlink" title="4.3检查文件状态git status"></a>4.3检查文件状态git status</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git status -s   <span class="comment">//精简的显示文件状态，-s是--short的简写</span></span><br><span class="line"><span class="comment">//??表示未跟踪的文件</span></span><br><span class="line"><span class="comment">//A 表示新添加到暂存区的文件</span></span><br></pre></td></tr></table></figure><h3 id="4-4跟踪新文件，暂存文件git-add"><a href="#4-4跟踪新文件，暂存文件git-add" class="headerlink" title="4.4跟踪新文件，暂存文件git add"></a>4.4跟踪新文件，暂存文件git add</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add index.<span class="property">html</span></span><br><span class="line">git add .   <span class="comment">//一次性将所有新增和修改过的文件加入暂存区</span></span><br></pre></td></tr></table></figure><h3 id="4-5提交更新git-commit"><a href="#4-5提交更新git-commit" class="headerlink" title="4.5提交更新git commit"></a>4.5提交更新git commit</h3><p>​使用git commit命令提交到Git仓库进行保存，同时可以使用-m 选项对提交的内容进行描述</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;新建了index.html文件&quot;</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E6%8F%90%E4%BA%A4%E6%9B%B4%E6%96%B0.png"                      alt="提交更新"                ></p><h3 id="4-6对以提交的文件修改并暂存git-add-git-commit"><a href="#4-6对以提交的文件修改并暂存git-add-git-commit" class="headerlink" title="4.6对以提交的文件修改并暂存git add git commit"></a>4.6对以提交的文件修改并暂存git add git commit</h3><p>​目前index.html已经被Git跟踪，且工作区和Git仓库中的index。html文件内容一致。当我们修改工作区的index.html之后，再次运行<strong>git status</strong>，会出现<strong>Changes not staged for commit</strong>，表示<strong>已跟踪的文件内容发生变化，但是还没有放到暂存区</strong>，这时需要再次运行<strong>git add将已跟踪的，已修改的文件放到暂存区</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改文件后执行</span></span><br><span class="line">git add index.<span class="property">html</span><span class="comment">//此时会把文件放到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;初始化&quot;</span>  <span class="comment">//此时会提交到仓库</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E4%BF%AE%E6%94%B9%E5%B9%B6%E6%8F%90%E4%BA%A4%E6%9A%82%E5%AD%98.png"                      alt="修改并提交暂存"                ></p><h3 id="4-7撤销对文件的修改git-checkout"><a href="#4-7撤销对文件的修改git-checkout" class="headerlink" title="4.7撤销对文件的修改git checkout"></a>4.7撤销对文件的修改git checkout</h3><p>​将工作区中对应文件的修改<strong>还原成Git仓库保存的版本</strong>，操作后所有修改丢失且无法恢复，<strong>谨慎！！！！！</strong>（用 Git 仓库中保存的文件，覆盖工作区中指定的文件。）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- index.<span class="property">html</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9.png"                      alt="撤销修改"                ></p><h3 id="4-8取消暂存的文件git-reset-HEAD"><a href="#4-8取消暂存的文件git-reset-HEAD" class="headerlink" title="4.8取消暂存的文件git reset HEAD"></a>4.8取消暂存的文件git reset HEAD</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset <span class="variable constant_">HEAD</span> index.<span class="property">html</span><span class="comment">//从暂存区移除</span></span><br><span class="line">git reset <span class="variable constant_">HEAD</span> .<span class="comment">//从暂存区移除所有文件</span></span><br></pre></td></tr></table></figure><h3 id="4-9跳过使用暂存区域"><a href="#4-9跳过使用暂存区域" class="headerlink" title="4.9跳过使用暂存区域"></a>4.9跳过使用暂存区域</h3><p>​Git 标准的工作流程是<strong>工作区 → 暂存区 → Git 仓库</strong>，但有时候这么做略显繁琐，此时可以跳过暂存区，直接将 工作区中的修改提交到 Git 仓库，这时候 Git 工作的流程简化为了<strong>工作区 → Git 仓库</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m <span class="string">&quot;描述&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-10删除文件git-rm"><a href="#4-10删除文件git-rm" class="headerlink" title="4.10删除文件git rm"></a>4.10删除文件git rm</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从 Git仓库和工作区中同时移除对应的文件</span></span><br><span class="line">git rm -f index.<span class="property">js</span></span><br><span class="line"><span class="comment">//只从 Git仓库中移除指定的文件，但保留工作区中对应的文件</span></span><br><span class="line">git rm --cached index.<span class="property">js</span></span><br></pre></td></tr></table></figure><h3 id="4-11忽略文件"><a href="#4-11忽略文件" class="headerlink" title="4.11忽略文件"></a>4.11忽略文件</h3><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 在这种情况下，我们可 以创建一个名为 .gitignore 的配置文件，列出要忽略的文件的匹配模式。 </p><p>文件 .gitignore 的格式规范如下： </p><p>​1.以 # 开头的是注释 </p><p>​2.以 &#x2F; 结尾的是目录 </p><p>​3.以 &#x2F; 开头防止递归 </p><p>​4.以 ! 开头表示取反 </p><p>​5.可以使用 glob 模式进行文件和文件夹的匹配（glob 指简化了的正则表达式）</p><p>​① <strong>星号 *</strong> 匹配零个或多个任意字符 </p><p>​② <strong>[abc]</strong> 匹配任何一个列在方括号中的字符 （此案例匹配一个 a 或匹配一个 b 或匹配一个 c） </p><p>​③ <strong>问号 ?</strong> 只匹配一个任意字符 </p><p>​④ 在方括号中使用<strong>短划线</strong>分隔两个字符， 表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字） </p><p>​⑤ <strong>两个星号 *</strong>* 表示匹配任意中间目录（比如 a&#x2F;**&#x2F;z 可以匹配 a&#x2F;z 、 a&#x2F;b&#x2F;z 或 a&#x2F;b&#x2F;c&#x2F;z 等）</p><h3 id="4-12查看提交历史git-log"><a href="#4-12查看提交历史git-log" class="headerlink" title="4.12查看提交历史git log"></a>4.12查看提交历史git log</h3><p>​返回包括了<strong>作者和邮箱</strong>，<strong>提交时间</strong>，<strong>提交描述</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按照时间顺序列出所有的提交历史，最近的在最上</span></span><br><span class="line">git log</span><br><span class="line"><span class="comment">//仅显示最近的3条提交历史</span></span><br><span class="line">git log -<span class="number">3</span></span><br><span class="line"><span class="comment">//在一行上展示最近的3条提交历史</span></span><br><span class="line">git log -<span class="number">3</span> --pretty=oneline</span><br><span class="line"><span class="comment">//在一行上展示最近的3条提交历史，并自定义输出的格式</span></span><br><span class="line">git log -<span class="number">2</span> --pretty=<span class="attr">format</span>:<span class="string">&quot; %h | %an | %ar | %s &quot;</span></span><br><span class="line"><span class="comment">//%h提交的简写哈希值%an作者%ar时间%s提交描述</span></span><br></pre></td></tr></table></figure><h3 id="4-13回退到指定的版本"><a href="#4-13回退到指定的版本" class="headerlink" title="4.13回退到指定的版本"></a>4.13回退到指定的版本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////在一行上展示所有提交历史</span></span><br><span class="line">git log --pretty=oneline</span><br><span class="line"><span class="comment">//根据指定ID退回指定版本</span></span><br><span class="line">git reset --hard &lt;<span class="title class_">CommitID</span>&gt;</span><br><span class="line"><span class="comment">//退回旧版本后，使用git reflog查看命令操作历史</span></span><br><span class="line">git reflog --pretty=oneline</span><br><span class="line"><span class="comment">//根据最新提交的ID，跳转到最新的版本</span></span><br><span class="line">git reset --hard &lt;<span class="title class_">CommitID</span>&gt;</span><br></pre></td></tr></table></figure><h1 id="5-Github配置"><a href="#5-Github配置" class="headerlink" title="5. Github配置"></a>5. Github配置</h1><h3 id="5-1远程仓库的两种访问模式"><a href="#5-1远程仓库的两种访问模式" class="headerlink" title="5.1远程仓库的两种访问模式"></a>5.1远程仓库的两种访问模式</h3><h5 id="5-1-1-HTTPS"><a href="#5-1-1-HTTPS" class="headerlink" title="5.1.1.HTTPS"></a>5.1.1.HTTPS</h5><p>​零配置；但是每次访问仓库时，需要重复输入 Github 的账号和密码</p><h5 id="5-1-2SSH"><a href="#5-1-2SSH" class="headerlink" title="5.1.2SSH"></a>5.1.2SSH</h5><p>​需要进行额外的配置；但是配置成功后，每次访问仓库时，不需重复输入 Github 的账号和密码</p><h3 id="5-2基于HTTP将本地仓库上传到Github"><a href="#5-2基于HTTP将本地仓库上传到Github" class="headerlink" title="5.2基于HTTP将本地仓库上传到Github"></a>5.2基于HTTP将本地仓库上传到Github</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果本地没有仓库</span></span><br><span class="line">echo <span class="string">&quot;# &quot;</span> &gt;&gt; <span class="variable constant_">README</span>.<span class="property">md</span></span><br><span class="line">git init</span><br><span class="line">git add <span class="variable constant_">README</span>.<span class="property">md</span></span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin <span class="attr">https</span>:<span class="comment">//github.com/...</span></span><br><span class="line">git push -u origin main</span><br><span class="line">git push<span class="comment">//将本地仓库最新的代码推送到仓库里</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2基于SSH将本地仓库上传到Github"><a href="#5-2基于SSH将本地仓库上传到Github" class="headerlink" title="5.2基于SSH将本地仓库上传到Github"></a>5.2基于SSH将本地仓库上传到Github</h3><h5 id="5-2-1-SSH-key"><a href="#5-2-1-SSH-key" class="headerlink" title="5.2.1 SSH key"></a>5.2.1 SSH key</h5><p>​<strong>SSH Key 的作用：</strong>实现本地仓库和Github之间<strong>免登录</strong>的<strong>加密传输</strong></p><p>​① id_rsa（私钥文件，存放于客户端的电脑中即可） </p><p>​② id_rsa.pub（公钥文件，需要配置到 Github 中）</p><h5 id="5-2-2生成SSH-key"><a href="#5-2-2生成SSH-key" class="headerlink" title="5.2.2生成SSH key"></a>5.2.2生成SSH key</h5><p>​1.打开Git Bash</p><p>​2.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b <span class="number">4096</span> -C <span class="string">&quot;注册Github帐号的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>​3.三次回车，在C:\Users\用户名.ssh生成id_rsa和id_rsa.pub两个文件</p><h5 id="5-2-3配置SSH-key"><a href="#5-2-3配置SSH-key" class="headerlink" title="5.2.3配置SSH key"></a>5.2.3配置SSH key</h5><p>​1.打开id_rsa.pub，复制文本里的内容</p><p>​2.GithubSettingsSSH and GPG KeysNew SSH key</p><p>​3.将 id_rsa.pub 文件中的内容，粘贴到 Key 对应的文本框中</p><h5 id="5-2-4检测SSH-key是否配置成功"><a href="#5-2-4检测SSH-key是否配置成功" class="headerlink" title="5.2.4检测SSH key是否配置成功"></a>5.2.4检测SSH key是否配置成功</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Git Bash</span></span><br><span class="line">ssh -T git@github.<span class="property">com</span></span><br></pre></td></tr></table></figure><h5 id="5-2-5将远程仓库地址克隆到本地"><a href="#5-2-5将远程仓库地址克隆到本地" class="headerlink" title="5.2.5将远程仓库地址克隆到本地"></a>5.2.5将远程仓库地址克隆到本地</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 远程仓库地址<span class="comment">//SSH或Https</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果本地有仓库</span></span><br><span class="line">git remote add origin <span class="attr">https</span>:<span class="comment">//github.com/...</span></span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br><span class="line">git push<span class="comment">//将本地仓库最新的代码推送到仓库里</span></span><br></pre></td></tr></table></figure><h1 id="6-Github分支"><a href="#6-Github分支" class="headerlink" title="6. Github分支"></a>6. Github分支</h1><h3 id="6-1分支"><a href="#6-1分支" class="headerlink" title="6.1分支"></a>6.1分支</h3><p>​协同开发时，为了防止互相干扰，提高协同开发体验，每个开发者都基于分支进行项目开发，待每个人的功能开发测试完毕后，合并到master主分支</p><h3 id="6-2-master主分支"><a href="#6-2-master主分支" class="headerlink" title="6.2 master主分支"></a>6.2 master主分支</h3><p>​<strong>初始化</strong>本地仓库时**(git init)<strong>，Git默认创建一个</strong>master分支<strong>，通常把master分支叫主分支，</strong>用来保存和记录整个项目已完成的功能代码**，实际开发中不允许直接在master分支修改代码，容易导致项目崩溃</p><h3 id="6-3-功能分支"><a href="#6-3-功能分支" class="headerlink" title="6.3 功能分支"></a>6.3 功能分支</h3><p>​用以开发<strong>新功能</strong>的分支，是临时从master主分支上分叉出来的，当新功能开发且测试完成后，<strong>最终合并到master主分支上</strong></p><h3 id="6-4命令集合"><a href="#6-4命令集合" class="headerlink" title="6.4命令集合"></a>6.4命令集合</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.查看分支列表</span></span><br><span class="line">git branch<span class="comment">//*master，*号代表当前所处的分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建新分支</span></span><br><span class="line"><span class="comment">//是基于当前分支进行创建的，新分支的代码等于当前分支的代码。创建分支后，仍在原分支，不会进行切换。</span></span><br><span class="line">git branch new_branch_name</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.切换分支，切换到指定的分支上进行开发</span></span><br><span class="line">git checkout new_branch_name<span class="comment">//switched to branch new_branch_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.快速创建和切换分支，创建新分支，立即切换到新分支上</span></span><br><span class="line">git checkout -b new_branch_name</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.合并分支</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge new_branch_name<span class="comment">//先切换到主分支，然后将新分支的代码合并到主分支上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.删除分支</span></span><br><span class="line">git branch -d new_branch_name<span class="comment">//删除分支时，保证自己不处于被删除的分支上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//7.将本地分支推送到远程仓库,第一次推送需要-u参数</span></span><br><span class="line"><span class="comment">//git push -u 远程仓库名称 本地分支名称:远程分支名称</span></span><br><span class="line">git push -u origin <span class="attr">payment</span>:pay</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.查看远程仓库中所有的分支列表</span></span><br><span class="line"><span class="comment">//git remote show 远程仓库名称</span></span><br><span class="line">git remote show origin</span><br><span class="line"></span><br><span class="line"><span class="comment">//9.跟踪分支，从远程仓库中，把远程分支下载到本地仓库</span></span><br><span class="line"><span class="comment">//git checkout 远程分支名称 </span></span><br><span class="line"><span class="comment">//git checkout -b 重命名本地分支名称 远程仓库名称/远程分支名称</span></span><br><span class="line">git checkout -b payment origin/pay</span><br><span class="line"></span><br><span class="line"><span class="comment">//10.拉取远程分支的最新代码,拉去当前分支最新的代码，保持当前分支的代码和远程分支一致</span></span><br><span class="line">git pull<span class="comment">//处于哪个分支，就更新哪个分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//11.删除远程分支</span></span><br><span class="line"><span class="comment">//git push 远程仓库名称 --delete 远程分支名称</span></span><br><span class="line">git push origin --<span class="keyword">delete</span> pay</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-5遇到冲突时的合并"><a href="#6-5遇到冲突时的合并" class="headerlink" title="6.5遇到冲突时的合并"></a>6.5遇到冲突时的合并</h3><p>​如果<strong>两个不同的分支</strong>，<strong>对同一个文件</strong>进行了<strong>不同的修改</strong>，Git无法干净的合并，此时需要打开包含冲突的文件然后<strong>手动解决冲突</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解决冲突之后</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;解决了分支合并冲突问题&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-版本控制&quot;&gt;&lt;a href=&quot;#1-版本控制&quot; class=&quot;headerlink&quot; title=&quot;1.版本控制&quot;&gt;&lt;/a&gt;1.版本控制&lt;/h1&gt;&lt;h3 id=&quot;1-1手动修改文件版本名字&quot;&gt;&lt;a href=&quot;#1-1手动修改文件版本名字&quot; class=&quot;he</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>12.和小达一起学Redux</title>
    <link href="http://example.com/2022/08/11/12.%E2%80%9D%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E2%80%9CRedux/"/>
    <id>http://example.com/2022/08/11/12.%E2%80%9D%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E2%80%9CRedux/</id>
    <published>2022-08-11T11:30:31.000Z</published>
    <updated>2022-08-11T13:19:09.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/redux.png"                      alt="React Logo"                ></p><p><a class="link"   href="https://www.cntofu.com/book/4/README.md" >redux中文文档<i class="fas fa-external-link-alt"></i></a> <a class="link"   href="https://redux.js.org/introduction/getting-started" >redux官网（英文）<i class="fas fa-external-link-alt"></i></a> </p><p>React技术栈：</p><ul><li>React核心：React   Hooks</li><li>react-router（react-router-dom）</li><li>状态管理： mobx（简单）&#x2F; redux（复杂）—–中间件： redux-thunk  redux-saga(用于发异步请求)</li></ul><h1 id="1-Redux介绍"><a href="#1-Redux介绍" class="headerlink" title="1.Redux介绍"></a>1.Redux介绍</h1><p>React负责渲染UI，Redux负责管理组件的状态</p><h2 id="1-1概念"><a href="#1-1概念" class="headerlink" title="1.1概念"></a>1.1概念</h2><p>​Redux 是 react 中最流行的状态管理工具之一</p><p>​集中的方式统一管理所有的共享数据。  </p><h2 id="1-2起源"><a href="#1-2起源" class="headerlink" title="1.2起源"></a>1.2起源</h2><p>​React 只是 DOM 的一个抽象层（UI 库），并不是 Web 应用的完整解决方案。因此react在涉及到数据的处理以及组件之间的通信时会很吃力</p><ul><li>对于大型的复杂应用来说，这两方面恰恰是最关键的。因此，只用 React，写大型应用比较吃力。</li><li>2014 年 Facebook 提出了 Flux 架构的概念，引发了很多的实现。</li><li>2015 年，Redux 出现，将 Flux 与函数式编程（reducer）结合一起，很短时间内就成为了最热门的前端架构。 Flux 是最早的状态管理工具，它提供了状态管理的思想，也提供对应的实现</li><li>除了 Flux、Redux 之外，还有：Mobx 等状态管理工具</li></ul><h1 id="2-Redux基本使用-独立使用"><a href="#2-Redux基本使用-独立使用" class="headerlink" title="2.Redux基本使用(独立使用)"></a>2.Redux基本使用(独立使用)</h1><h2 id="2-1Redux管理流程"><a href="#2-1Redux管理流程" class="headerlink" title="2.1Redux管理流程"></a>2.1Redux管理流程</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../pictures/Redux%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B.png"                      alt="Redux管理流程"                ></p><ul><li><p><code>React Components</code>:组件，组件用于渲染数据，可以自己提供数据，也可以从<code>Store的state</code>获取数据，store的数据变了，组件的数据也会跟着变</p></li><li><p><code>store</code>：redux仓库。存储数据并提供数据(提供了state与操作state的方法)。把action交给<code>Reducers</code>处理，是整个redux应用的管理者，指挥<code>action</code>和<code>reducer</code>干活的。一个redux项目中只有一个store。</p></li><li><p><code>Action Creators</code>：创建action，然后dispatch分发action。action表示一个动作（添加内容，删除内容等），但是不执行，只提供“想法”。</p></li><li><p><code>Reducers</code>：用于处理各种各样的action，接收就状态，返回新状态。（根据action来完成这个动作，reducer不会主动完成action，需要store控制）</p></li></ul><h2 id="2-2安装、导入"><a href="#2-2安装、导入" class="headerlink" title="2.2安装、导入"></a>2.2安装、导入</h2><ul><li>安装</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install redux</span><br><span class="line">yarn add redux</span><br></pre></td></tr></table></figure><ul><li>导入redux包</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;../node_modules/redux/dist/redux.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>测试redux是否安装成功</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">Redux</span>)</span><br></pre></td></tr></table></figure><h2 id="2-3redux-action"><a href="#2-3redux-action" class="headerlink" title="2.3redux-action"></a>2.3redux-action</h2><h3 id="2-3-1redux-action介绍"><a href="#2-3-1redux-action介绍" class="headerlink" title="2.3.1redux-action介绍"></a>2.3.1redux-action介绍</h3><ul><li>actions 只是描述了<code>有事情发生了</code>这一事实，而不是真正修改数据的位置</li><li>action 是任务的抽象，视图中的每个用户交互都是一个 action，比如：添加任务、删除任务、登录、加入购物车等</li><li>Action 本质上是 JavaScript 普通对象，action 内必须使用一个字符串类型的 <code>type</code> 字段来表示将要执行的动作<strong>type的值是一个字符串，且唯一</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;ADD&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sub = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;SUB&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>规则：</strong></p><ol><li>action必须提供<code>type属性</code>，值是一个字符串，采用<strong>全大写字母</strong>表示，多个单词使用 <strong>_</strong> 连接</li></ol><h3 id="2-3-2redux-action-creator-函数创建action"><a href="#2-3-2redux-action-creator-函数创建action" class="headerlink" title="2.3.2redux-action creator(函数创建action)"></a>2.3.2redux-action creator(函数创建action)</h3><ul><li>直接使用对象来创建action不灵活，参数写死了。一般会使用<strong>函数来创建action</strong>，我们把创建action的函数叫做<strong>actionCreator</strong></li><li>action creator创建函数只是简单的返回一个 action</li><li>action creator创建函数的好处是更容易被移植和测试，里面不应有任何逻辑，唯一的逻辑就是为了返回对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接定义对象</span></span><br><span class="line"><span class="keyword">const</span> increment = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数创建对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">del</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&#x27;DEL&#x27;</span> ,</span><br><span class="line">        id</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">del</span> = (<span class="params">id</span>) =&gt; (&#123;<span class="attr">type</span>:<span class="string">&#x27;DEL&#x27;</span> ,d&#125;)<span class="comment">//简写要用小括号包裹，不然对象的花括号会被当成箭头函数的花括号</span></span><br><span class="line"><span class="comment">//要得到对象，直接调用函数</span></span><br><span class="line"><span class="title function_">del</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>action创建函数只是为了<strong>易移植</strong></p><h2 id="2-4redux-reducer函数"><a href="#2-4redux-reducer函数" class="headerlink" title="2.4redux-reducer函数"></a>2.4redux-reducer函数</h2><h3 id="2-4-1-redux-reducer介绍"><a href="#2-4-1-redux-reducer介绍" class="headerlink" title="2.4.1 redux-reducer介绍"></a>2.4.1 redux-reducer介绍</h3><p>state、action都书写完毕，但二者目前没任何关系，通过学习reducer将二者产生联系</p><ul><li><code>Reducer</code>是一个函数，用于提供处理action的逻辑</li><li>reducer 就是一个<code>纯函数</code>(只要是固定的输入，必定得到固定的输出)，接收旧的 state 和 action，返回新的 state</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducuer的作用：处理action</span></span><br><span class="line"><span class="comment">//1. reudcer的state需要有一个默认值，这个默认值就是redux的初始值</span></span><br><span class="line"><span class="comment">//2. reducer内部需要判断action的type，根据type进行处理，处理的时候不能修改原来的数据</span></span><br><span class="line"><span class="comment">//3. reducer如果遇到不认识的type，一定要返回原来的state(注意！)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state = <span class="number">0</span>, action</span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.<span class="property">type</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;ADD&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;MINUS&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">        <span class="keyword">default</span> :</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>要保证reducer函数的纯函数特点，不要直接修改state</li><li>遇到未知的 action 时，一定要返回旧的 <code>state</code></li></ul><h3 id="2-4-2纯函数"><a href="#2-4-2纯函数" class="headerlink" title="2.4.2纯函数"></a>2.4.2纯函数</h3><ul><li><strong>特点：</strong>相同的输入，必定得到相同的输出</li><li><strong>好处：</strong><ul><li>没有副作用，副作用指的是例如函数中一些异步调用或者会影响函数作用域之外的变量一类的操作</li><li>可以缓存</li></ul></li><li><strong>纯函数的原则：</strong><ul><li>不得改写参数</li><li>不能调用Date.now()或者Math.random()等不纯的方法，因为会得到不同的结果</li><li>不能使用全局变量(全局变量会被别人改掉)</li></ul></li></ul><h2 id="2-4redux-store状态管理"><a href="#2-4redux-store状态管理" class="headerlink" title="2.4redux-store状态管理"></a>2.4redux-store状态管理</h2><p>state、action、reducer都书写完毕，但目前三者还没联系，reducer函数没有调用，<strong>通过store进行使用打通数据管理</strong></p><ol><li><strong>Store</strong> 是把actioin、reducer联系到一起的对象 &#x3D;&gt; 利用Redux的API进行创建createStore()</li><li>提供 <a href="https://www.cntofu.com/book/4/docs/api/Store.md#getState"><code>getState()</code></a> 方法获取 state</li><li>提供 <a href="https://www.cntofu.com/book/4/docs/api/Store.md#dispatch"><code>dispatch(action)</code></a> 方法更新 state；</li><li>通过 <a href="https://www.cntofu.com/book/4/docs/api/Store.md#subscribe"><code>subscribe(listener)</code></a> 注册监听器;</li><li>通过 <a href="https://www.cntofu.com/book/4/docs/api/Store.md#subscribe"><code>subscribe(listener)</code></a> 返回的函数注销监听器。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//store</span></span><br><span class="line"><span class="comment">//1.解构出store</span></span><br><span class="line"><span class="keyword">const</span> &#123; createStore &#125; = <span class="variable language_">window</span>.<span class="property">Redux</span></span><br><span class="line"><span class="comment">//2.通过createStore()创建出一个store，注意需要传参数，把reducer传进去</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer)</span><br><span class="line"><span class="comment">//3. store.getState() 获取redux中的数据，注意：第一次获取的是默认值</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>).<span class="property">innerHTML</span> = store.<span class="title function_">getState</span>()</span><br><span class="line"><span class="comment">//5. 订阅subscribe()：只要state发生了变化，这个订阅的回调函数就会执行</span></span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(store.<span class="title function_">getState</span>())</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>).<span class="property">innerHTML</span> = store.<span class="title function_">getState</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//4. 安排任务store.dispatch()</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.add&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">add</span>())</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.minus&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">minus</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止监听 state 更新unsubscribe()，使用了就会取消监听</span></span><br><span class="line"><span class="title function_">unsubscribe</span>();</span><br></pre></td></tr></table></figure><p><strong>注意代码数据：</strong>先创建store，启动监听，修改数据时自动在监听里面获取最新的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//单纯用Redux实现加一减一的功能</span></span><br><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我当前的数量：<span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;minus&quot;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/redux/dist/redux.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&#x27;ADD&#x27;</span> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> <span class="title function_">minus</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&#x27;MINUS&#x27;</span> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// reducuer的作用：处理action</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//1. reudcer的state需要有一个默认值，这个默认值就是redux的初始值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//2. reducer内部需要判断action的type，根据type进行处理，处理的时候不能修改原来的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//3. reducer如果遇到不认识的type，一定要返回原来的state(注意！)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state = <span class="number">100</span>, action</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">case</span> <span class="string">&#x27;ADD&#x27;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> state + <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">case</span> <span class="string">&#x27;MINUS&#x27;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> state - <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">default</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> state</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//store</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//1.解构出store</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> &#123; createStore &#125; = <span class="variable language_">window</span>.<span class="property">Redux</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//2.通过createStore()创建出一个store，注意需要传参数，把reducer传进去</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//3. store.getState() 获取redux中的数据，注意：第一次获取的是默认值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>).<span class="property">innerHTML</span> = store.<span class="title function_">getState</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//5. 订阅subscribe()：只要state发生了变化，这个订阅的回调函数就会执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(store.<span class="title function_">getState</span>())</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>).<span class="property">innerHTML</span> = store.<span class="title function_">getState</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//4. 安排任务store.dispatch()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.add&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        store.<span class="title function_">dispatch</span>(<span class="title function_">add</span>())</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.minus&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        store.<span class="title function_">dispatch</span>(<span class="title function_">minus</span>())</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-Redux配合React使用"><a href="#3-Redux配合React使用" class="headerlink" title="3.Redux配合React使用"></a>3.Redux配合React使用</h1><h2 id="3-1react-redux包的基本使用"><a href="#3-1react-redux包的基本使用" class="headerlink" title="3.1react-redux包的基本使用"></a>3.1react-redux包的基本使用</h2><p><code>目标</code>：使用<a class="link"   href="https://react-redux.js.org/introduction/getting-started" >react-redux<i class="fas fa-external-link-alt"></i></a>简化redux在react项目中的使用 </p><p><code>内容</code>：</p><ol><li>介绍react-redux &#x3D;&gt; yarn add react-redux</li><li>安装并且配置react-redux &#x3D;&gt; 参考文档</li><li>优化刚才的代码</li></ol><p><code>核心代码</code></p><p><code>store/store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; addReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;./reducers.js&#x27;</span></span><br><span class="line"><span class="keyword">let</span> store = <span class="title function_">createStore</span>(addReducer)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p><code>store/reducers.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">addReducer</span> = (<span class="params"></span></span><br><span class="line"><span class="params">  state = &#123;</span></span><br><span class="line"><span class="params">    count: <span class="number">1</span>,</span></span><br><span class="line"><span class="params">  &#125;,</span></span><br><span class="line"><span class="params">  action</span></span><br><span class="line"><span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ADD&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, state, &#123; <span class="attr">count</span>: action.<span class="property">count</span> &#125;)</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/store.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>App.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/actions&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(props)</span><br><span class="line">  <span class="keyword">const</span> &#123; count, dispatch1 &#125; = props</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>App<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          dispatch1()</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        点我+2</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state, ownProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; count &#125; = state</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch, ownProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">dispatch1</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(<span class="title function_">add</span>(<span class="number">2</span>))</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">App</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>要点</code>：</p><ol><li>react-redux只是简化了在react项目中使用redux的过程</li><li>redux和react-redux两个包都需要安装和使用，各司其职</li><li>需要知道Provider和connect的作用</li><li>connect是高阶组件 &#x3D;&gt; 把redux里面数据和修改数据的方法映射到组件中为了使用方便</li></ol><h2 id="3-2react-redux结合hooks用法-useSelector"><a href="#3-2react-redux结合hooks用法-useSelector" class="headerlink" title="3.2react-redux结合hooks用法-useSelector"></a>3.2react-redux结合hooks用法-useSelector</h2><p><code>目标</code>：结合hooks使用react-redux</p><p><code>内容</code>：</p><ol><li>react-redux提供了useSelector</li><li>useSelector： 从Redux 的 store 中获取 状态(state) 数据。</li><li>selector 函数应该是个纯函数</li></ol><p><code>App.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import &#123; add, addAfterOneSecond &#125; from &#x27;./store/actions&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>App<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          // dispatch(add(2))</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        点我+2</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          // dispatch(addAfterOneSecond(2))</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        点我1s后+2</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>要点</code>：</p><ul><li>Provider组件依然需要使用</li></ul><h2 id="3-3react-redux结合hooks用法-useDispatch"><a href="#3-3react-redux结合hooks用法-useDispatch" class="headerlink" title="3.3react-redux结合hooks用法-useDispatch"></a>3.3react-redux结合hooks用法-useDispatch</h2><p><code>目标</code>：结合hooks使用react-redux，修改数据</p><p><code>内容</code>：</p><ol><li>react-redux提供了useDispatch</li><li>useDispatch：修改数据的hooks</li></ol><p><code>App.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add, addAfterOneSecond &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/actions&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span>)</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>App<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          dispatch(add(2))</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        点我+2</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          dispatch(addAfterOneSecond(2))</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        点我1s后+2</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>要点</code>：无</p><h2 id="3-4redux-异步action中间件redux-thunk的使用"><a href="#3-4redux-异步action中间件redux-thunk的使用" class="headerlink" title="3.4redux-异步action中间件redux-thunk的使用"></a>3.4redux-异步action中间件redux-thunk的使用</h2><p><code>目标</code>：如何处理异步的action呢？比如点击按钮，1s后+1</p><p><code>内容</code>：</p><ol><li><a class="link"   href="https://github.com/reduxjs/redux-thunk" >redux-thunk<i class="fas fa-external-link-alt"></i></a>的介绍，安装 </li><li>配置redux-thunk</li><li>编写异步action</li><li>App.js中测试</li></ol><p><code>核心代码</code></p><p><code>store/reducers.js</code> 不变</p><p><code>index.js</code>不变</p><p><code>store/store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; addReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;./reducers.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let store = createStore(addReducer)</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(addReducer, <span class="title function_">applyMiddleware</span>(thunk))</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>store/actions.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">count</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;ADD&#x27;</span>,</span><br><span class="line">    count,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">addAfterOneSecond</span> = (<span class="params">count</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(dispatch)</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(<span class="title function_">add</span>(count))</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>App.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add, addAfterOneSecond &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/actions&#x27;</span></span><br><span class="line"><span class="comment">// import &#123; add &#125; from &#x27;./store/actions&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="attr">store</span>: &#123; getState, dispatch &#125;,</span><br><span class="line">  &#125; = props</span><br><span class="line">  <span class="keyword">const</span> &#123; count &#125; = <span class="title function_">getState</span>()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>App<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          dispatch(add(2))</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        点我+2</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          dispatch(addAfterOneSecond(2))</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        点我1s后+2</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>注意</code>：</p><ol><li>redux-thunk是专门处理redux中异步action的中间件</li><li>当要异步操作数据变化时，需要用redux-thunk包</li><li>常见的异步：定时器，ajax，注册事件</li></ol><h2 id="3-5redux-devtools-extension的使用"><a href="#3-5redux-devtools-extension的使用" class="headerlink" title="3.5redux-devtools-extension的使用"></a>3.5redux-devtools-extension的使用</h2><p><code>目标</code>：模拟vue的devtools，开发react项目时，通过chrome开发者工具调试跟踪redux状态</p><p><code>步骤</code>：</p><ol><li>通过包管理器在项目中安装 yarn add redux-devtools-extension</li><li>在index.js中进行配置和导入</li><li>安装chrome浏览器插件 </li><li>启动react项目，打开chrome开发者工具，测试</li></ol><p><code>文档</code> <a class="link"   href="https://www.npmjs.com/package/redux-devtools-extension" >redux-devtools-exension<i class="fas fa-external-link-alt"></i></a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Redux" scheme="http://example.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>6.和小达一起学AJAX</title>
    <link href="http://example.com/2022/08/11/6.%E5%92%8C%E5%B0%8F%E8%BE%BE%E4%B8%80%E8%B5%B7%E5%AD%A6AJAX/"/>
    <id>http://example.com/2022/08/11/6.%E5%92%8C%E5%B0%8F%E8%BE%BE%E4%B8%80%E8%B5%B7%E5%AD%A6AJAX/</id>
    <published>2022-08-11T11:30:31.000Z</published>
    <updated>2022-08-11T13:31:59.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-初识客户端与服务器"><a href="#1-初识客户端与服务器" class="headerlink" title="1.初识客户端与服务器"></a>1.初识客户端与服务器</h1><h3 id="1-1客户端与服务器"><a href="#1-1客户端与服务器" class="headerlink" title="1.1客户端与服务器"></a>1.1客户端与服务器</h3><p>​<strong>上网：</strong>   通过互联网来获取和消费资源</p><p>​<strong>服务器：</strong>负责存放和对外提供资源的电脑</p><p>​<strong>客户端：</strong>负责获取和消费资源的电脑</p><h3 id="1-2URL地址"><a href="#1-2URL地址" class="headerlink" title="1.2URL地址"></a>1.2URL地址</h3><h5 id="1-2-1介绍"><a href="#1-2-1介绍" class="headerlink" title="1.2.1介绍"></a>1.2.1介绍</h5><p><strong>URL(UniformResourceLocator)：</strong> <strong>统一资源定位符</strong>，用于标识互联网上资源的唯一存放位置，浏览器通过URL地址确定资源的存放位置，访问到对应的资源。</p><p>​如：<a class="link"   href="http://www.baidu.com/" >http://www.baidu.com<i class="fas fa-external-link-alt"></i></a></p><p>​<a class="link"   href="https://www.bilibili.com/video/BV1K7411W7So" >https://www.bilibili.com/video/BV1K7411W7So<i class="fas fa-external-link-alt"></i></a></p><h5 id="1-2-2URL地址的组成部分"><a href="#1-2-2URL地址的组成部分" class="headerlink" title="1.2.2URL地址的组成部分"></a>1.2.2URL地址的组成部分</h5><p>​1.客户端与服务器之间的**通信协议 **          </p><p>​https</p><p>​2.存有该资源的<strong>服务器名称</strong></p><p>​<a class="link"   href="http://www.bilibili.com/" >www.bilibili.com<i class="fas fa-external-link-alt"></i></a></p><p>​3.资源在服务器上的<strong>具体存放位置</strong></p><p>​video&#x2F;BV1K7411W7So</p><p>​</p><h3 id="1-3客户端与服务器的通信过程"><a href="#1-3客户端与服务器的通信过程" class="headerlink" title="1.3客户端与服务器的通信过程"></a>1.3客户端与服务器的通信过程</h3><p><strong>客户端：</strong></p><p>​1.打开浏览器，输入网站地址，回车向服务器发起资源请求</p><p><strong>服务器：</strong></p><p>​1.服务器接收到客户端发来的资源请求，在内部处理这次请求找到相关资源，把相关资源响应(发送)给客户端</p><p><strong>总结：</strong></p><p>​1.客户端请求服务器    2.服务器处理这次请求3.服务器响应客户端</p><h3 id="1-4网页请求数据"><a href="#1-4网页请求数据" class="headerlink" title="1.4网页请求数据"></a>1.4网页请求数据</h3><p>​<strong>XMLHttpRequest对象：</strong>简称xhr，是浏览器提供的js成员，可以请求服务器上的数据资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhrObj = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br></pre></td></tr></table></figure><h3 id="1-5资源的请求方式"><a href="#1-5资源的请求方式" class="headerlink" title="1.5资源的请求方式"></a>1.5资源的请求方式</h3><p>​客户端请求服务器时，请求的方式有很多种，最常见的两种请求方式分别为 **get **和 **post **请求。</p><h5 id="1-5-1get-请求"><a href="#1-5-1get-请求" class="headerlink" title="1.5.1get 请求"></a>1.5.1get 请求</h5><p>通常用于<strong>获取服务端资源</strong>（向服务器要资源）</p><p>​      例如：根据 URL 地址，从服务器获取 HTML 文件、css 文件、js文件、图片文件、数据资源等</p><h5 id="1-5-2post请求"><a href="#1-5-2post请求" class="headerlink" title="1.5.2post请求"></a>1.5.2post请求</h5><p>通常用于<strong>向服务器提交数据</strong>（往服务器发送资源）</p><p>​例如：登录时向服务器提交的登录信息、注册时向服务器提交的注册信息、等各种数据提交操作</p><h1 id="2-初识AJAX"><a href="#2-初识AJAX" class="headerlink" title="2.初识AJAX"></a>2.初识AJAX</h1><h3 id="2-1-AJAX简介"><a href="#2-1-AJAX简介" class="headerlink" title="2.1 AJAX简介"></a>2.1 AJAX简介</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AJAX(Asynchronous Javascript And XML)---异步的JavaScript 和 XML</span><br></pre></td></tr></table></figure><p>​也就是说AJAX是在网页中利用XMLHttpRequest对象和服务器进行数据交互的方式</p><p>​<strong>AJAX实现网页与服务器之间的数据交互：</strong> 比如检测用户名是否被占用，根据页码刷新表格的数据，加载搜索提示列表等等。</p><p>🚩 <strong>AJAX 是一种用于创建快速动态网页的技术</strong>：</p><ul><li>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现<strong>异步更新</strong>。这意味着<strong>可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</strong></li><li>传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页。</li></ul><h3 id="2-2-AJAX-工作原理"><a href="#2-2-AJAX-工作原理" class="headerlink" title="2.2 AJAX 工作原理"></a>2.2 AJAX 工作原理</h3><p>AJAX是基于现有的Internet标准，并且联合使用它们：</p><ul><li>XMLHttpRequest 对象 (异步的与服务器交换数据)</li><li>JavaScript&#x2F;DOM (信息显示&#x2F;交互)</li><li>CSS (给数据定义样式)</li><li>XML (作为转换数据的格式)</li></ul><p>💡 <strong>AJAX 应用程序与浏览器和平台无关</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:/eddie-small-railway-station/pictures/AJAX%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png"                      alt="prototype_4"                ></p><h5 id="2-2-1-使用xhr发起GET请求"><a href="#2-2-1-使用xhr发起GET请求" class="headerlink" title="2.2.1 使用xhr发起GET请求"></a>2.2.1 使用xhr发起GET请求</h5><p>​<strong>1.创建xhr对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br></pre></td></tr></table></figure><p>​<strong>2.调用xhr的.open函数，指定请求方式与URL地址</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://...?id=1&#x27;</span>)</span><br><span class="line"><span class="comment">//?表示这次请求是携带参数的，URL地址后面拼接的参数叫做查询字符串</span></span><br></pre></td></tr></table></figure><p>​<strong>3.调用send函数，发起AJAX请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure><p>​<strong>4.监听 onreadystatechange事件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//4.1监听xhr对象的请求状态readystate；服务器响应状态status</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="comment">//4.2打印服务器响应回来的数据</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-2readyState属性"><a href="#2-2-2readyState属性" class="headerlink" title="2.2.2readyState属性"></a>2.2.2readyState属性</h5><p>​XMLHttpRequest 对象的 readyState 属性，用来表示当前 Ajax 请求所处的状态。每个 Ajax 请求必然处于以下状态中的一个：</p><table><thead><tr><th align="center">值</th><th align="center">状态</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">UNSENT</td><td align="center">XMLHttpRequest 对象已被创建，但尚未调用 open方法</td></tr><tr><td align="center">1</td><td align="center">OPENED</td><td align="center">open() 方法已经被调用。</td></tr><tr><td align="center">2</td><td align="center">HEADERS_RECEIVED</td><td align="center">send() 方法已经被调用，响应头也已经被接收。</td></tr><tr><td align="center">3</td><td align="center">LOADING</td><td align="center">数据接收中，此时 response 属性中已经包含部分数据。</td></tr><tr><td align="center"><strong>4</strong></td><td align="center"><strong>DONE</strong></td><td align="center"><strong>Ajax 请求完成</strong>，这意味着数据传输已经<strong>彻底完成或失败。</strong></td></tr></tbody></table><h5 id="2-2-3查询字符串"><a href="#2-2-3查询字符串" class="headerlink" title="2.2.3查询字符串"></a><strong>2.2.3查询字符串</strong></h5><p>​查询字符串（URL 参数）是指在 URL 的末尾加上用于向服务器发送信息的字符串（变量）。</p><p>​格式：将**英文的 ?  <strong>放在URL 的末尾，然后再加上</strong>参数＝值 **，想加上多个参数的话，使用 <strong>&amp;</strong> 符号进行分隔。以这个形式，可以将想要发送给服务器的数据添加到 URL 中。</p><p>​<strong>本质：直接将参数以查询字符串的形式，追加到 URL 地址的后面，发送到服务器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://...?id=1&amp;bookname=西游记</span><br></pre></td></tr></table></figure><h5 id="2-2-4URL编码"><a href="#2-2-4URL编码" class="headerlink" title="2.2.4URL编码"></a>2.2.4URL编码</h5><p>​URL 地址中，只允许出现英文相关的字母、标点符号、数字，因此，在 URL 地址中不允许出现中文字符。<br>如果 URL 中需要包含中文这样的字符，则必须对中文字符进行编码（转义）。</p><p>​<strong>URL编码的原则：</strong>使用安全的字符（没有特殊用途或者特殊意义的可打印字符）去表示那些不安全的字符。</p><p>​<strong>浏览器会自动对URL地址进行编码操作，所以大多数情况下，不需要关心</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//URL编码   encodeURI(&#x27;你好&#x27;)</span></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;奥特曼&#x27;</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="built_in">encodeURI</span>(str1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2)<span class="comment">//%E5%A5%A5%E7%89%B9%E6%9B%BC</span></span><br><span class="line"><span class="comment">//URL解码   decodeURI(&#x27;%E5%A5%A5%E7%89%B9%E6%9B%BC&#x27;)</span></span><br><span class="line"><span class="keyword">let</span> str3 = <span class="built_in">decodeURI</span>(str2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str3)<span class="comment">//奥特曼</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-2-5使用xhr发起POST请求"><a href="#2-2-5使用xhr发起POST请求" class="headerlink" title="2.2.5使用xhr发起POST请求"></a>2.2.5使用xhr发起POST请求</h5><p>​<strong>1.创建xhr对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>() </span><br></pre></td></tr></table></figure><p>​<strong>2.调用xhr的.open函数，指定请求方式与URL地址</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://...&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​<strong>3.设置 Content-Type属性（固定写法）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​<strong>4.调用 send()，同时将数据以查询字符串的形式，提交给服务器</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;bookname=高级程序设计&amp;author=Matt&amp;publisher=人民邮电出版社&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​<strong>5.监听 onreadystatechange 事件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-jQuery-中的AJAX"><a href="#2-3-jQuery-中的AJAX" class="headerlink" title="2.3  jQuery 中的AJAX"></a>2.3  jQuery 中的AJAX</h3><p>​浏览器中提供的<strong>XMLHttpRequest</strong> 用法复杂，所以 jQuery 对XMLHttpRequest进行了封装，提供了一系列 Ajax 相关的函数。</p><h5 id="2-2-1-get"><a href="#2-2-1-get" class="headerlink" title="2.2.1 $.get"></a>2.2.1 $.get</h5><p>​发起get请求，将服务器上的资源请求到客户端是使用（<strong>拿资源</strong>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line">$.<span class="title function_">get</span>(url,[data],[callback])</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数名</th><th align="center">参数类型</th><th align="center">必选</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">url</td><td align="center">string</td><td align="center">是</td><td align="center">要请求的资源地址</td></tr><tr><td align="center">data</td><td align="center">object</td><td align="center">否</td><td align="center">请求资源期间要携带的参数</td></tr><tr><td align="center">callback</td><td align="center">function</td><td align="center">否</td><td align="center">请求成功时的回调函数</td></tr></tbody></table><p>​<strong>1.不带参数的请求</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnGET&quot;</span>&gt;</span>发起不带参数的GET请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;#btnGET&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">get</span>(<span class="string">&#x27;http://...&#x27;</span>,<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.带参数的请求</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnGETINFO&quot;</span>&gt;</span>发起单参数的GET请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;#btnGETINFO&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">get</span>(<span class="string">&#x27;http://...&#x27;</span>, &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-2-2-post"><a href="#2-2-2-post" class="headerlink" title="2.2.2 $.post"></a>2.2.2 $.post</h5><p>​发起post请求，向服务器提交数据（<strong>送资源</strong>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line">$.<span class="title function_">url</span>(url,[data],[callback])</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数名</th><th align="center">参数类型</th><th align="center">必选</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">url</td><td align="center">string</td><td align="center">是</td><td align="center">提交数据的地址</td></tr><tr><td align="center">data</td><td align="center">object</td><td align="center">否</td><td align="center">要提交的数据</td></tr><tr><td align="center">callback</td><td align="center">function</td><td align="center">否</td><td align="center">数据提交成功时的回调函数</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnPOST&quot;</span>&gt;</span>发起POST请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;#btnPOST&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">post</span>(<span class="string">&#x27;http://...&#x27;</span>, &#123; <span class="attr">bookname</span>: <span class="string">&#x27;高级程序涉及&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;Matt&#x27;</span>, <span class="attr">publisher</span>: <span class="string">&#x27;人民邮电出版社&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-2-3-ajax"><a href="#2-2-3-ajax" class="headerlink" title="2.2.3 $.ajax"></a>2.2.3 $.ajax</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,<span class="comment">//请求方式</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://...&#x27;</span>,<span class="comment">//请求地址</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span></span><br><span class="line">  &#125;,<span class="comment">//请求携带的数据</span></span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;<span class="comment">//请求成功之后的回调函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">type</td><td align="center">请求的方式，例如 GET 或 POST</td></tr><tr><td align="center">url</td><td align="center">请求的 URL 地址</td></tr><tr><td align="center">data</td><td align="center">这次请求要携带的数据</td></tr><tr><td align="center">success</td><td align="center">function(res) { }  请求成功之后的回调函数</td></tr></tbody></table><p>​<strong>1.get请求</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnGET&quot;</span>&gt;</span>发起GET请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;#btnGET&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,<span class="comment">//大小写都行，建议大写</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">url</span>: <span class="string">&#x27;http://...&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">id</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.post请求</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnPOST&quot;</span>&gt;</span>发起POST请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;#btnPOST&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">url</span>: <span class="string">&#x27;http://...&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">bookname</span>: <span class="string">&#x27;Python&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">author</span>: <span class="string">&#x27;Eric&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">publisher</span>: <span class="string">&#x27;人民邮电出版社&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-接口"><a href="#3-接口" class="headerlink" title="3.接口"></a>3.接口</h1><h3 id="3-1接口的概念"><a href="#3-1接口的概念" class="headerlink" title="3.1接口的概念"></a>3.1接口的概念</h3><p>​使用AJAX请求数据时，被请求的URL地址就叫数据接口（简称接口），每个接口必须有请求方式(get post)。</p><h3 id="3-2接口的请求过程"><a href="#3-2接口的请求过程" class="headerlink" title="3.2接口的请求过程"></a>3.2接口的请求过程</h3><p>​1.用户与网页的交互(希望向服务器<strong>提交&#x2F;获取</strong>数据)</p><p>​2.网页向服务器发起<strong>POST&#x2F;GET</strong>数据请求</p><p>​3.服务器处理请求，向网页响应<strong>POST&#x2F;GET</strong>请求 </p><h3 id="3-3接口测试工具-PostMan"><a href="#3-3接口测试工具-PostMan" class="headerlink" title="3.3接口测试工具 PostMan"></a>3.3接口测试工具 PostMan</h3><p>​在不写任何代码的情况下，对接口进行<strong>调用和测试</strong>，验证接口是否能被正常访问。</p><h5 id="3-3-1-接口文档"><a href="#3-3-1-接口文档" class="headerlink" title="3.3.1 接口文档"></a>3.3.1 接口文档</h5><p>​接口的说明文档，它是我们调用接口的依据。好的接口文档包含了对接口URL，参数以及输出内容的说明，我们参照接口文档就能方便的知道接口的作用，以及接口如何进行调用。</p><ol><li>接口名称：用来标识各个接口的简单说明，如登录接口，获取图书列表接口等。</li><li>接口URL：接口的调用地址。</li><li>调用方式：接口的调用方式，如 GET 或 POST。</li><li>参数格式：接口需要传递的参数，每个参数必须包含参数名称、参数类型、是否必选、参数说明这4项内容。</li><li>响应格式：接口的返回值的详细描述，一般包含数据名称、数据类型、说明3项内容。</li><li>返回示例（可选）：通过对象的形式，例举服务器返回数据的结构。</li></ol><h3 id="3-4测试"><a href="#3-4测试" class="headerlink" title="3.4测试"></a>3.4测试</h3><p>请求的根路径</p><blockquote><p><a class="link"   href="http://www.xxx.top:8000/" >http://www.xxx.top:8000<i class="fas fa-external-link-alt"></i></a></p></blockquote><p><strong>图书列表</strong></p><ul><li>接口URL：  &#x2F;api&#x2F;getbooks</li><li>调用方式： GET</li><li>参数格式：</li></ul><table><thead><tr><th>参数名称</th><th>参数类型</th><th>是否必选</th><th>参数说明</th></tr></thead><tbody><tr><td>id</td><td>Number</td><td>否</td><td>图书Id</td></tr><tr><td>bookname</td><td>String</td><td>否</td><td>图书名称</td></tr><tr><td>author</td><td>String</td><td>否</td><td>作者</td></tr><tr><td>publisher</td><td>String</td><td>否</td><td>出版社</td></tr></tbody></table><ul><li>响应格式：</li></ul><table><thead><tr><th>数据名称</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>status</td><td>Number</td><td>200 成功；500 失败；</td></tr><tr><td>msg</td><td>String</td><td>对 status 字段的详细说明</td></tr><tr><td>data</td><td>Array</td><td>图书列表</td></tr><tr><td>+id</td><td>Number</td><td>图书Id</td></tr><tr><td>+bookname</td><td>String</td><td>图书名称</td></tr><tr><td>+author</td><td>String</td><td>作者</td></tr><tr><td>+publisher</td><td>String</td><td>出版社</td></tr></tbody></table><ul><li>返回示例：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取图书列表成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;bookname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;西游记&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;吴承恩&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;publisher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京图书出版社&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;bookname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;红楼梦&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;曹雪芹&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;publisher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海图书出版社&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">&quot;bookname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;三国演义&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;罗贯中&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;publisher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京图书出版社&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>添加图书</strong></p><ul><li>接口URL：  &#x2F;api&#x2F;addbook</li><li>调用方式： POST</li><li>参数格式：</li></ul><table><thead><tr><th>参数名称</th><th>参数类型</th><th>是否必选</th><th>参数说明</th></tr></thead><tbody><tr><td>bookname</td><td>String</td><td>是</td><td>图书名称</td></tr><tr><td>author</td><td>String</td><td>是</td><td>作者</td></tr><tr><td>publisher</td><td>String</td><td>是</td><td>出版社</td></tr></tbody></table><ul><li>响应格式：</li></ul><table><thead><tr><th>数据名称</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>status</td><td>Number</td><td>201 添加成功；500 添加失败；</td></tr><tr><td>msg</td><td>String</td><td>对 status 字段的详细说明</td></tr></tbody></table><ul><li>返回示例：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">201</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;添加图书成功&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>删除图书</strong></p><ul><li>接口URL：  &#x2F;api&#x2F;delbook</li><li>调用方式： GET</li><li>参数格式：</li></ul><table><thead><tr><th>参数名称</th><th>参数类型</th><th>是否必选</th><th>参数说明</th></tr></thead><tbody><tr><td>id</td><td>Number</td><td>是</td><td>图书Id</td></tr></tbody></table><ul><li>响应格式：</li></ul><table><thead><tr><th>数据名称</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>status</td><td>Number</td><td>200 删除成功；500 未指定要删除的图书Id；501 执行Sql报错；502 要删除的图书不存在；</td></tr><tr><td>msg</td><td>String</td><td>对 status 字段的详细说明</td></tr></tbody></table><ul><li>返回示例：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;status&quot;: 200,</span><br><span class="line">    &quot;msg&quot;: &quot;删除图书成功！&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-form表单"><a href="#4-form表单" class="headerlink" title="4.form表单"></a>4.form表单</h1><h3 id="4-1表单的介绍"><a href="#4-1表单的介绍" class="headerlink" title="4.1表单的介绍"></a>4.1表单的介绍</h3><p>​表单在网页中主要负责数据采集功能。HTML中的<form>标签，就是用于采集用户输入的信息，并通过<form>标签的提交操作，把采集到的信息提交到服务器端进行处理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email_or_mobile&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember_me&quot;</span> <span class="attr">checked</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​<strong>表单的组成部分：</strong>  </p><p>​1.表单标签；</p><p>​2.表单域(文本框、密码框。隐藏域、复选框、单选框、下拉菜单等)</p><p>​3.表单按钮</p><h3 id="4-2-form标签的属性"><a href="#4-2-form标签的属性" class="headerlink" title="4.2 form标签的属性"></a>4.2 form标签的属性</h3><p>​form标签负责<strong>数据采集</strong>功能。form标签的属性规定了如何把采集到的数据发送到服务器</p><table><thead><tr><th align="center">属性</th><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">action</td><td align="center">URL地址</td><td align="center">规定当提交表单时，向何处发送表单数据，默认值为当前页面的URL地址，当提交表单后，页面会立即跳转到action属性指定的地址。</td></tr><tr><td align="center">method</td><td align="center">get&#x2F;post</td><td align="center">规定以何种方式把表单数据提交到 action URL</td></tr></tbody></table><p>| enctype | application&#x2F;x-www-form-urlencoded<br>multipart&#x2F;form-data<br>text&#x2F;plain |            规定在发送表单数据之前如何对其进行编码            |<br>| target  |               _blank<br>_self<br>_parent<br>_top<br>framename                |                  规定在何处打开 action URL                   |</p><p><strong>action</strong></p><p>​action 属性用来规定当提交表单时，<strong>向何处发送表单数据</strong></p><p>​action 属性的值是后端提供的一 URL 地址，这个地址专门负责接收表单提交过来的数据。</p><p>​action 的默认值为当前页面的 URL 地址</p><p>​<strong>当提交表单后，页面会立即跳转到 action 属性指定的 URL 地址</strong></p><p><strong>method</strong></p><p>​method 属性用来规定以何种方式把表单数据提交到 action URL</p><p>​它的可选值有两个，分别是 get 和 post.<strong>默认情况下，method 的值为 get</strong>，表示通过URL地址的形式，把表单数据提交到 action URL。</p><p>​get 方式适合用来提交少量的、简单的数据。<br>​post 方式适合用来提交大量的、复杂的、或包含文件上传的数据，<strong>比较安全</strong>(常用)</p><p><strong>enctype</strong></p><table><thead><tr><th>值</th><th>属性</th></tr></thead><tbody><tr><td><strong>application&#x2F;x-www-form-urlencoded</strong></td><td>在发送前编码所有字符（默认）</td></tr></tbody></table><p>| <strong>multipart&#x2F;form-data</strong>               | 不对字符编码。<br>在使用包含文件上传控件的表单时，必须使用该值。 |<br>| text&#x2F;plain                            | 空格转换为 “+” 加号，但不对特殊字符编码。（很少用）          |</p><p>​<strong>在涉及到文件上传的操作时，必须将 enctype 的值设置为 multipart&#x2F;form-data</strong></p><p>​**如果表单的提交不涉及到文件上传操作，则直接将 enctype 的值设置为 application&#x2F;x-www-form-urlencoded **</p><p><strong>target</strong></p><table><thead><tr><th align="center">target 值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><strong>_blank</strong></td><td align="center">在新窗口中打开</td></tr><tr><td align="center"><strong>_self</strong></td><td align="center">默认。在相同的框架中打开</td></tr><tr><td align="center">_parent</td><td align="center">在父框架集中打开</td></tr><tr><td align="center">_top</td><td align="center">在整个窗口中打开</td></tr><tr><td align="center">framename</td><td align="center">在指定的框架中打开</td></tr></tbody></table><h3 id="4-3表单同步提交"><a href="#4-3表单同步提交" class="headerlink" title="4.3表单同步提交"></a>4.3表单同步提交</h3><p>​通过点击提交按钮，触发表单提交操作，使页面跳转到action URL的行为成为表单的<strong>同步提交</strong></p><p>​<strong>缺点</strong>form表单同步提交后页面会跳转到URL地址，体验差</p><p>​form表单同步提交之后，页面之前的数据和状态会丢失</p><p>​<strong>解决方案</strong>由表单来负责采集数据，由Ajax来负责将数据提交到服务器</p><p><strong>1.监听表单提交事件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听表单的提交事件</span></span><br><span class="line">$(<span class="string">&#x27;#form1&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;监听到了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//监听表单提交事件2</span></span><br><span class="line">$(<span class="string">&#x27;#form2&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;submit&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;监听到了表单的提交事件&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2.阻止表单的默认提交行为</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#form1&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;监听到了&#x27;</span>)</span><br><span class="line">    <span class="comment">//阻止表单的默认提交行为</span></span><br><span class="line">    e.<span class="title function_">preventDefult</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#form2&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;submit&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;监听到了表单的提交事件&#x27;</span>)</span><br><span class="line">    <span class="comment">//阻止表单的默认提交行为</span></span><br><span class="line">    e.<span class="title function_">preventDefult</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>3.快速获取表单中的数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//serialize()HANSHU,可以一次性获取到表单中的所有数据</span></span><br><span class="line">$(<span class="string">&#x27;#idname&#x27;</span>).<span class="title function_">serialize</span>()</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>在使用serialize方法快速获取表单数据时，必须为每个表单元素添加name属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">id</span>=<span class="string">&quot;f1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user_name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 第一种方式</span></span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;#f1&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        e.<span class="title function_">preventDefault</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> data = $(<span class="variable language_">this</span>).<span class="title function_">serialize</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">      &#125;) */</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 第二种方式</span></span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;#f1&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        e.<span class="title function_">preventDefault</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> data = $(<span class="string">&#x27;#f1&#x27;</span>).<span class="title function_">serialize</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4模板引擎"><a href="#4-4模板引擎" class="headerlink" title="4.4模板引擎"></a>4.4模板引擎</h3><p>​可以根据程序员指定的<strong>模板结构</strong>和<strong>数据</strong>，自动生成一个完整的HTML页面。</p><p>​<strong>优势：</strong>减少了字符串的拼接操作    代码结构更加清晰</p><h5 id="4-4-1-art-template模板引擎"><a href="#4-4-1-art-template模板引擎" class="headerlink" title="4.4.1 art-template模板引擎"></a>4.4.1 art-template模板引擎</h5><p>​ 官网： <a class="link"   href="http://aui.github.io/art-template/zh-cn/index.html" >http://aui.github.io/art-template/zh-cn/index.html<i class="fas fa-external-link-alt"></i></a></p><p>​<strong>操作步骤：</strong></p><p>​1.导入art-template</p><p>​2.定义数据</p><p>​3.定义模板</p><p>​4.调用template函数(‘模板id’，要渲染的数据)</p><p>​5.渲染HTML结构</p><h5 id="4-4-2-art-template标准语法"><a href="#4-4-2-art-template标准语法" class="headerlink" title="4.4.2 art-template标准语法"></a>4.4.2 art-template标准语法</h5><p>​art-template 提供了<code>&#123;&#123; &#125;&#125;</code>这种语法格式，在<code>&#123;&#123; &#125;&#125;</code>内可以进行变量输出，或循环数组等操作</p><p>​**输出 **  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;value&#125;&#125;</span><br></pre></td></tr></table></figure><p>​在<code> &#123;&#123; &#125;&#125;</code> 语法中，可以进行变量的输出、对象属性的输出、三元表达式输出、逻辑或输出、加减乘除等表达式输出。</p><p>​<strong>原文输出</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;@ value &#125;&#125;</span><br></pre></td></tr></table></figure><p>​如果要输出的 value 值中，包含了 HTML 标签结构，则需要使用原文输出语法，才能保证 HTML 标签被正常渲染。 </p><p>​<strong>条件输出</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="keyword">if</span> value&#125;&#125; 按需输出的内容 &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="keyword">if</span> v1&#125;&#125; 按需输出的内容 &#123;&#123;<span class="keyword">else</span> <span class="keyword">if</span> v2&#125;&#125; 按需输出的内容 &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>​如果要实现条件输出，则可以在 <code>&#123;&#123; &#125;&#125; </code>中使用 if … else if … &#x2F;if 的方式，进行按需输出。</p><p>​<strong>循环输出</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;each arr&#125;&#125;</span><br><span class="line">    &#123;&#123;$index&#125;&#125; &#123;&#123;$value&#125;&#125;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure><p>​<strong>过滤器</strong></p><p>​需要处理的值，通过参数送入过滤器函数，输出新值，过滤器的本质是function处理函数</p><p>​过滤器语法类似管道操作符，它的上一个输出作为下一个输入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;value | filterName&#125;&#125;</span><br><span class="line"><span class="comment">//定义过滤器的基本语法</span></span><br><span class="line">template.<span class="property">defaults</span>.<span class="property">imports</span>.<span class="property">filterName</span> = <span class="keyword">function</span>(<span class="params">value</span>)&#123;<span class="keyword">return</span>  <span class="comment">//处理的结果&#125;</span></span><br></pre></td></tr></table></figure><h5 id="4-4-3-正则与字符串"><a href="#4-4-3-正则与字符串" class="headerlink" title="4.4.3 正则与字符串"></a>4.4.3 正则与字符串</h5><p>​exec()函数用于检索字符串中的正则表达式匹配，如果有匹配的值返回匹配值，否则返回Null</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/o/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="title function_">exec</span>(str))<span class="comment">// [&#x27;o&#x27;,index:4,input:&#x27;hello&#x27;,groups:undefined]</span></span><br></pre></td></tr></table></figure><p>​<strong>分组</strong>.</p><p>​正则表达式中 ( ) 包起来的内容表示一个分组，可以通过分组来提取自己想要的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;div&gt;我是&#123;&#123;name&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/&#123;&#123;([a-zA-Z]+)&#125;&#125;/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> patternResult = pattern.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(patternResult)</span><br><span class="line"> <span class="comment">// 得到 name 相关的分组信息</span></span><br><span class="line"> <span class="comment">// [&quot;&#123;&#123;name&#125;&#125;&quot;, &quot;name&quot;, index: 7, input: &quot;&lt;div&gt;我是&#123;&#123;name&#125;&#125;&lt;/div&gt;&quot;, groups: undefined]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​<strong>replace函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="string">&#x27;123456&#x27;</span>.<span class="title function_">replace</span>(<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;abc&#x27;</span>)  <span class="comment">//   &#x27;abc456&#x27;</span></span><br><span class="line"><span class="comment">//replace循环</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;div&gt;&#123;&#123;name&#125;&#125;今年&#123;&#123; age &#125;&#125;岁了&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/&#123;&#123;\s*([a-zA-Z]+)\s*&#125;&#125;/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> patternResult = <span class="literal">null</span></span><br><span class="line"><span class="keyword">while</span>(patternResult = pattern.<span class="title function_">exec</span>(str)) &#123;</span><br><span class="line">   str = str.<span class="title function_">replace</span>(patternResult[<span class="number">0</span>], data[patternResult[<span class="number">1</span>]])</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// 输出 &lt;div&gt;name今年age岁了&lt;/div&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-数据交换格式XML-JSON"><a href="#5-数据交换格式XML-JSON" class="headerlink" title="5. 数据交换格式XML JSON"></a>5. 数据交换格式XML JSON</h1><p>服务器端与客户端之间进行数据传输与交换的格式，就是数据交换格式。前端领域，经常提及的两种数据交换格式分别是<strong>XML 和 JSON</strong></p><h3 id="5-1XML-Extensible-Markup-Language"><a href="#5-1XML-Extensible-Markup-Language" class="headerlink" title="5.1XML(Extensible Markup Language):"></a><strong>5.1XML(Extensible Markup Language):</strong></h3><p>​可扩展标记语言。和HTML类似，也是一种标记语言,但是和HTML没有任何关系。<strong>HTML是网页内容的载体</strong>，<strong>XML是用来传输和存储数据，是数据的载体</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>aaaaa<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>bbbbbbb<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>ccccc<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>ddddd<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​<strong>缺点：</strong>XML格式臃肿，体积大传输效率低，在JS解析XML比较麻烦</p><h3 id="5-2JSON（JavaScript-Object-Notation）："><a href="#5-2JSON（JavaScript-Object-Notation）：" class="headerlink" title="5.2JSON（JavaScript Object Notation）："></a><strong>5.2JSON（JavaScript Object Notation）：</strong></h3><p>​JavaScript 对象表示法。是一种轻量级的文本数据交换格式，专门用于存储和传输数据，JSON 比 XML <strong>更小、更快、更易解析</strong>。它使用文本表示一个 JS 对象或数组的信息，因此，<strong>JSON 的本质是字符串。</strong></p><h5 id="5-2-1JSON的对象结构："><a href="#5-2-1JSON的对象结构：" class="headerlink" title="5.2.1JSON的对象结构："></a>5.2.1<strong>JSON的对象结构：</strong></h5><p>​对象结构在 JSON 中表示为 <strong>{ } 括起来的内容</strong>。数据结构为 <strong>{ key: value, key: value, … } 的键值对结构</strong>。其中，<strong>key 必须是使用英文的“双引号”包裹的字符串</strong>，<strong>value 的数据类型可以是数字、字符串、布尔值、null、数组、对象6种类型</strong>。<strong>字符串必须为双引号包裹</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,  <span class="comment">//name要双引号包裹</span></span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>,<span class="comment">//age要双引号包裹</span></span><br><span class="line">    <span class="string">&quot;gender&quot;</span>: <span class="string">&#x27;男&#x27;</span>,<span class="comment">//男要双引号包裹</span></span><br><span class="line">    <span class="string">&quot;address&quot;</span>: <span class="literal">undefined</span>,<span class="comment">//undefined不属于六种类型的任意一种，改成Null</span></span><br><span class="line">    <span class="string">&quot;hobby&quot;</span>: [<span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&#x27;打豆豆&#x27;</span>]<span class="comment">//打豆豆要双引号包裹</span></span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;<span class="comment">//say要双引号包裹，function也不属于六种属性的一种</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改成</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">    <span class="string">&quot;address&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;hobby&quot;</span>: [<span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&quot;打豆豆&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-2JSON的数组结构："><a href="#5-2-2JSON的数组结构：" class="headerlink" title="5.2.2JSON的数组结构："></a>5.2.2<strong>JSON的数组结构：</strong></h5><p>​数组结构在 JSON 中表示为**[ ] 括起来的内容<strong>。数据结构为 [ “java”, “javascript”, 30, true … ] 。</strong>数组中数据的类型可以是数字、字符串、布尔值、null、数组、对象6种类型**。<strong>字符串必须为双引号包裹</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;php&quot;</span> ]</span><br><span class="line">[ <span class="number">100</span>, <span class="number">200</span>, <span class="number">300.5</span> ]</span><br><span class="line">[ <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">null</span> ]</span><br><span class="line">[ &#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zs&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;, &#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ls&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125; ]</span><br><span class="line">[ [ <span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;榴莲&quot;</span>, <span class="string">&quot;椰子&quot;</span> ], [ <span class="number">4</span>, <span class="number">50</span>, <span class="number">5</span> ] ]</span><br></pre></td></tr></table></figure><h5 id="5-2-3JSON的注意事项"><a href="#5-2-3JSON的注意事项" class="headerlink" title="5.2.3JSON的注意事项"></a>5.2.3<strong>JSON的注意事项</strong></h5><ol><li>属性名必须使用双引号包裹</li><li>字符串类型的值必须使用双引号包裹</li><li>JSON 中不允许使用单引号表示字符串</li><li>JSON 中不能写注释</li><li>JSON 的最外层必须是对象或数组格式</li><li>不能使用 undefined 或函数作为 JSON 的值</li></ol><h5 id="5-2-4JSON和JS对象"><a href="#5-2-4JSON和JS对象" class="headerlink" title="5.2.4JSON和JS对象"></a>5.2.4JSON和JS对象</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>:<span class="string">&#x27;jieke&#x27;</span>,<span class="attr">b</span>:<span class="string">&#x27;zuofei&#x27;</span>&#125;</span><br><span class="line"><span class="comment">//JSON，本质是字符串</span></span><br><span class="line"><span class="keyword">let</span> json = <span class="string">&#x27;&#123;&quot;a&quot;:&quot;jieke&quot;,&quot;b&quot;:&quot;zuofei&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="5-2-5-JSON和JS对象互转"><a href="#5-2-5-JSON和JS对象互转" class="headerlink" title="5.2.5 JSON和JS对象互转"></a>5.2.5 JSON和JS对象互转</h5><p>把数据对象转换为字符串的过程，叫做序列化，例如：调用 JSON.stringify() 函数的操作，叫做 JSON 序列化。<br>把字符串转换为数据对象的过程，叫做反序列化，例如：调用 JSON.parse() 函数的操作，叫做 JSON 反序列化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JSON字符串转换为js对象  JSON.parse()  反序列化</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;:&quot;jieke&quot;,&quot;b&quot;:&quot;zuofei&quot;&#125;&#x27;</span>) <span class="comment">//&#123;a:&#x27;jieke&#x27;,b:&#x27;zuofei&#x27;&#125;</span></span><br><span class="line"><span class="comment">//js对象转换为JSON字符串  JSON.stringify()   序列化</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">a</span>:<span class="string">&#x27;jieke&#x27;</span>,<span class="attr">b</span>:<span class="string">&#x27;zuofei&#x27;</span>&#125;)<span class="comment">//&#x27;&#123;&quot;a&quot;:&quot;jieke&quot;,&quot;b&quot;:&quot;zuofei&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="6-封装自己的AJAX函数"><a href="#6-封装自己的AJAX函数" class="headerlink" title="6. 封装自己的AJAX函数"></a>6. 封装自己的AJAX函数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无论是GET或者POST请求，所有的参数都是以查询字符串的形式提交给字符串的，所以需要把data对象转化成查询字符串的形式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolveData</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> data)&#123;</span><br><span class="line">        <span class="keyword">let</span> str = k + <span class="string">&#x27;=&#x27;</span> + data[k]</span><br><span class="line">        arr.<span class="title function_">push</span>(str)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">let res = resolveData(&#123;name:&#x27;jack&#x27;,age:18&#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义自己的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">jieke</span>(<span class="params">options</span>)&#123;</span><br><span class="line">    <span class="comment">//首先new一个xhr的对象</span></span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    <span class="comment">//把外界传递过来的参数对象转化为查询字符串</span></span><br><span class="line">    <span class="keyword">let</span> qs = <span class="title function_">resovleData</span>(options.<span class="property">data</span>)</span><br><span class="line">    <span class="comment">//做一个判断是get请求还是POST请求</span></span><br><span class="line">    <span class="keyword">if</span>(options.<span class="property">method</span>.<span class="title function_">toUpperCase</span>() === <span class="string">&#x27;GET&#x27;</span>)&#123;</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,options.<span class="property">url</span> + <span class="string">&#x27;?&#x27;</span> + qs)</span><br><span class="line">        xhr.<span class="title function_">send</span>()</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(options.<span class="property">method</span>.<span class="title function_">toUpperCase</span>() === <span class="string">&#x27;POST&#x27;</span>)&#123;</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>,options.<span class="property">url</span>)</span><br><span class="line">        xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">        xhr.<span class="title function_">send</span>(qs)</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">            <span class="comment">//成功后调用这个函数</span></span><br><span class="line">            options.<span class="title function_">success</span>(result)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-XMLHttpRequest-Level2的新特性"><a href="#7-XMLHttpRequest-Level2的新特性" class="headerlink" title="7. XMLHttpRequest Level2的新特性"></a>7. XMLHttpRequest Level2的新特性</h1><h3 id="7-1旧版本的缺点"><a href="#7-1旧版本的缺点" class="headerlink" title="7.1旧版本的缺点"></a>7.1旧版本的缺点</h3><ol><li>只支持文本数据的传输，无法用来读取和上传文件</li><li>传送和接收数据时，没有进度信息，只能提示是否完成</li></ol><h3 id="7-2新功能"><a href="#7-2新功能" class="headerlink" title="7.2新功能"></a>7.2新功能</h3><ol><li>可以设置http请求的时限</li><li>可以使用FormData对象管理表单数据</li><li>可以上传文件</li><li>可以获得传输数据时的进度信息</li></ol><h3 id="7-3设置HTTP请求实现"><a href="#7-3设置HTTP请求实现" class="headerlink" title="7.3设置HTTP请求实现"></a>7.3设置HTTP请求实现</h3><p>​有时，Ajax 操作很耗时，而且无法预知要花多少时间。如果网速很慢，用户可能要等很久。新版本的 XMLHttpRequest 对象，增加了 timeout 属性，可以设置 HTTP 请求的时限</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将最长等待时间设为 3000 毫秒</span></span><br><span class="line">xhr.<span class="property">timeout</span> = <span class="number">3000</span></span><br><span class="line"><span class="comment">//过了这个时限，就自动停止HTTP请求。与之配套的还有一个 timeout 事件，用来指定回调函数：</span></span><br><span class="line">xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;请求超时&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4使用FormData对象管理表单数据"><a href="#7-4使用FormData对象管理表单数据" class="headerlink" title="7.4使用FormData对象管理表单数据"></a>7.4使用FormData对象管理表单数据</h3><p>​Ajax 操作往往用来提交表单数据。为了方便表单处理，HTML5 新增了一个 FormData 对象，可以模拟表单操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.新建FormData对象</span></span><br><span class="line"><span class="keyword">let</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"><span class="comment">//2.为FormData添加表单项</span></span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>)</span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;upwd&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="comment">//3.创建xhr对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">//4.指定请求类型和URL地址</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.xxx.top:8000/api/formdata&#x27;</span>)</span><br><span class="line"><span class="comment">//5. 直接提交 FormData 对象，这与提交网页表单的效果，完全一样</span></span><br><span class="line">xhr.<span class="title function_">send</span>(fd)</span><br></pre></td></tr></table></figure><p>​FormData对象也可以用来获取网页表单的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取表单元素</span></span><br><span class="line"><span class="keyword">let</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#form1&#x27;</span>)</span><br><span class="line"><span class="comment">//监听表单的submit事件</span></span><br><span class="line">form.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>()</span><br><span class="line">    <span class="comment">//根据form表单创建FormData对象，会自动将表单数据填充到FormData对象中</span></span><br><span class="line">    <span class="keyword">let</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>(form)</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.xxx.top:8000/api/formdata&#x27;</span>)</span><br><span class="line">    xhr.<span class="title function_">send</span>(fd)</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-5上传文件"><a href="#7-5上传文件" class="headerlink" title="7.5上传文件"></a>7.5上传文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.定义 UI 结构</span></span><br><span class="line"><span class="comment">2.验证是否选择了文件</span></span><br><span class="line"><span class="comment">3.向 FormData 中追加文件</span></span><br><span class="line"><span class="comment">4.使用 xhr 发起上传文件的请求</span></span><br><span class="line"><span class="comment">5.监听 onreadystatechange 事件</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>1.定义UI结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 文件选择框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file1&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2. 上传文件的按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnUpload&quot;</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3. img 标签，来显示上传成功以后的图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>2.验证是否选择了文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取上传文件的按钮</span></span><br><span class="line"><span class="keyword">let</span> btnUpload = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btnUpload&#x27;</span>)</span><br><span class="line"><span class="comment">//2.为按钮添加click事件监听</span></span><br><span class="line">btnUpload.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//3.获取到选择的文件列表</span></span><br><span class="line">    <span class="keyword">let</span> files = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#file1&#x27;</span>).<span class="property">files</span></span><br><span class="line">    <span class="keyword">if</span>(files.<span class="property">length</span> &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;请选择需要上传的文件&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.向FormData中追加文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建FormData对象</span></span><br><span class="line"><span class="keyword">let</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"><span class="comment">//2.向FormData中追加文件</span></span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>,files[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>4.使用xhr发起上传文件的请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建xhr对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">//2.调用open函数，指定请求类型和url地址，请求类型必须是POST</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://....&#x27;</span>)</span><br><span class="line"><span class="comment">//3.发起请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>(fd)</span><br></pre></td></tr></table></figure><p>5.监听onreadystatechange事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> ===<span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">        <span class="keyword">if</span>(data.<span class="property">status</span> === <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="comment">//上传文件成功，将服务器返回的图片地址，设置为 &lt;img&gt; 标签的 src 属性</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#img&#x27;</span>).<span class="property">src</span> = <span class="string">&#x27;http://...&#x27;</span>+data.<span class="property">url</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//上传失败的话</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;图片上传失败&#x27;</span> + data.<span class="property">message</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-6显示文件上传进度"><a href="#7-6显示文件上传进度" class="headerlink" title="7.6显示文件上传进度"></a>7.6显示文件上传进度</h3><p>​新版本的 XMLHttpRequest 对象中，可以通过监听 xhr.upload.onprogress 事件，来获取到文件的上传进度。</p><p>1.需要导入的库</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./lib/bootstrap.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.基于bootstrap渲染进度条</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 进度条 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 500px; margin: 10px 0;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-info progress-bar-striped active&quot;</span> <span class="attr">id</span>=<span class="string">&quot;percent&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 0%&quot;</span>&gt;</span></span><br><span class="line">      0%</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.监听上传进度的事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建XHR对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">//监听xhr.upload 的 onprogress事件</span></span><br><span class="line">xhr.<span class="property">upload</span>.<span class="property">onprogress</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="comment">//e.lengthComputable 是一个布尔值，表示当前上传的资源是否具有可计算的长度</span></span><br><span class="line">    <span class="keyword">if</span>(e.<span class="property">lengthComputable</span>)&#123;</span><br><span class="line">        <span class="comment">//e.loaded已传输的字节</span></span><br><span class="line">        <span class="comment">//e.total需传输的总字节</span></span><br><span class="line">        <span class="keyword">let</span> percentComplete = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>)</span><br><span class="line">        $(<span class="string">&#x27;#percent&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;style&#x27;</span>,<span class="string">&#x27;width:&#x27;</span> + procentComplete + <span class="string">&#x27;%&#x27;</span>).<span class="title function_">html</span>(procentComplete + <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.监听上传完成事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">upload</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//移除上传中的类样式，添加上传完成的类样式</span></span><br><span class="line">  $(<span class="string">&#x27;#percent&#x27;</span>).<span class="title function_">removeClass</span>().<span class="title function_">addClass</span>(<span class="string">&#x27;progress-bar progress-bar-success&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-7jQuery中的新功能"><a href="#7-7jQuery中的新功能" class="headerlink" title="7.7jQuery中的新功能"></a>7.7jQuery中的新功能</h3><h5 id="7-7-1文件上传"><a href="#7-7-1文件上传" class="headerlink" title="7.7.1文件上传"></a>7.7.1文件上传</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义UI结构 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 导入 jQuery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件选择框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file1&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上传文件按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnUpload&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//验证是否选择了文件</span></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#btnUpload&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.将 jQuery 对象转化为 DOM 对象，并获取选中的文件列表</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> files = $(<span class="string">&#x27;#file1&#x27;</span>)[<span class="number">0</span>].<span class="property">files</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.判断是否选择了文件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(files.<span class="property">length</span> &lt;= <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;请选择图片后再上传&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//向FormData中追加文件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span></span><br><span class="line"><span class="language-javascript">        fd.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>,files[<span class="number">0</span>])</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>:<span class="string">&#x27;http://&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:fd,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//不修改 Content-Type 属性，使用 FormData 默认的 Content-Type 值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">contentType</span>:<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//不对 FormData 中的数据进行 url 编码，而是将 FormData 数据原样发送到服务器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">processData</span>:<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="7-7-2loading效果"><a href="#7-7-2loading效果" class="headerlink" title="7.7.2loading效果"></a>7.7.2loading效果</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Ajax 请求开始时，执行 ajaxStart 函数。可以在 ajaxStart 的 callback 中显示 loading 效果</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ajaxStart</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     $(<span class="string">&#x27;#loading&#x27;</span>).<span class="title function_">show</span>()</span><br><span class="line"> &#125;)</span><br><span class="line"><span class="comment">//Ajax 请求结束时，执行 ajaxStop 函数。可以在 ajaxStop 的 callback 中隐藏 loading 效果</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ajaxStop</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     $(<span class="string">&#x27;#loading&#x27;</span>).<span class="title function_">hide</span>()</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>​**注意： **$(document).ajaxStart() 函数会监听当前文档内所有的 Ajax 请求。</p><h1 id="8-axios"><a href="#8-axios" class="headerlink" title="8. axios"></a>8. axios</h1><p>​Axios 是专注于网络数据请求的库。</p><p>​相比于原生的 XMLHttpRequest 对象，axios 简单易用。</p><p>​相比于 jQuery，axios 更加轻量化，只专注于网络数据请求。</p><h3 id="8-1axios发起GET请求"><a href="#8-1axios发起GET请求" class="headerlink" title="8.1axios发起GET请求"></a>8.1axios发起GET请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">axios.get(&#x27;url&#x27;, &#123; params: &#123; 参数 &#125; &#125;).then(callback)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//请求的URL地址</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;http://.....&#x27;</span></span><br><span class="line"><span class="comment">//请求的参数对象</span></span><br><span class="line"><span class="keyword">let</span> paramsObj = &#123;<span class="attr">name</span>:<span class="string">&#x27;aoteman&#x27;</span>,<span class="attr">age</span>:<span class="number">2000</span>&#125;</span><br><span class="line"><span class="comment">//使用axious.get()发起get请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(url,&#123;<span class="attr">params</span>:paramsObj&#125;).<span class="title function_">then</span>(<span class="params"><span class="keyword">function</span>(res)</span>)&#123;</span><br><span class="line"><span class="comment">//res.data是服务器返回的数据</span></span><br><span class="line"><span class="keyword">let</span> result = res.<span class="property">data</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2axios发起POST请求"><a href="#8-2axios发起POST请求" class="headerlink" title="8.2axios发起POST请求"></a>8.2axios发起POST请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">axios.post(&#x27;url&#x27;, &#123; 参数 &#125;).then(callback)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 请求的 URL 地址</span></span><br><span class="line"> <span class="keyword">let</span> url = <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span></span><br><span class="line"> <span class="comment">// 要提交到服务器的数据</span></span><br><span class="line"> <span class="keyword">var</span> dataObj = &#123; <span class="attr">location</span>: <span class="string">&#x27;北京&#x27;</span>, <span class="attr">address</span>: <span class="string">&#x27;顺义&#x27;</span> &#125;</span><br><span class="line"> <span class="comment">// 调用 axios.post() 发起 POST 请求</span></span><br><span class="line"> axios.<span class="title function_">post</span>(url, dataObj).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="comment">// res.data 是服务器返回的数据</span></span><br><span class="line">     <span class="keyword">let</span> result = res.<span class="property">data</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-3直接使用axios发起请求"><a href="#8-3直接使用axios发起请求" class="headerlink" title="8.3直接使用axios发起请求"></a>8.3直接使用axios发起请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">axios(&#123;</span></span><br><span class="line"><span class="comment">     method: &#x27;请求类型&#x27;,</span></span><br><span class="line"><span class="comment">     url: &#x27;请求的URL地址&#x27;,</span></span><br><span class="line"><span class="comment">     data: &#123;  POST数据  &#125;,</span></span><br><span class="line"><span class="comment">     params: &#123; GET参数  &#125;</span></span><br><span class="line"><span class="comment"> &#125;) .then(callback)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//GET</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">     <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;http://...&#x27;</span>,</span><br><span class="line">     <span class="attr">params</span>: &#123; <span class="comment">// GET 参数要通过 params 属性提供</span></span><br><span class="line">         <span class="attr">name</span>: <span class="string">&#x27;atm&#x27;</span>,</span><br><span class="line">         <span class="attr">age</span>: <span class="number">30000</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//POST</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">     <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;http://...&#x27;</span>,</span><br><span class="line">     <span class="attr">data</span>: &#123; <span class="comment">// POST 数据要通过 data 属性提供</span></span><br><span class="line">         <span class="attr">bookname</span>: <span class="string">&#x27;程序员的自我修养&#x27;</span>,</span><br><span class="line">         <span class="attr">price</span>: <span class="number">30</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="9-同源策略和跨域"><a href="#9-同源策略和跨域" class="headerlink" title="9. 同源策略和跨域"></a>9. 同源策略和跨域</h1><h3 id="9-1同源"><a href="#9-1同源" class="headerlink" title="9.1同源"></a>9.1同源</h3><p>​<strong>概念</strong>如果两个页面的<strong>协议</strong>、 <strong>域名</strong> 、<strong>端口</strong>都相同，那么两个页面具有相同的源。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http://www.test.com/index.html  </span><br><span class="line"></span><br><span class="line">http://www.test.com/other.html同源，协议、域名、端口都相同（端口没写默认为80）</span><br><span class="line">https://www.test.com/about.html不同源，协议不同</span><br><span class="line">http://blog.test.com/movie.html不同源，域名不同</span><br><span class="line">http://www.test.com:7001/home.html不同源，端口不同（7001和80）</span><br><span class="line">http://www.test.com:80/main.html同源，协议、域名和端口都相同</span><br></pre></td></tr></table></figure><h3 id="9-2同源策略"><a href="#9-2同源策略" class="headerlink" title="9.2同源策略"></a>9.2同源策略</h3><p>​同源策略（ Same origin policy）是浏览器提供的一个安全功能。同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p><p>​通俗的说就是：浏览器规定，不同源的两个网站无法进行资源交互，例如：</p><ol><li>无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB</li><li>无法接触非同源网页的 DOM</li><li>无法向非同源地址发送 Ajax 请求</li></ol><h3 id="9-3跨域"><a href="#9-3跨域" class="headerlink" title="9.3跨域"></a>9.3跨域</h3><h5 id="9-3-1同源"><a href="#9-3-1同源" class="headerlink" title="9.3.1同源"></a>9.3.1<strong>同源</strong></h5><p>​指的是两个 URL 的<strong>协议、域名、端口</strong>一致，反之，则是<strong>跨域</strong>。</p><h5 id="9-3-2原因"><a href="#9-3-2原因" class="headerlink" title="9.3.2原因"></a>9.3.2原因</h5><p>​出现<strong>跨域</strong>的<strong>根本原因</strong>是：浏览器的<strong>同源策略</strong>不允许非同源的URL之间进行资源的交互。</p><h5 id="9-3-3跨域请求的拦截"><a href="#9-3-3跨域请求的拦截" class="headerlink" title="9.3.3跨域请求的拦截"></a>9.3.3跨域请求的拦截</h5><p>​1.AJAX正常发起跨域请求到服务器</p><p>​2.服务器正常处理请求，并响应回数据</p><p>​3.浏览器正常接收跨域响应的数据，但是由于同源策略，会拦截这些数据，无法被页面获取。</p><h5 id="9-3-4如何实现跨域数据的请求"><a href="#9-3-4如何实现跨域数据的请求" class="headerlink" title="9.3.4如何实现跨域数据的请求"></a>9.3.4如何实现跨域数据的请求</h5><p>​两种解决方案：<strong>JSONP</strong> 和<strong>CORS</strong></p><p>​JSONP:出现的早，兼容性好（兼容低版本IE），<strong>缺点</strong>是只支持 GET 请求，<strong>不支持 POST 请求</strong>。</p><p>​CORS：出现的较晚，它是 W3C 标准，属于跨域 Ajax 请求的<strong>根本解决方案</strong>。<strong>支持 GET 和 POST 请求</strong>。缺点是<strong>不兼容某些低版本的浏览器</strong>。</p><h5 id="9-3-5-JSONP"><a href="#9-3-5-JSONP" class="headerlink" title="9.3.5 JSONP"></a>9.3.5 JSONP</h5><p>​JSONP(JSON with Padding),是JSON的一种使用模式，可用于解决主流浏览器的跨域数据访问问题。</p><p>​<strong>实现原理：</strong>由于浏览器的同源策略的限制，网页中<strong>无法通过AJAX请求非同源的接口数据</strong>，但是<script>标签不受同源策略的影响，可以通过src属性，请求跨域的数据接口，并通过<strong>函数调用</strong>的形式，接收跨域接口响应回来的数据(通过callback指定<strong>回调函数的名称</strong>)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发起跨域的AJAX数据请求</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://ajax.frontend.itheima.net:3006/api/jsonp&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//报错， Access-Control-Allow-Origin</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义一个success回调函数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">success</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取到了data数据&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--通过script标签请求接口数据--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://ajax.front.aaa.net:3000/api/jsonp?callback=success&amp;name=zs&amp;age=20&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//通过callback来指定回调函数为success，且传入了数据name为atm，age为20000</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于JSONP是通过script标签的src属性来请求跨域的数据接口，所以只能发起GET请求</p><h5 id="9-3-6jQuery中的JSONP"><a href="#9-3-6jQuery中的JSONP" class="headerlink" title="9.3.6jQuery中的JSONP"></a>9.3.6jQuery中的JSONP</h5><p>​默认情况下，使用 <strong>jQuery <strong>发起 JSONP 请求，</strong>会自动携带一个 callback=jQueryxxx 的参数，jQueryxxx 是随机生成的一个回调函数名称</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;http://xxx?name=atm&amp;age=20&#x27;</span>,</span><br><span class="line">    <span class="comment">// 如果要使用 $.ajax() 发起 JSONP 请求，必须指定 datatype 为 jsonp</span></span><br><span class="line">    <span class="attr">dataType</span>:<span class="string">&#x27;jsonp&#x27;</span></span><br><span class="line">    <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​在使用 jQuery 发起 JSONP 请求时，如果想要<strong>自定义 JSONP 的参数以及回调函数名称</strong>，可以通过如下两个参数来指定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://ajax.frontend.itheima.net:3006/api/jsonp?name=zs&amp;age=20&#x27;</span>,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">    <span class="comment">// 发送到服务端的参数名称，默认值为 callback</span></span><br><span class="line">    <span class="attr">jsonp</span>: <span class="string">&#x27;callback&#x27;</span>,</span><br><span class="line">    <span class="comment">// 自定义的回调函数名称，默认值为 jQueryxxx 格式</span></span><br><span class="line">    <span class="attr">jsonpCallback</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><p>​jQuery 中的 JSONP，也是通过 <script> 标签的 src 属性实现跨域数据访问的，只不过，jQuery 采用的是动态创建和移除 <script> 标签的方式，来发起 JSONP 数据请求。<br>​在发起 JSONP 请求的时候，动态向 <header> 中 append 一个 <script> 标签；<br>​在 JSONP 请求成功以后，动态从 <header> 中移除刚才 append 进去的 <script> 标签；</p><h5 id="9-3-7CORS"><a href="#9-3-7CORS" class="headerlink" title="9.3.7CORS"></a>9.3.7CORS</h5><p>​<strong>CORS （Cross-Origin Resource Sharing，跨域资源共享）</strong>由一系列 HTTP 响应头组成，<strong>这些 HTTP 响应头决定浏览器是否阻止前端 JS 代码跨域获取资源</strong>。 </p><p>​浏览器的<strong>同源安全策略</strong>默认会阻止网页“跨域”获取资源。但如果接口服务器配置了<strong>CORS 相关的 HTTP 响应头</strong>， </p><p>就可以解除浏览器端的跨域访问限制</p><ul><li><p>CORS 主要在服务器端进行配置。客户端浏览器<strong>无须做任何额外的配置</strong>，即可请求开启了 CORS 的接口。</p></li><li><p>CORS 在浏览器中有兼容性。只有支持 XMLHttpRequest Level2 的浏览器，才能正常访问开启了 CORS 的服 </p><p>务端接口（例如：IE10+、Chrome4+、FireFox3.5+）</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-初识客户端与服务器&quot;&gt;&lt;a href=&quot;#1-初识客户端与服务器&quot; class=&quot;headerlink&quot; title=&quot;1.初识客户端与服务器&quot;&gt;&lt;/a&gt;1.初识客户端与服务器&lt;/h1&gt;&lt;h3 id=&quot;1-1客户端与服务器&quot;&gt;&lt;a href=&quot;#1-1客户端与</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="AJAX" scheme="http://example.com/tags/AJAX/"/>
    
  </entry>
  
</feed>
